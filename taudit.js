// taudit.js version:06.01.51
// usage   taudit.js /hserver:xx.xx.xx.xx /hu:userid /hp:password       or      /url:"https://hubserver:3661///cms/soap"
// OTHER OPTIONAL 
// /mserver:MIRRORHost     	If using FTO MIRROR 
// ******* If using warehouse reports
//  /wserver:ODBCsource	Local ODBC source for remote warehouse 
// /wu:ODBCuserid 		Local ODBC userid for ODBC source
// /wp:ODBCpassword 		Local ODBC source password for ODBC source
// /dbt:ODBCtype                       Type of database if not DB2
// /schema:ITMUSER     	If using a different schema 
// /run:quick 			By default
//  /run:warehouse                     for warehouse only report
//  /run:kpi  /target:xxx  	for key performance indiacators  for systems having string 'xxx' in the Agent/System Name
// / run:long                                for long term availability (this month)
// /run:diag                                for diagnostics of connectivity and distributions
// /run:dist                                 for  situation   distributions
// /run:dupl                                 for  duplicate agents
// /run:error                               for errors only
// /run:history                            for checking missing history
// /sendevt:y                               send alerts to HUB/TEP
// /auto:y				This allows the script to run in automated mode without any prompts
// /auto:correct			This corrects the situation distributions when run with /run:dist      

var LIGHT_RED =  "#ffaaaa"; 		// light red
var LIGHT_GREEN = "#aaffaa"; 	// light green
var DARK_GREEN = "#006600";
var PALE_YELLOW = "#eeeeaa";	// very light yellow
var LIGHT_YELLOW =  "#ffffaa";	// light yellow
var MEDIUM_YELLOW =  "#fff888";
var LIGHT_ORANGE = "#ffccaa";
var LIGHT_VIOLET = "#ffaaff";
var LAVENDER = "#aaaaff";
var SKY_BLUE = "#B0E2FF";
var LIGHT_GREY = "#e1e1e1";
var PALE_GREY = "#efefef";
var WHITE = "#fefefe";
var BLACK = "#000000";
var RED = "#ff0000";
var LIGHT_BROWN = "#D6C299";		// light brown

var asfstr = "";             
var vnodes = new Array;
var prodstr = "";
var mirrorname = "";
var orphanstr = "";
var htmlstr = "";
var vsch = new Array;
var vschn = new Array;
var baddista = new Array;
var raddista = new Array;
var vout1 = new Array;
var vout2 = new Array;
var vout3 = new Array;
var totv3 = new Array;
var htmlstrwa = "";
var pruned = 0;
var summarized = 0;
var nstr = "";
var huptime = 0;
var muptime = 0;
var dno = 0;
var sendevt;
var rowsa = 0;
var xtotv3 = 0; 
var xfactor = 0;
var badno =0;
var radno =0;
var xax = 0;
var yax =0;
var objno = 0;
var watv3 = 0;
var maxv3 = 0;
var dmin = 0;
var kvout2 = new Array;
var kvout2t = new Array;
var validagent = "";
var subnodestr = "";
var htmlstr2 = "";
var madno = 0;
var dtotalw = 0;
var dtotala = 0;
var totald = 0;
var totalh = 0;
var totalw = 0;
var maddist = new Array;
var bxmlestr = "";
var vhrtp = new Array;
var temversion = new Array;
var vhrt = new Array;
var uptime = new Array; 
var vhrtn = new Array;
var vupt = new Array;
var vuptn = new Array;
var vuptp = new Array;
var vtot = new Array;
var caterr = "no";
var vgrp = new Array;
var sitav = new Array;
var xgrp = new Array;
var dhrt = new Array;
var dupt = new Array;
var dsch = new Array;
var dgrp = new Array;
var catstr = "";
var temno = new Array;
var temstatus  = new Array; 
var vnodelistl = new Array;
var vnodelistn = new Array;
var xmpstr = "";
var xnumstr = "";
var backcol = "";
var begind = "";
var nsch=0,nschn=0,nhrt=0,nhrtn=0,nupt=0,nuptn = 0;
var newDate;
var  oRs, newDate, yfactor, vout3len, vout3n, kvout2tn, rows, node, nodec, filename2, nodeslen, dutime, sitalen, comp, num , adiv, xstr;
var halias = "soap";
var hsport = "1920";
var hserver = "localhost";
var mserver = "";
var eserver = "d03nm124.boulder.ibm.com";
var hu = "sysadmin";
var hp = "Ams49test";
var wserver ="itmx24";
var wu = "ITMUSER";
var wp = "wpassword";
var dbt = "db2";
var subject = "This is an email generated by TAUDIT: ";
var baddist = "";
var autoreport;
var abc = "";
var xxmle; 
var oConn =  WScript.CreateObject("ADODB.Connection");
var newr = 0;
var topstr1 = new Array;
var sno = 0;
var s1w = "";
var s2w = "";
var lutime = "";
var file5str = "";
var distnum = 0;
var hubremdist = new Array;
var nresptime = new Array;
var htmlstrsa= "";
var histdiscrepancy = "<br></br><h4><font color=\"brown\">History Collections Stopped</font></h4><br/><v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Online Managed Systems Missing History .<br/><v:line strokeweight='8px'  strokecolor='#ffffaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Offline Managed Systems Missing History .<br/><v:line strokeweight='8px'  strokecolor='#eeeeee' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Deleted Managed System Missing History .<table cellspacing='0' cellpadding = '0' ><tr><th>Object</th><th>Managed System</th><th>Last Write</th></tr>";
var runt = "quick";
var reason = new Array;
var schema = "ITMUSER";
var ktarget = "";
xmlDoc = WScript.CreateObject("Microsoft.XMLDOM");  
var path = "";    
var trace = "NO";   
var traceFilePath;   
var wshShell = WScript.CreateObject("WScript.Shell");
var fso;
var title;
var msg;
var listOnlineRTEMS = "";
				
try {
	if ( WScript.Arguments.Named.Item("hu") )       {  hu = WScript.Arguments.Named.Item("hu"); } 
	if ( WScript.Arguments.Named.Item("hp") )       {  hp = WScript.Arguments.Named.Item("hp"); } 
	if ( WScript.Arguments.Named.Item("hserver") )  {  hserver = WScript.Arguments.Named.Item("hserver"); } 
	if ( WScript.Arguments.Named.Item("halias") )   {  halias = WScript.Arguments.Named.Item("halias"); } 
	if ( WScript.Arguments.Named.Item("hsport") )  {  hsport = WScript.Arguments.Named.Item("hsport"); } 
	if ( WScript.Arguments.Named.Item("wu") )       {  wu = WScript.Arguments.Named.Item("wu"); } 
	if ( WScript.Arguments.Named.Item("wp") )       {  wp = WScript.Arguments.Named.Item("wp"); } 
	if ( WScript.Arguments.Named.Item("wserver") )  {  wserver = WScript.Arguments.Named.Item("wserver"); } 
	if ( WScript.Arguments.Named.Item("dbt") )      {  dbt = WScript.Arguments.Named.Item("dbt"); } 
	if ( WScript.Arguments.Named.Item("auto") )      {  autoreport = WScript.Arguments.Named.Item("auto"); } 
	if ( WScript.Arguments.Named.Item("path") )      {  path = WScript.Arguments.Named.Item("path"); }
	if ( WScript.Arguments.Named.Item("trace") )      {  trace = WScript.Arguments.Named.Item("trace"); } 
	if ( WScript.Arguments.Named.Item("indent") )      {  trace = WScript.Arguments.Named.Item("indent"); }		
 
 	if ( WScript.Arguments.Named.Item("e") ) {
		var estring = WScript.Arguments.Named.Item("e");
		var euser = estring.split(",");
	} 

	if ( WScript.Arguments.Named.Item("run") ) {  
		runt = WScript.Arguments.Named.Item("run");
	
		if ((runt=="kpi")||(runt=="dist")) { 
			wserver = "HSH"; 
		}

		if (runt=="history") { 
			runt = "warehouse"; 
			sendevt = "n"; 
		}
	
		if ( WScript.Arguments.Named.Item("sendevt") ) {  
			sendevt = WScript.Arguments.Named.Item("sendevt"); 
		} 
	}

	switch (runt)
	{
		case "error":
			title="Taudit for Errors";
			msg="Errors Audit REPORT is running in background";
			break;
		case "quick":
			title="Taudit for Enterprise";
			msg="Enterprise Audit REPORT is running in background";
			break;
		case "dist":
			title="Taudit for Situation Distributions";
			msg="Situation Distributions Audit REPORT is running in background"; 
			break;
		case "warehouse":
			if ( sendevt == "n" ) {
				title="Taudit for History Missing";
				msg="History Missing Audit REPORT is running in background";
			}
			else {
				title="Taudit for Warehouse";
				msg="Warehouse Audit REPORT is running in background";	
			}
			break;	
		case "dupl":	
			title="Taudit for Agent Contactability";
			msg="Agent Contactability Audit REPORT is running in background"; 		
			break;
		default:	
	}

	wshShell.Popup(msg, 5, title); 
	traceFilePath = path + "itmsuper_trace.log";
	fso = WScript.CreateObject("Scripting.FileSystemObject");	

	if (trace != "NO") {
		var traceFile = fso.OpenTextFile(traceFilePath, 8, true);
		traceFile.WriteLine( "\n " + (new Date).toLocaleString() + "  ;\tbackground process >> taudit.js /run:" + runt + " /sendevt:" + sendevt + " ENTRY");
		traceFile.Close();			
	}	

	if ( WScript.Arguments.Named.Item("mserver") )      {  mserver = WScript.Arguments.Named.Item("mserver"); }
	if ( WScript.Arguments.Named.Item("schema") )      {  schema = WScript.Arguments.Named.Item("schema"); }
	if ( WScript.Arguments.Named.Item("target") )      {  ktarget = WScript.Arguments.Named.Item("target"); }

	var url   = "http://" + hserver + ":" + hsport + "///cms/" + halias;
		
	if ( WScript.Arguments.Named.Item("url") ) {  
		url = WScript.Arguments.Named.Item("url"); 
	}
	
	var url35 = "http://" + mserver + ":" + hsport + "///cms/" + halias;

	if (trace != "NO") {
		var traceFile = fso.OpenTextFile(traceFilePath, 8, true);
		traceFile.WriteLine(" " + (new Date).toLocaleString() + "  ;\t\turl is <" + url + ">");
		traceFile.WriteLine(" " + (new Date).toLocaleString() + "  ;\t\turl35 is <" + url35 + ">");
		traceFile.Close();			
	}	
} 
catch(e) 
	{ }

if (!autoreport) {
	WScript.Echo(url); 
}

var kpia = new Array;
var kpip = new Array("products", "NT", "UX", "LZ", "PX", "VA","R2","R6","R4","M5","PH","VL");
kpia[0] = new Array;
kpia[1] = new Array("System CPU;NT_System;Total_Processor_Time;Server_Name;Processors;Number_of_Processors","Top Process;NT_Process_64;Thread_Count;Process_Name;Processes","Top Process Memory;NT_Process_64;Working_Set;Process_Name;Processes:","Paging File;NT_Paging_File;Usage;Pagefile_Name;Paging Files","Disk Space;NT_Logical_Disk;Used;Disk_Name;Disks");
kpia[2] = new Array("System CPU;SMP_CPU;System_CPU;CPU_ID;Processors","Top Process CPU;Process;CPU_Time;Base_Command;Processes","Top Process Memory;Process;Virtual_Size;Base_Command;Processes","Paging;Unix_Memory;Used_Real_Mem_Pct;System_Name;Systems","Disk Space;Disk;Space_Used_Percent;Name;Disks");
kpia[3] = new Array("System CPU;Linux_CPU;System_CPU;CPU_ID;Processors","Top Process CPU;Linux_Process;Proc_CPU;Process_Command_Name;Processes","Top Process Memory;Linux_Process;Total_Size_Memory;Process_Command_Name;Processes","Paging;Linux_VM_Stats;Virtual_Storage_Pct_Used;System_Name;Systems","Disk Space;Linux_Disk;Space_Used_Percent;Disk_Name;Disks");
kpia[4] = new Array("System CPU;KPX_CPU_DETAIL;System_CPU_Pct;CPU_Number;CPUs","Top Process CPU;KPX_PROCESSES_DETAIL;Total_CPU_Time;Process_Name;Processes","Top Process Memory;KPX_PROCESSES_DETAIL;Page_Space_Used;Process_Name;Processes","Paging;KPX_PAGING_SPACE;Used_Pct;Node;Systems","Disk Space;KPX_LOGICAL_VOLUMES;Size_MB;Name;Logical Volumes");
kpia[5] = new Array("System CPU;KVA_CPU_DETAIL;System_CPU_Pct;CPU_Number;CPUs","Top Process CPU;KVA_PROCESSES_DETAIL;Total_CPU_Time;Process_Name;Processes","Top Process Memory;KVA_PROCESSES_DETAIL;Page_Space_Used;Process_Name;Processes","Paging;KVA_PAGING_SPACE;Used_Pct;Node;Systems","Disk Space;KVA_LOGICAL_VOLUMES;Size_MB;Name;Logical Volumes");
kpia[6] = new Array("System CPU;KR2_PROCESSOR;Pct_Processor_Time;Node;Processors;Number_of_Processors","Top Process;KR2_PROCESS;Handle_Count;Name;Processes","Top Process Memory;KR2_PROCESS;Page_File_KBytes;Name;Processes:","Paging Fle;KR2_PAGING_FILE_SUMMARY;Pct_Usage_Peak;Name;Paging Files","Disk Space;KR2_LOGICAL_DISK;Pct_Used_Space;Name;Disks");
kpia[7] = new Array("System CPU;KR6_SMA_PROCESSOR;CPU_Used_Pct;Node;Processors","Top Process CPU;KR6_PROCESSES;Cumulative_CPU_Time;Name;Processes","Top Process Memory;KR6_PROCESSES;Memory_Utilization_KB;Name;Processes","Paging;KR6_SMA_MEMORY;Used_Swap_Space_Pct;Node;Systems","Disk Space;KR6_SMA_DISK;Percentage_of_Used_Disk_Space;Name;Disks");
kpia[8] = new Array("System CPU;KR4_PROCESSOR;CPU_Used_Pct;Node;Processors","Top Process CPU;KR4_PROCESSES;Cumulative_CPU_Time;Command;Processes","Top Process Memory;KR4_PROCESSES;Memory_Utilization_KB;Command;Processes","Paging;KR4_VIRTUAL_MEMORY;Percentage_of_Used_Virtual_Memory;Node;Systems","Disk Space;KR4_DISK;Percentage_of_Used_Disk_Space;Name;Disks");
kpia[9] = new Array("System CPU;System_CPU_Utilization;Average_CPU_Percent;Managed_System;Processors;CPU_Online","Top AddressSpace CPU;Address_Space_CPU_Utilization;Job_CPU_Time;Job_Name;AddressSpaces","Top AddressSpace Memory;Address_Space_Virtual_Storage;Total_Virtual;Address_Space_Name;AddressSpaces","Paging;Page_Dataset_Activity;Page_Rate;Volume;Page Volumes","Common Storage;Common_Storage;In_Use_Percent;Area;Areas");
kpia[10] = new Array("System CPU;KPH_CPU_SUMMARY;System_CPU_Pct;Node;Processors;CPU_Online","Top Process CPU;KPH_PROCESSES_DETAIL;CPU_Pct;Name;Processes","Top Process Memory;KPH_PROCESSES_DETAIL;Memory_Pct;Name;Processes","Paging;KPH_PAGING_SPACE;Used_Pct;Node;Page Volumes","File Systems;KPH_FILE_SYSTEMS;Used_Pct;Name;File_Systems ");
kpia[11] = new Array("System CPU;KVLSystem;CPU_Busy;System_ID;CPUs;CPU_Number","Top User CPU;KVLUser_Workload;CPU_Percent;User_ID;Users","Top User Memory;KVLUser_Workload;Working_Set_Size;User_ID;Users","LPARS;KVLLPAR_Info;LPAR_Busy;LPAR_Name;Lpars","Channel Data;KVLChannel_Data;Channel_Avg_Perc_Busy;Channel_Path_ID;Channel Paths");

var wflag = "";
var oldagent1 = "";
var oldagent2 = "";
var oldagent3 = "";
var oldagent4 = "";
var bcol = "#ffffff";
var sdastr = "";
var hstr1 = "";
var rowstr1 = "";
var xnum = 0;
var dayno = (new Date).getDate() + 1;

var secms = 0;
var xmlhttp = WScript.CreateObject("Msxml2.ServerXMLHTTP.3.0");
var target = "*ALL";
var x15 = 17;
var objname = "*";
var topstrx = " ";
var xslt = "csv";
var leftOffset = 200;
var filename, filetime, xslt, attr1, attr2, attr3, history;
var date      = new Date;
var date1 = " ";
var hpayload  = "";
var hdno = 0;
var gpayload = "<sql> Started</sql>";
vargpayload = " ";
var rexcplen = 0;
var callrate = 0;
var resptime = 0;

var nx = 0;
var rpayload = " ";
var backcol = LIGHT_GREEN;
var callcnt = new Array;
var calltxt = new Array;
calltxt[0] = "1";
var apps = new Array;
var rapps = new Array;
var apptime = new Array; 
var uadstr = new Array;
var radstr = new Array;
var dnodes = new Array;
var node1 = new Array;
var node2 = new Array;
var nversion = new Array;
var noplog = new Array;
var nip = new Array;
var ncms0 = new Array;
var ncms1 = new Array;
var ncms2 = new Array;
var ncms3 = new Array;
var ncms4 = new Array;
var ncms5 = new Array;
var ncms6 = new Array;
var obja = new Array;
//var sita = new Array;
var sits = new Array;
var auts = new Array;
var barrel = new Array;
var barrels = new Array;
var uptime = new Array;
var colstr5 = 'var rsit = new Array("*ONLINE"';
var colstr6 = 'var rorg = new Array("*ONLINE"';
var colstr7 = 'var ratom = new Array("*ONLINE"';
var colstr8 = 'var rstat = new Array("*ONLINE"';
//var colstra = 'var numArray = new Array("*ONLINE"';
var colstrb = 'var hnum = new Array("*ONLINE"';
var colstrc = 'var mnum = new Array("*ONLINE"';
//var sitastr = 'var sita = new Array("A"';
var objastr = 'var obja = new Array("B"';
var nodesstr = 'var nodes = new Array("C"';
var abcstr = 'var abc = new Array("D"';
var tcallcnt = 0;
var eibchanges = "";
var today = date.toDateString();
var xmle;
var factor = 20;
var hinfo = new Array;
var parent = new Array;
var type = new Array;
var nstatus = new Array;
var ratom = new Array;
var rsit = new Array;
var rorg = new Array;
var rstat = new Array;
var ngblt = new Array;
ngblt[0] = "";
var vnumarray = new Array;
var hnum = new Array;
var mnum = new Array;
var nodelev =   new Array;var xparent =   new Array;var navail =  	new Array;
var ylev = new Array;
var yaxis = new Array;
var vlev = new Array;
var nodesit = new Array;
var errorcount = 0;
var botstr  = "<div id='botdiv' style='position:absolute; top:100; visibility:hidden'><b><font color=\"brown\">OFFLINE Systems</font></b><br/><FIELDSET style='top:0;width:480; margin-left:0'><LEGEND>Instructions</LEGEND><span>Current Status is obtained from Managed Systems status, these systems are not reporting</span></FIELDSET><table cellpadding='0' style='border:1 solid black;' cellspacing='2'><tr><th></th><th>Managed System Name</th><th>Product Code</th><th>Managing Server (parent)</th><th>Timestamp</th><th>Reason</th></tr>";
var botstr2 = "<b>Today's Warehousing Audit report</b><br>Spreadsheet of Row inserts per Object per Hour and Daily Totals </br><table style='border:1 solid black;' cellspacing='0' cellpadding='0'><tr><th></th>";
var botstr3 = "<div id='botdiv' style='position:absolute; top:100;visibility:hidden'>";
var botstr4 = "<div id='botdiv' style='position:absolute; top:90;left:10;visibility:hidden'><FIELDSET style='width:780;'>";
      botstr4 += "<LEGEND>Stress Barrels: Analysis & Recommendations</LEGEND><b>Position cursor at the resource circle for information: </b><br/><v:arc style = 'width:8;height:8;' fillcolor='#59E817' startangle='0' endangle='359' ></v:arc>..Normal Utilization  <v:arc style='width:8;height:8;' fillcolor='#ee9900' startangle='0' endangle='359' ></v:arc>..Warning Utilization  <v:arc style='width:8;height:8;' fillcolor='#ff0000' startangle='0' endangle='359' ></v:arc>..High Utilization</FIELDSET>";
var botstr5 = "<div id='botdiv' style='position:absolute; top:90;left:10;visibility:hidden'>";
var botstr6 = "<div id='botdiv' style='position:absolute; top:90;left:10;visibility:hidden'>";
var botstr1b = " ";
var botstr1a = "<div id='botdiv' style='position:absolute; top:100;visibility:hidden'><b>CallCount and History/Enterprise Requests By Management Servers</b><br/><FIELDSET style='top:0;width:480; margin-left:0'><LEGEND>Instructions</LEGEND><span>Call Count represents (raw events, report requests rows and heartbeats)<br/> <v:line strokeweight='8px'  strokecolor='#aaffaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Running Requests  <v:line strokeweight='8px'  strokecolor='#B0E2FF' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Statistics Not available  <v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Error Requests</span></FIELDSET><table style='border:1 solid black;' cellpadding='0' cellspacing='0'><tr><th>Management Server</th><th>Response Seconds</th><th>Uptime Hours</th><th></th><th>Call Count</th><th>Calls /Second</th><th>History/Enterprise and Error Requests</th><th>Running Situations (<i># of Events</i>)</th></tr>";
var nscol = "88ff";
var fromstr = " ";
var topstr = "";
var grandTotal = 0;
var emno = 0;
var nemno = 0;
var levno = new Array;
var deadnodes = 0;
var rhdno = 1;
var xtim = 1000;
var xdno = 1;
xtim = 1440;
var gbltime = "";
var endTime = "1050820";
var xxx = "";
var nn = 0;
var nnn = 0;
var sqlstr = " ";
var vno = 0;
var kvout2tlen = 0;
var msgemail = "Summary : \n";
var kvout2len = 0;
var leftoffset = 0;
var sysstr = " abc";
var fs = WScript.CreateObject("Scripting.FileSystemObject");
var httpTimeout = 160000;	// 160 seconds
var httpTimeout_flag;
var glb_fileSysObj = new ActiveXObject("Scripting.FileSystemObject");	   
var lastTrace = "empty";
var indent=1;

try {
	fstr = "Exceptions" + runt + ".csv";
	file7 = fs.OpenTextFile(path + fstr, 2, true);
} 
catch(e) 
	{}

tprint();
getibmtime(0);
filetimen= filetime;

var obj = " ";
var outstr = "WWW";
var reportFile;

if (runt == "warehouse") { 
	reportFile = wareex(); 
}
else { 
 	reportFile = restof();
}

if (euser) { 
	email(); 
}

try {
	if (runt == "diag") {
		omtec();
	}
} catch(e) 
	{}

try {
	file7.Close(); 
} 
catch(e) 
	{}
		
if (!autoreport) {
	WScript.Echo("Done"); 
} 

if (autoreport) {
	msg = "REPORT may be found at " + reportFile;	

	switch (runt)
	{
		case "error":
			title = "Taudit for Errors ... DONE !";
			break;
		case "quick":
			title = "Taudit for Enterprise ... DONE !";
			break;			
		case "dist":
			title = "Taudit for Situation Distributions ... DONE !";
			break;
		case "warehouse":
			if ( sendevt == "n" )
				title = "Taudit for History Missing ... DONE !";
			else
				title = "Taudit for Warehouse ... DONE !";
			break;			
		case "dupl":	
			title = "Taudit for Agent Contactability ... DONE !";
			break;
		default:
	}
	wshShell.Popup(msg, 0, title); 	
	
	if (trace != "NO") {
		var traceFile = fso.OpenTextFile(traceFilePath, 8, true);
		traceFile.WriteLine( " " + (new Date).toLocaleString() + "  ;\tbackground process >> taudit.js /run:" + runt + " EXIT\n");
		traceFile.Close();			
	}		
}	


function traceLog(traceMsg)
{
	var ctr;
	var tab = "\t";
	if (typeof trace != "undefined") {
		if (trace != "NO") {
			var traceFile = glb_fileSysObj.OpenTextFile(path + "itmsuper_trace.log", 8, true);

			if (lastTrace.search (/ENTRY/) > 0 ) {
				if ( traceMsg.search(/ENTRY/) > 0 ) {	// we have 2 ENTRY's in a row, time to TAB (indent)
					indent++;
					for (ctr = 0; ctr < indent; ctr++)
					{
						traceMsg = tab + traceMsg;
					}
				}
				else {
					for (ctr = 0; ctr < indent; ctr++)
					{
						traceMsg = tab + traceMsg;
					}					
				}
			}
			else {
				if (lastTrace.search (/EXIT/) > 0 ) {					
					if ( traceMsg.search(/EXIT/) > 0 ) {	// we have 2 EXIT's in a row, time to back TAB
						if ( indent > 1 )
							indent--;
						for (ctr = 0; ctr < indent; ctr++)
						{
							traceMsg = tab + traceMsg;
						}
					}
					else {
						for (ctr = 0; ctr < indent; ctr++)
						{
							traceMsg = tab + traceMsg;
						}					
					}	
				}					
				else {
					for (ctr = 0; ctr < indent; ctr++)
					{
						traceMsg = tab + traceMsg;
					}					
				}					
			}	
							
			traceFile.WriteLine(" " + (new Date).toLocaleString() + "  ; " + traceMsg);
			traceFile.Close();	
			lastTrace = traceMsg;		
		}
	}
}	
	

function getlog1() 
{
 dpath = prcmd1.split("omnibus")[0]; 
  dname = dpath + "omnibus/var/tivoli_eif.cache";
sqlstr = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32);"
 gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();
  x1=xmle.getElementsByTagName('FILEDATA');
  hstr2 += "<div id='divlog" + dnlog + "'><h4 title='" + dname  + "'> OMNIBUS EIF Cache Analysis : " + agentname + "  </h4>";
  if (x1.length < 4) {
  bcol = "#aaffaa";
    } else { 
	bcol = "#ffaaaa" ; }
	hstr2 += "<b style='background-color:" + bcol + ";'> Cache has " + (x1.length - 3 ) + "Events ( 1 or more Events in cache indicates a forwarding Error )</b>";
    
	dname = dpath + "omnibus/log/tivoli_eif.log";
	hstr2 += "<div id='divlog" + dnlog + "'><h4 title='" + dname  + "'>OMNIBUS EIF Log Analysis : " + agentname + "</h4>";

  sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32) AND SYSTEM.PARMA('PARM','RANGE=mrange',15);";
  for (n2=0;n2 < 100; n2++) { 
  xstr = "" + (n2 * 100) + "-" + ((n2*100) + 100);
  logstr2 = "";
  sqlstr = sqlstr1.replace(/mrange/,xstr);
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();
  x1=xmle.getElementsByTagName('FILEDATA');
   for(i=0;i< (x1.length); i++) {
  try {
  lstr = x1[i].childNodes[0].nodeValue;
  lstr = lstr.replace(/\</g,"_");
      if (i==0) { logstr2 += "<b style='background-color:#ffffff;'>" + n2 + ";" +  "</b>"; }
  if (lstr.length < 10) { continue; }
  if (lstr.split("Debug:").length > 1) { continue; }
   if (lstr.split("Information:").length > 1) { if (lstr.split("stderr:").length > 1) { wflag = "Y"; bcol = LIGHT_YELLOW; } else { continue;} }
  if (lstr.split("Error:").length > 1) { if (lstr.split("eceived").length == 1) {wflag = "Y"; bcol = LIGHT_RED;}  else { continue; }  }
  if (lstr.split("Warn").length > 1) {  
    if (lstr.split("orrupted").length > 1) {
   wflag = "Y"; bcol = LIGHT_RED;
	} else {
  if (wflag == "Y") {

  wflag = "N";
  bcol = LIGHT_GREEN;

  } else { continue;}  
  } }
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr + "</b><br/>";
  } catch(e) {}
  }
hstr2 += logstr2;
if (x1.length <100) { break; }
}
hstr2 += "</div>";
}
//beh var wflag = "";
function getlog2() {
  dpath = prcmd2.split("omnibus")[0]; 
  dname  = dpath + "omnibus/log/NCOMS.log";
  hstr3 += "<div id='divlog" + dnlog + "'><h4 title='" + dname  + "'>OMNIBUS Object Server Log Analysis : " + agentname + "</h4>";
    sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32) AND SYSTEM.PARMA('PARM','RANGE=mrange',15);";
  for (n2=0;n2 < 100; n2++) { 
  xstr = "" + (n2 * 100) + "-" + ((n2*100) + 100);
  logstr2 = "";
  sqlstr = sqlstr1.replace(/mrange/,xstr);
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();
  x1=xmle.getElementsByTagName('FILEDATA');

   for(i=0;i< (x1.length); i++) {
   bcol = LIGHT_RED;
    if (i==0) { logstr2 += "<b style='background-color:#ffffff;'>" + n2 + ";" +  "</b>"; }
  try {
  lstr = x1[i].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
    if (lstr.split("Debug:").length > 1) { continue; }
   if (lstr.split("Information:").length > 1) { continue; }
  if (lstr.length < 10) { continue; }
  if (lstr.split("Error:").length > 1) { wflag = "Y"; bcol =LIGHT_RED;}  
  if (lstr.split("Warn").length > 1) {  if (wflag == "Y") {wflag = "N"; bcol =LIGHT_GREEN;} else { continue;}  } 
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr + "</b><br/>";
  } catch(e) {
  }
  }
hstr3 += logstr2;
if (x1.length <100) { break; }
}
hstr3 += "</div>";
}

function mrinit() {

htmlstr="";
pnodelstra = new Array;
vnodelstra = new Array;
paffa = new Array;
gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT  AFFINITIES,NODE,NODELIST,NODETYPE FROM O4SRV.TNODELST WHERE  (NODELIST < 'A' AND NODETYPE = 'M') OR NODETYPE = 'V'  ORDER BY AFFINITIES,NODETYPE ]]></sql> </CT_Get>";
tprint();
oldstr = "";
nodel = new Array;

rows = xmle.getElementsByTagName('ROW');
 rowno = rows.length;

pno = 0;
for (n1 =0 ; n1 < rowno; n1++) {
 try {
 if (oldstr ==  rows[n1].childNodes[0].childNodes[0].nodeValue) {
 if (  rows[n1].childNodes[3].childNodes[0].nodeValue == 'M' ) {
 pnodelstra[pno] +=  rows[n1].childNodes[1].childNodes[0].nodeValue + ";" ;
 } else {
 vnodelstra[pno] += rows[n1].childNodes[2].childNodes[0].nodeValue + ";" ;
 }
 } else {
  pno++;
  
 paffa[pno] = rows[n1].childNodes[0].childNodes[0].nodeValue;
 if (  rows[n1].childNodes[3].childNodes[0].nodeValue == 'M' ) {
 nodel[pno] = rows[n1].childNodes[2].childNodes[0].nodeValue; }
 pnodelstra[pno] = rows[n1].childNodes[1].childNodes[0].nodeValue + ";";
 vnodelstra[pno]  = "";
 oldstr =  rows[n1].childNodes[0].childNodes[0].nodeValue;

 }
  } catch(e) {}
} 

gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT AFFINITIES, NODE,THRUNODE FROM O4SRV.INODESTS WHERE PRODUCT <> 'EM' ORDER BY AFFINITIES]]></sql> </CT_Get>";
tprint();
rows = xmle.getElementsByTagName('ROW');
 rowno = rows.length;
pno = 0;
badnodeln = 0;
 var xno = 0;
badnodela = new Array;
for (n1 =0 ; n1 < rowno; n1++) {
for (xno = 0; xno < paffa.length; xno++) {
try {
if (paffa[xno] ==  rows[n1].childNodes[0].childNodes[0].nodeValue) { 
xstr = rows[n1].childNodes[1].childNodes[0].nodeValue + ";" ;
spln = pnodelstra[xno].split(xstr);

if ((spln.length == 1)&&(xstr != nodel[xno])) { 
if (!nodel[xno]) { 
badnodela[badnodeln] = "X;" + xstr +   "Undefined;" + paffa[xno];
badnodeln++;
 }
if (nodel[xno].substring(0,1) == "*") {
badnodela[badnodeln] = "M;" + xstr +  nodel[xno]  + ";" + paffa[xno];
badnodeln++;
}
 } 
spln = vnodelstra[xno].split(xstr);

if (spln.length == 1) { 
WScript.Echo(xstr);
WScript.Echo(vnodelstra[xno]);

badnodela[badnodeln] = "V;" + xstr + rows[n1].childNodes[2].childNodes[0].nodeValue + ";" + paffa[xno] + ":::" + vnodelstra[xno] + ":::" + pnodelstra[xno];
badnodeln++;

 } 

break;
 }
} catch(e) {} 
} 

}

	hstr21 += "<br/><td valign='top'><h4><font color=\"brown\">Nodes missing generic nodelist entries</font></h4>";

	if (badnodeln) {
		hstr21 += "<b>These nodes do not have corresponding generic nodelist entries</b><br/><table   cellspacing='0' style='border:1 solid black'>";
		
		for (n9=0; n9 < badnodeln; n9++) {
			xstr = badnodela[n9];
		
			if (xstr.split(";")[0] == "X") {
				hstr21 += "<tr><td style='background-color:#ffffaa' >" + xstr + "</td></tr>"; 
				continue;
			}
			hstr21 += "<tr><td style='background-color:#ffaaaa' >" + xstr + "</td></tr>";
			
			if (xstr.split(";")[0] == "M") {
				gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[INSERT INTO O4SRV.TNODELST (AFFINITIES,  LSTDATE, LSTUSRPRF, NODELIST, NODE, NODETYPE ) VALUES ('" +  xstr.split(";")[3]  + "',' ','" + hu + "', '" +  xstr.split(";")[2]  + "','" + xstr.split(";")[1] + "','M' ) ]]></sql> </CT_Get>"; 
			}
			else {
				gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[INSERT INTO O4SRV.TNODELST (AFFINITIES,  LSTDATE, LSTUSRPRF, NODELIST, NODE, NODETYPE ) VALUES ('" +  xstr.split(";")[3]  + "',' ','" + hu + "', '" +  xstr.split(";")[1]  + "','" + xstr.split(";")[2] + "','V' ) ]]></sql> </CT_Get>"; 
			}
			//tprint();
			//hstr21 += "<tr><td style='background-color:#aaffaa' >" + badnodela[n9] + "</td></tr>";
		}
		hstr21 += "</table><br/><br/>";
	} 
	else {
		hstr21 += "<span style='font-size:17px;'><b><i>Good News !</i> . . . No nodes are missing generic nodelist entries</b></span><br/><br/>";
	}
}


function getlog3() {

  dpath = prcmd3.split("impact")[0]; 
  dname  = dpath + "impact/log/netcool-errors.log";
  hstr3 += "<div id='divlog" + dnlog + "'><h4 title='" + dname  + "'>Impact Server Log Analysis : " + agentname + "</h4>";
    sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32) AND SYSTEM.PARMA('PARM','RANGE=mrange',15);";
  for (n2=0;n2 < 10; n2++) { 
  xstr = "" + (n2 * 100) + "-" + ((n2*100) + 100);
  logstr2 = "";
  sqlstr = sqlstr1.replace(/mrange/,xstr);
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();
  x1=xmle.getElementsByTagName('FILEDATA');
   for(i=0;i< (x1.length); i++) {
  try {
  lstr = x1[i].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
      if (i==0) { logstr2 += "<b style='background-color:#ffffff;'>" + n2 + ";" +  "</b>"; }
    if (lstr.split("Debug:").length > 1) { continue; }
   if (lstr.split("Information:").length > 1) { continue; }
  if (lstr.length < 10) { continue; }
  if (lstr.split("ERROR").length > 1) { wflag = "Y"; bcol = LIGHT_RED;}  
  if (lstr.split("Warn").length > 1) {  if (wflag == "Y") {wflag = "N"; bcol = LIGHT_GREEN;} else { continue;}  } 
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr.replace(/[\r\n]/g, "") + "</b><br/>";
  } catch(e) {}
  }
hstr3 += logstr2;
if (x1.length <100) { break; }
}

}
//behvar oldagent1 = "";
//beh var oldagent2 = "";
//beh var oldagent3 = "";
//beh var oldagent4 = "";
//beh var bcol = "#ffffff";

function getlog7() {

  dpath = prcmd.split("home=")[1].split("sdk")[0]; 
  dname  = dpath + "sdk/log/error.log";
   
  hstr3 += "<div id='divlog" + dnlog + "'><h4 title='" + dname  + "'>TADDM Server Log Analysis : " + agentname + "</h4>";
    sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32) AND SYSTEM.PARMA('PARM','RANGE=mrange',15);";
  for (n2=0;n2 < 10; n2++) { 
  xstr = "" + (n2 * 100) + "-" + ((n2*100) + 100);
  logstr2 = "";
  sqlstr = sqlstr1.replace(/mrange/,xstr);
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();

  x1=xmle.getElementsByTagName('FILEDATA');
   for(i=0;i< (x1.length); i++) {
  try {
  lstr = x1[i].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
   if (i==0) { logstr2 += "<b style='background-color:#ffffff;'>" + n2 + ";" +  "</b>"; }
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr.replace(/[\r\n]/g, "") + "</b><br/>";
  } catch(e) {}
  }
hstr3 += logstr2;
if (x1.length <100) { break; }
}
hstr3 += "</div>";
}


function getlog4() {

if (prcmd4.split("tipv2").length > 1 ) {
  dpath = prcmd4.split("tipv2")[0]; 
  dname  = dpath + "tipv2/profiles/TIPProfile/logs/server1/SystemErr.log";
   } else 
   
   {
  dpath = prcmd4.split("tip")[0]; 
  dname  = dpath + "tip/profiles/TIPProfile/logs/server1/SystemErr.log";
   }
   
  hstr3 += "<div id='divlog" + dnlog + "'><h4 title='" + dname  + "'>TIP WAS Server Log Analysis : " + agentname + "</h4>";
    sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32) AND SYSTEM.PARMA('PARM','RANGE=mrange',15);";
  for (n2=0;n2 < 10; n2++) { 
  xstr = "" + (n2 * 100) + "-" + ((n2*100) + 100);
  logstr2 = "";
  sqlstr = sqlstr1.replace(/mrange/,xstr);
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();

  x1=xmle.getElementsByTagName('FILEDATA');
   for(i=0;i< (x1.length); i++) {
  try {
  lstr = x1[i].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
      if (i==0) { logstr2 += "<b style='background-color:#ffffff;'>" + n2 + ";" +  "</b>"; }
    if (lstr.split("Debug:").length > 1) { continue; }
   if (lstr.split("Information:").length > 1) { continue; }
  if (lstr.length < 10) { continue; }
  if (lstr.split("SystemErr").length > 1) { wflag = "Y"; bcol = LIGHT_RED;}  
  if (lstr.split("Warn").length > 1) {  if (wflag == "Y") {wflag = "N"; bcol = LIGHT_GREEN;} else { continue;}  } 
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr.replace(/[\r\n]/g, "") + "</b><br/>";
  } catch(e) {}
  }
hstr3 += logstr2;
if (x1.length <100) { break; }
}
hstr3 += "</div>";
}

function getlog5() {

   dpath = prcmd5.split("ITM")[0]; 

  if (agentname.split(":").length > 2) {
    dname  = dpath + "ITM/logs/" + agentname.split(":")[1] + "_cq.inv";
  } else {
    dname  = dpath + "ITM/logs/" + agentname.split(":")[0] + "_cq.inv";
  }
  hstr3 += "<div id='divlog" + dnlog + "'><h4 title='" + dname + "'>TEPS Server Log Analysis : " + agentname + "</h4>";
  sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32);";
  logstr2 = "";
  sqlstr = sqlstr1;
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();

  x1=xmle.getElementsByTagName('FILEDATA');
  lstr = x1[0].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr + "</b><br/>";

  dname = lstr;
 sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32) AND SYSTEM.PARMA('PARM','RANGE=mrange',15);";
 
  for (n2=0;n2 < 10; n2++) { 
  xstr = "" + (n2 * 100) + "-" + ((n2*100) + 100);
  logstr2 = "";
  sqlstr = sqlstr1.replace(/mrange/,xstr);
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();
  x1=xmle.getElementsByTagName('FILEDATA');

  for(i=0;i< (x1.length); i++) {
  bcol = "#ffffff";
  try {
  lstr = x1[i].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
  if (i==0) { logstr2 += "<b style='background-color:#ffffff;'>" + n2 + ";" +  "</b>"; }
  if (lstr.length < 10) { continue; }
  if (lstr.split("Request failed").length > 1) {  bcol = LIGHT_RED;}  
  if (lstr.split("Exception").length > 1) {  bcol = LIGHT_YELLOW; } 
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr.replace(/[\r\n]/g, "") + "</b><br/>";
  } catch(e) {}
  }
hstr3 += logstr2;
if (x1.length <100) { break; }
}
hstr3 += "</div>";
}


function getlog6() {

  dpath = prcmd6.split("ITM")[0]; 
  if (agentname.split(":").length > 2) {
    dname  = dpath + "ITM/logs/" + agentname.split(":")[1] + "_ms.inv";
  } else {
    dname  = dpath + "ITM/logs/" + agentname.split(":")[0] + "_ms.inv";
  }
  hstr3 += "<div id='divlog" + dnlog + "'><h4 title='" + dname  + "'>TEMS Server Log Analysis : " + agentname + "</h4>";
  sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32);";
  logstr2 = "";
  sqlstr = sqlstr1;
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();

  x1=xmle.getElementsByTagName('FILEDATA');
  lstr = x1[0].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr + "</b><br/>";

  dname = lstr;
 sqlstr1 = "SELECT FILEDATA FROM O4SRV.TRANSCON AT('" + temsname + "') WHERE FILENAME='" + dname + "' AND  SYSTEM.PARMA('NODELIST','" + agentname + "',32) AND SYSTEM.PARMA('PARM','RANGE=mrange',15);";
 
  for (n2=0;n2 < 10; n2++) { 
  xstr = "" + (n2 * 100) + "-" + ((n2*100) + 100);
  logstr2 = "";
  sqlstr = sqlstr1.replace(/mrange/,xstr);
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();
  x1=xmle.getElementsByTagName('FILEDATA');

  for(i=0;i< (x1.length); i++) {
  bcol = "#ffffff";
  try {
  lstr = x1[i].childNodes[0].nodeValue;
   lstr = lstr.replace(/\</g,"_");
  if (i==0) { logstr2 += "<b style='background-color:#ffffff;'>" + n2 + ";" +  "</b>"; }
  if (lstr.length < 10) { continue; }
  if (lstr.split("GetEnv").length > 1) {  continue;}  
    if (lstr.split("failed").length > 1) {  bcol = LIGHT_RED;} 
  if (lstr.split("annot").length > 1) {  bcol =LIGHT_YELLOW; } 
  logstr2 += "<b style='background-color:" + bcol + ";'>" +  lstr.replace(/[\r\n]/g, "") + "</b><br/>";
  } catch(e) {}
  }
hstr3 += logstr2;
if (x1.length <100) { break; }
}
hstr3 += "</div>";
}

function omtec() {
traceLog("taudit.js::omtec() ENTRY");
hstr1 = " ";
hstr2 = " ";
hstr3 = " ";
c2 = " ";
c3 = " ";
c4 = " ";
c5 = " ";
dnlog = 0;
for(var n6=0; n6 < temno.length; n6++) {
if ((temstatus[n6] == "N")||(temstatus[n6] == "*OFFLINE")) { continue; }
temsname = temno[n6];
//try {
sqlstr = "SELECT CMDLINE, ORIGINNODE, VMSIZE,  PPID,STATE, PROCTHRD  FROM KLZ.KLZPROC AT('" + temsname + "') WHERE SYSTEM.PARMA('NODELIST', '*ALL', 32) AND PROCTHRD > 2 AND (STRSCAN (KLZPROC.CMDLINE, 'nco_') = 1 OR STRSCAN (KLZPROC.CMDLINE, 'tbsm') = 1  OR STRSCAN (KLZPROC.CMDLINE, 'dsmain') = 1 OR STRSCAN (KLZPROC.CMDLINE, 'KfwSer') = 1 OR STRSCAN (KLZPROC.CMDLINE, '/tip') = 1)";
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();

  trows = xmle.getElementsByTagName('ROW'); 
  if (trows.length > 0) { 
  hstr1 += "<h4> Tivloli Processes found on LINUX System:  </h4><table cellpadding='1' cellspacing='0'><tr><th>Process</th><th>Command</th><th>Memory</th><th>Elapsed Time</th><th>Execution State</th><th>Thread Count</th></tr>";

  for (n1=0; n1 <trows.length; n1++) {
try {
dnlog++;
	try {
	c2 = trows[n1].childNodes[2].childNodes[0].nodeValue; } catch(e) {}
	try { c3 = trows[n1].childNodes[3].childNodes[0].nodeValue;
		 c4 = trows[n1].childNodes[4].childNodes[0].nodeValue;
 c5 = trows[n1].childNodes[5].childNodes[0].nodeValue; } catch(e) {}
  agentname = trows[n1].childNodes[1].childNodes[0].nodeValue ;

  cmdt = " ";
  prcmd = trows[n1].childNodes[0].childNodes[0].nodeValue;

   if (prcmd.split("postmaster").length > 1 ) { continue; }
     if (prcmd.split("collation").length > 1 ) { cmdt = "TADDM Server"; 
 	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
     getlog7(); 
continue;  } 
  prcmd = prcmd.split(" ")[0];
  if (prcmd.split("tip").length > 1 ) {
  cmdt = "TIP Server"; 
  prcmd4 = prcmd; 
      	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";

  	 if (agentname == oldagent4 ) {  } else { oldagent4 = agentname; 
  getlog4();   
  } 
  continue;
  }
  if (prcmd.split("impact").length > 1 ) { cmdt = "IMPACT Server";  prcmd3 = prcmd;  
  if (agentname == oldagent3 ) {  } else { oldagent3 = agentname; 
  getlog3();  }
    	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
    continue;  }
  if (prcmd.split("ognos").length > 1 ) { cmdt = "TCR/COGNOS Server"; continue;   } 
  if (prcmd.split("nonnative").length > 1 ) { cmdt = "EIF Probes Server";  prcmd1 = prcmd; 
    if (agentname == oldagent1 ) {  } else { oldagent1 = agentname; 
  getlog1(); 
  }
 	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
   continue;
  } 
  if (prcmd.split("objserv").length > 1 ) { cmdt = "Tivoli Server"; prcmd2 = prcmd; 
      if (agentname == oldagent2 ) {  } else { oldagent2 = agentname; 
  getlog2();  }
    	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
 continue;  } 
    if (prcmd.split("KfwService").length > 1 ) { cmdt = "TEPS Server"; prcmd5 = prcmd; 
	 getlog5(); 
	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
  	 continue; } 
      if (prcmd.split("dsmain").length > 1 ) { cmdt = "TEMS Server"; prcmd6 = prcmd; 
	 getlog6(); 
	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
 continue; } 
  if (cmdt == " ") { continue; }
 }  catch(e) {}
  }
  hstr1 += "</table>";
  }
 //  } catch(e) {}

 try {
 
  sqlstr = "SELECT COMMAND, ORIGINNODE, VSIZE,ELAPTIME,EXECSTATE,THREADCNT FROM OMUNX.UNIXPS AT('" + temsname + "') WHERE SYSTEM.PARMA('NODELIST', '*ALL', 32) AND  (STRSCAN (UNIXPS.COMMAND, 'nco_') = 1 OR STRSCAN (UNIXPS.GRPN, 'tbsm') = 1 OR STRSCAN (UNIXPS.COMMAND, 'fwServic') = 1 OR STRSCAN (UNIXPS.COMMAND, 'dsmain') = 1 OR STRSCAN (UNIXPS.COMMAND, 'collation') = 1  OR STRSCAN (UNIXPS.COMMAND, '/tip') = 1 )";
  gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();   

  trows = xmle.getElementsByTagName('ROW');
 
  if (trows.length > 0) { 
    dpath = "";
  hstr1 += "<h4 > Tivoli Processes found on UNIX System: </h4><table cellpadding='1' cellspacing='0'><tr><th>Process</th><th>Command</th><th>Memory</th><th>Elapsed Time</th><th>Execution State</th><th>Thread Count</th></tr>";
  for (n1=0; n1 <trows.length; n1++) {
try {
dnlog++;
	try {
	c2 = trows[n1].childNodes[2].childNodes[0].nodeValue; } catch(e) {}
	try { c3 = trows[n1].childNodes[3].childNodes[0].nodeValue;
		 c4 = trows[n1].childNodes[4].childNodes[0].nodeValue;
 c5 = trows[n1].childNodes[5].childNodes[0].nodeValue; } catch(e) {}
  agentname = trows[n1].childNodes[1].childNodes[0].nodeValue ;
  cmdt = " ";
  prcmd = trows[n1].childNodes[0].childNodes[0].nodeValue;
   if (prcmd.split("postmaster").length > 1 ) { continue; }
     if (prcmd.split("collation").length > 1 ) { cmdt = "TADDM Server"; 
 	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
     getlog7(); 
continue;  }
   prcmd = prcmd.split(" ")[0];
  if (prcmd.split("tip").length > 1 ) { cmdt = "TIP Server"; prcmd4 = prcmd; 
     	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
 
  	 if (agentname == oldagent4 ) {  } else { oldagent4 = agentname; 
  getlog4();   
  } 
  continue;
  }
  if (prcmd.split("impact").length > 1 ) { cmdt = "IMPACT Server";  prcmd3 = prcmd;  
  if (agentname == oldagent3 ) {  } else { oldagent3 = agentname; 
  getlog3();  }
    	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
    continue;  }
  if (prcmd.split("ognos").length > 1 ) { cmdt = "TCR/COGNOS Server"; continue;   } 
  if (prcmd.split("nonnative").length > 1 ) { cmdt = "EIF Probes Server";  prcmd1 = prcmd; 
    if (agentname == oldagent1 ) {  } else { oldagent1 = agentname; 
  getlog1(); 
  }
 	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
   continue;
  } 
  if (prcmd.split("objserv").length > 1 ) { cmdt = "Tivoli Server"; prcmd2 = prcmd; 
      if (agentname == oldagent2 ) {  } else { oldagent2 = agentname; 
  getlog2();  }
    	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + addCommas(c2) + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
 continue;  } 
    if (prcmd.split("KfwService").length > 1 ) { cmdt = "TEPS Server"; prcmd5 = prcmd; 
	 getlog5(); 
	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
  	 continue; } 
      if (prcmd.split("dsmain").length > 1 ) { cmdt = "TEMS Server"; prcmd6 = prcmd; 
	 getlog6(); 
	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
 continue; } 
  if (cmdt == " ") { continue; }
 } catch(e) {} 
  }
  hstr1 += "</table>";
  }
   } catch(e) { } 
    try {
	 sqlstr = "SELECT BINPATH, ORIGINNODE, VIRKBYTEPK, ELAPSEDTME ,HANDLECNT, THREADCNT  FROM KNT.WTPROCESS AT('" + temsname + "') WHERE SYSTEM.PARMA('NODELIST', '*ALL', 32) AND (STRSCAN (WTPROCESS.BINPATH, 'nco_') = 1 OR STRSCAN (WTPROCESS.BINPATH, 'tbsm') = 1 OR STRSCAN (WTPROCESS.BINPATH, 'fwservice') = 1  OR STRSCAN (WTPROCESS.BINPATH, 'fwService') = 1 OR STRSCAN (WTPROCESS.BINPATH, 'dsmain') = 1 OR STRSCAN (WTPROCESS.BINPATH, 'llation') = 1  OR STRSCAN (WTPROCESS.BINPATH, '/tip') = 1)";
   gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
  tprint();

  trows = xmle.getElementsByTagName('ROW');
   if (trows.length > 0) { 
    dpath = "";
  hstr1 += "<h4> Tivoli Server Processes found on WINDOWS System: </h4><table cellpadding='1' cellspacing='0'><tr><th>Process</th><th>Command</th><th>Memory</th><th>Elapsed Time</th><th>Handle Count</th><th>Thread Count</th></tr>";
  for (n1=0; n1 <trows.length; n1++) {
  try {
  dnlog++;
  	try {
	c2 = trows[n1].childNodes[2].childNodes[0].nodeValue; } catch(e) {}
	try { c3 = trows[n1].childNodes[3].childNodes[0].nodeValue;
		 c4 = trows[n1].childNodes[4].childNodes[0].nodeValue;
 c5 = trows[n1].childNodes[5].childNodes[0].nodeValue; } catch(e) {}
  agentname = trows[n1].childNodes[1].childNodes[0].nodeValue ;
  try {
  cmdt = " ";
  prcmd = trows[n1].childNodes[0].childNodes[0].nodeValue;

   if (prcmd.split("postmaster").length > 1 ) { continue; }
     if (prcmd.split("collation").length > 1 ) { cmdt = "TADDM Server"; 
 	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
     getlog7(); 
continue;  }
  prcmd = prcmd.split(" ")[0];
  if (prcmd.split("tip").length > 1 ) { cmdt = "TIP Server"; prcmd4 = prcmd; 
      	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
   	 if (agentname == oldagent4 ) {  } else { oldagent4 = agentname; 
  getlog4();   
  } 
  continue;
  }

  if (prcmd.split("impact").length > 1 ) { cmdt = "IMPACT Server";  prcmd3 = prcmd;  
  if (agentname == oldagent3 ) {  } else { oldagent3 = agentname; 
  getlog3();  }
    	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
    continue;  }
  if (prcmd.split("ognos").length > 1 ) { cmdt = "TCR/COGNOS Server"; continue;   } 
  if (prcmd.split("nonnative").length > 1 ) { cmdt = "EIF Probes Server";  prcmd1 = prcmd; 
    if (agentname == oldagent1 ) {  } else { oldagent1 = agentname; 
  getlog1(); 
  }
 	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
   continue;
  } 
  if (prcmd.split("objserv").length > 1 ) { cmdt = "Tivoli Server"; prcmd2 = prcmd; 
      if (agentname == oldagent2 ) {  } else { oldagent2 = agentname; 
  getlog2();  }
    	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
 continue;  } 
    if (prcmd.split("KfwService").length > 1 ) { cmdt = "TEPS Server"; prcmd5 = prcmd; 
	 getlog5(); 
	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
  	 continue; } 
      if (prcmd.split("dsmain").length > 1 ) { cmdt = "TEMS Server"; prcmd6 = prcmd; 
	 getlog6(); 
	   hstr1 += "<tr>  <td><a href='#divlog" + dnlog + "' >" + cmdt +  " on " + agentname + "</a></td><td> "  + prcmd + "</td><td> "  + c2 + "</td><td> "  + c3 + "</td><td> "  +  c4 + "</td><td> "  + c5 + "</td></tr>";
 continue; } 
  if (cmdt == " ") { continue; }
  } catch(e) {} 
    } catch(e) {}
  }

  hstr1 += "</table>";
  }

    } catch(e) {}
 }

filenamet = parent[0] + "Tivoli" + filetimen + ".htm";			//beh may be run = diag, an unused case ?
var filet = fs.OpenTextFile(path + filenamet , 2, true);
filet.WriteLine("<html><head><style>div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; background:#e8e8e8; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;nowrap:true; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; background:#fefefe;nowrap:true; } </style><script> function wload() {  }</script></head><body><h3>Tivoli Enterprise Platform: Daily Errors Report Version 06.01.51</h3><hr></hr><h4>"  + (new Date).toLocaleString() + "   </h4>");

filet.WriteLine (hstr1); 
filet.WriteLine (hstr2); 
filet.WriteLine (hstr3); 
filet.WriteLine ("</body></html>");
filet.Close();
traceLog("taudit.js::omtec() EXIT");
}  

function correctdist() {

htmlstr = "<h4>Following corrections were made:</h4>";
orphlist = orphanstr.split(";");
for (var x2 =0; x2 < orphlist.length; x2++) {
try {
if (!orphlist[x2]) { continue; }
htmlstr += "<b>" + (new Date).toLocaleString() + " Orphaned Distribution deleted for  " + orphlist[x2]  + " .</b><br/>";
 gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>DELETE FROM O4SRV.TOBJACCL WHERE OBJNAME = '"  +  orphlist[x2]  + "' </sql></CT_Get>";
  tprint();
  } catch(e) {}
}

	
raddista.sort();
 gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT SITNAME,NODE FROM O4SRV.ISITSTSH WHERE DELTASTAT = 'X' </sql></CT_Get>";
  tprint();
rows = xmle.getElementsByTagName('ROW');
rowno = rows.length;
errorstr = " ";
oldstr  = " ";
for(var n1 =0 ; n1 < rowno; n1++) {	
errorstr += rows[n1].childNodes[0].childNodes[0].nodeValue +  "; " +  rows[n1].childNodes[1].childNodes[0].nodeValue;
}
htmlstr += "<br/><h4>Error Situations</h4><b>" + errorstr  + "</b>";
  for  (var badno=0; badno < raddista.length; badno++) {
   if (oldstr == raddista[badno]) { continue; } else {
   oldstr = raddista[badno];
   }
   
  try {
  sitname =  raddista[badno].split(";")[0];
  temsname = raddista[badno].split(";")[1];
  if (errorstr.split(sitname).length > 1) { 
  htmlstr += "<br/><b>ERROR:  " + sitname + " on " + temsname + "</b>";
  continue; }
 sqlstr = "INSERT INTO O4SRV.TOBJACCL ( OBJNAME,OBJCLASS,NODEL,LSTUSRPRF,OPERATION,QIBCLASSID,LSTDATE) VALUES( '" + sitname + "', '5140' , '" +  temsname + "', 'SYSADMIN', 'R', '5625', ' ' )";
// htmlstr += "<br/>" + sqlstr;
 gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>" + sqlstr + "</sql></CT_Get>";
 tprint();
	htmlstr += "<br/><b style ='background-color:#aaffaa'>Started " + sitname + " on " + temsname + " </b>";
  
  } catch(e) {
	 htmlstr += "<br/><b style ='background-color:#ffaaaa'>Cannot start " + sitname + " on " + temsname + " possibly catalog error</b>";
	}
	
	}


 gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT OBJNAME, OBJCLASS, NODEL, HUB FROM O4SRV.TOBJACCL WHERE SYSTEM.PARMA('QIBNODE','QOMEGAVIEW',10) </sql></CT_Get>";
  tprint();
rows = xmle.getElementsByTagName('ROW');
rowno = rows.length;
  var objn = new Array;
  var objc = new Array;
  var objh = new Array;
  var obja = new Array;

  var nn = 0;
  try {
for(var n1 =0 ; n1 < rowno; n1++) {

// if (rows[n1].childNodes[0].childNodes[0].nodeValue.substring(0,9) == "UADVISOR_" ) { continue; } 
 if (rows[n1].childNodes[0].childNodes[0].nodeValue.substring(0,2) == "_Z" ) { continue; } 
   var include = "no";
  for  (var badno=0; badno < baddista.length; badno++) {
   if (baddista[badno].split(";")[0]==rows[n1].childNodes[0].childNodes[0].nodeValue) { 
   include = "yes"; 
   break; 
   }
    }
   // test here
 if (include == "yes") { 
 
    objn[nn] = rows[n1].childNodes[0].childNodes[0].nodeValue;
	objc[nn] = rows[n1].childNodes[1].childNodes[0].nodeValue;
	obja[nn] = rows[n1].childNodes[2].childNodes[0].nodeValue;
	objh[nn] = rows[n1].childNodes[3].childNodes[0].nodeValue; 
nn++;
}
}
} catch(e) { 
 }


if (objn.length > 0) {

}

for (var nn=0; nn<obja.length; nn++) { 
htmlstr += "<br/>" + (new Date).toLocaleString() + " Distribution needs correction  for  " + objn[nn]  + " on " + obja[nn];

gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[DELETE FROM  O4SRV.TOBJACCL WHERE OBJNAME = '" + objn[nn] + "' AND NODEL  = '" + obja[nn] + "' AND OBJCLASS = '" + objc[nn] + "' AND SYSTEM.PARMA('QIBUSER','SYSADMIN',10) AND SYSTEM.PARMA('QIBCLASSID','5635', 4)  ]]></sql> </CT_Get>";
tprint();
gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[INSERT INTO O4SRV.TOBJACCL (OBJNAME, NODEL, HUB, OBJCLASS, QIBCLASSID,LSTUSRPRF,LSTDATE) VALUES ('" + objn[nn] + "','" + obja[nn] + "','" + objh[nn] + "','" + objc[nn] + "','5625','SYSADMIN','')  ]]></sql> </CT_Get>";
tprint(); 
htmlstr += "<br/>" + (new Date).toLocaleString() + " Distribution corrected for  " + objn[nn]  + " on " + obja[nn];

}

}
//beh var sdastr = "";
function sdax() 
{
	traceLog("taudit.js::sdx() ENTRY");	
	var uptime = new Array; 
	var apps = new Array; 

	sdastr += "<br/><h4><font color=\"brown\">SDA Enablement/Application Versions Comparisons</font></h4><FIELDSET style='top:0;width:480; margin-left:0'><LEGEND style='font-size:11px;'>Applications by Management Servers <i>LEGEND</i></LEGEND><span style='font-size:11px;'><v:line strokeweight='8px'  strokecolor='#FFF380' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Additional Applications <b>|</b> <v:line strokeweight='8px'  strokecolor='#B0E2FF' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Missing Applications <b>|</b> <v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Application Version Mismatch</span></FIELDSET><table cellpadding='0' cellspacing='0'><tr>";
	gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql>SELECT PRODUCT, PRODVER, ID,  SEEDSTATE, STATE , STATUS,CONFIG FROM O4SRV.TAPPLPROPS ORDER BY GRPID, PRODUCT, PRODVER</sql> </CT_Get>";
	tprint();
 	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;

	for(n1 =0 ; n1 < rowno; n1++) {
		try {
			apps[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue + ";"
		} catch(e) {} 
			
		try {
			apps[n1] += rows[n1].childNodes[1].childNodes[0].nodeValue + ";" 
		} catch(e) {} 
			
		try {
			apps[n1] +=  rows[n1].childNodes[2].childNodes[0].nodeValue+ ";"
		} catch(e) {} 
			
		try {
			apps[n1] +=  rows[n1].childNodes[3].childNodes[0].nodeValue+ ";"
		} catch(e) {} 
			
		try {
			apps[n1] +=  rows[n1].childNodes[4].childNodes[0].nodeValue+ ";"
		} catch(e) {} 
      		
      		try {
			apps[n1] +=  rows[n1].childNodes[5].childNodes[0].nodeValue+ ";";
		} catch(e) {} 
        	
        	try {
			apps[n1] +=  rows[n1].childNodes[6].childNodes[0].nodeValue+ ";"
		} catch(e) {} 
		
		try {
			apps[n1] +=  rows[n1].childNodes[7].childNodes[0].nodeValue+ ";"
		} catch(e) {} 
	}
	
	apps.sort();

	for ( sno=0;  sno<temno.length; sno++) {
		if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) 
			{ continue; }

		resptime = parseInt((new Date).getTime());
		rapps = new Array;	
		oldappno = 0;
		sdastr1 = "";
		gpayload = " <CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT PRODUCT, PRODVER, ID,  SEEDSTATE, STATE , STATUS,CONFIG FROM O4SRV.TAPPLPROPS AT(" + "'" + temno[sno] + "'" + ") ORDER BY GRPID, PRODUCT,  PRODVER]]></sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
	   	rappno = 0;   
		
		// PRODUCT, PRODVER, ID,  SEEDSTATE, STATE , STATUS,CONFIG from each TEMS			
		for(n1 =0 ; n1 < rowno; n1++) {
			try {
				rapps[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue + ";"		// PRODUCT
			}
			catch(e)
				{rapps[n1] = ";";} 
				
			try {
				rapps[n1] += rows[n1].childNodes[1].childNodes[0].nodeValue + ";" 		// PRODVER 
			}
			catch(e)
				{rapps[n1] += ";";} 
			
			try {
				rapps[n1] +=  rows[n1].childNodes[2].childNodes[0].nodeValue+ ";"		// ID
			}
			catch(e)
				{rapps[n1] += ";";} 
			
			try {
				rapps[n1] +=  rows[n1].childNodes[3].childNodes[0].nodeValue+ ";"		// SEEDSTATE
			}
			catch(e)
				{rapps[n1] += ";";} 

			try {
				rapps[n1] +=  rows[n1].childNodes[4].childNodes[0].nodeValue+ ";"		// STATE
			}
			catch(e)
				{rapps[n1] += ";";} 

			try {
				rapps[n1] +=  rows[n1].childNodes[5].childNodes[0].nodeValue+ ";";		// STATUS
			}
			catch(e)
				{rapps[n1] += ";";} 
			
			try {
				rapps[n1] +=  rows[n1].childNodes[6].childNodes[0].nodeValue+ ";"		// CONFIG
			}
			catch(e)
				{rapps[n1] += ";";} 
			
			try {
				rapps[n1] +=  rows[n1].childNodes[7].childNodes[0].nodeValue+ ";"		// there is no childNodes[7]  !!
			}
			catch(e)
				{} 
		} 
	
		rapps.sort();
		sdastr += "<td valign='top' style='border:1 solid black'><table cellspacing='0' ><tr><th>TEMS is <font color=\"blue\">" +temno[sno] + "</font> <font color=\"#424262\">v</font>" + temversion[sno] + "</th></tr>";
		sdastr += "<tr><td>" + addCommas(rapps.length) + " Applications</td></tr>";
		sdastr += "</table><table cellspacing='0' cellpadding='3' style='border:1 solid black'><tr><td style='font:bold;background-color:#e1e1e1;border:1 solid " + BLACK + "'>Prod Code</td>";
		sdastr += "<td style='font:bold;text-align:center;background-color:#e1e1e1;border:1 solid " + BLACK + "'>Version</td>";
		sdastr += "<td style='font:bold;text-align:center;background-color:#e1e1e1;border:1 solid " + BLACK + "'>App ID</td>";
		sdastr += "<td style='font:bold;width:55;text-align:center;background-color:#e1e1e1;border:1 solid " + BLACK + "'>Status</td></tr>";			
		
		for (happno= 0; happno < apps.length; happno++) { 
			for (rappno = oldappno ; rappno< rapps.length; rappno++) {  
	
       				rappsAttrs = rapps[rappno].split(";");
				prodVer = rappsAttrs[1].slice(0,2) + "." + rappsAttrs[1].slice(2,4) + "." + rappsAttrs[1].slice(4,6) + "." + rappsAttrs[1].slice(6);       	
			
				if (prodVer == "...")
					prodVer = "  ";			
    			//	traceLog("rapps[" + rappno + "]  <" + rapps[rappno] + ">");		
    					    
				if (apps[happno].split(";")[0] == rapps[rappno].split(";")[0] ) { 
					if ((apps[happno].split(";")[1] == rapps[rappno].split(";")[1])||(temno[sno] == hubname)) {
						backcol = LIGHT_GREEN;
					 }
					 else {
				               backcol = LIGHT_RED;
	             			} 

					sdastr1 += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + ";border:1 solid " + BLACK + ";text-align:center'>" + rappsAttrs[0] +  "</td>";
					sdastr1 +=  "<td style='background-color:" + backcol + ";border:1 solid " + BLACK + "'>" +   prodVer +  "</td>";
					sdastr1 += "<td style='background-color:" + backcol + ";border:1 solid " + BLACK + ";text-align:center'>" +  rappsAttrs[2] +  "</td>";
					sdastr1 += "<td style='width:55;background-color:" + backcol + ";border:1 solid " + BLACK + ";text-align:right'>" +  rappsAttrs[5] +  "</td></tr>";				 
			    		oldappno = rappno + 1;
					break;	 
	           		}
				else { 
		           		if ( apps[happno].split(";")[0] > rapps[rappno].split(";")[0] ) {
						backcol = LIGHT_YELLOW;		// "yellow";
						sdastr1 += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + ";border:1 solid " + BLACK + ";text-align:center'>" + rappsAttrs[0] +  "</td>";
						sdastr1 +=  "<td style='background-color:" + backcol + ";border:1 solid " + BLACK + "'>" +   prodVer +  "</td>";
						sdastr1 += "<td style='background-color:" + backcol + ";border:1 solid " + BLACK + ";text-align:center'>" +  rappsAttrs[2] +  "</td>";
						sdastr1 += "<td style='width:55;background-color:" + backcol + ";border:1 solid " + BLACK + ";text-align:right'>" +  rappsAttrs[5] +  "</td></tr>";

		 		               oldappno = rappno + 1;
					}
					else {
						backcol = SKY_BLUE; 		// LAVENDER = "#aaaaff";
						sdastr1 += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + apps[happno] + "</td><td>Missing</td></tr>"; 
		                     		break;
					}
				}
			}
	
		}
	
		sdastr1 = sdastr1.replace(/SDA/g, "<b>SDA</b>");   
		sdastr += sdastr1;   
		sdastr += "</table></td>";
	}

	sdastr += "</table></tr></table>";		
	traceLog("taudit.js::sdx() EXIT");	
}


function catalogx() 
{
	traceLog("taudit.js::catalogx() ENTRY");	
	var uptime = new Array; 
 	var appRowCtr;

	for ( sno=0;  sno<temno.length; sno++) {
		if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) 
			{ continue; }

		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT UPTIME FROM KQM.CMSUPTIME AT(" + "'" + temno[sno] + "'" + ")</sql> </CT_Get>";

		try {
			tprint();
			rows = xmle.getElementsByTagName('ROW');
			uptime[sno] = rows[0].childNodes[0].childNodes[0].nodeValue
			uptime[sno] = parseInt(uptime[sno]/36)/100; 
			
			if (uptime[sno] > 15) {				// beh: TODO Why is this here ?  It looks incomplete and abandoned.
				//  emstatus[sno] = "N"; 
			}
		}
		catch(e) 
			{} 
	}
	catstr = "";

	if (errorson != 1) { 		// if  NOT running Errors Only report ...			
		titleStr ="<h4><center><font color=\"magenta\">TEMS Servers Analysis . . .</font></center></h4>"; 
		dijit.byId("titlepane").setContent(titleStr); 
		savearray[savearray.length] = titleStr;	
		sdax();	
//		catstr = sdastr;  //beh test
	}
	
	catstr = sdastr + "<br/><h4><font color=\"brown\">Catalog Comparisons</font>  HUB TEMS <font color=\"blue\">" + hubname + "</font> vs each Remote TEMS</h4>";
//test 	catstr +=  "<h4><font color=\"brown\">Catalog Comparisons</font>  HUB TEMS <font color=\"blue\">" + hubname + "</font> vs each Remote TEMS</h4>"; //beh test
	catstr += "<FIELDSET style='top:0;width:700; margin-left:0'><LEGEND style='font-size:11px;'>RTEMS Application <i>LEGEND</i></LEGEND><span  style='font-size:11px;'>";
	catstr += "<v:line strokeweight='8px'  strokecolor='yellow' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>RTEMS Additional Application ";
	catstr += " <b>|</b> <v:line strokeweight='8px'  strokecolor='#B0E2FF' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>RTEMS Missing Application ";
	catstr += " <b>|</b> <v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Application Update Mismatch ";
	catstr += " <b>|</b> <v:line strokeweight='8px'  strokecolor='" + LIGHT_GREEN + "' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>RTEMS Application Matches </span></FIELDSET><table><tr>";
	
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT COUNT(COLM_NAME),APPL_NAME FROM SYSTEM.SYSCOLUMNS ORDER BY APPL_NAME]]></sql> </CT_Get>";
		tprint();
		sno =0;
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
		
		for(n1 =0 ; n1 < rowno; n1++) {
			apps[n1] = rows[n1].childNodes[1].childNodes[0].nodeValue + ";" +  rows[n1].childNodes[0].childNodes[0].nodeValue + ";";
		} 
	}
	catch(e) { 
		caterr = "yes" ; 
	}
	
	gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql>SELECT APPL_NAME,TIMESTAMP FROM SYSTEM.SYSAPPLS ORDER BY APPL_NAME</sql> </CT_Get>";
	tprint();
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;

	for(n1 =0 ; n1 < rowno; n1++) {
		if (caterr == "yes") { 
			apps[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue + ";1;";
		}
		apps[n1] += rows[n1].childNodes[0].childNodes[0].nodeValue + ";" + rows[n1].childNodes[1].childNodes[0].nodeValue ;
	}
	apps.sort();  

	for ( sno=0;  sno<temno.length; sno++) {		// For each ONLINE RTEMS, produce Cat Comparsion table

		if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) 
			{ continue; }

		appRowCtr = 0;
		resptime = parseInt((new Date).getTime());
		rapps = new Array;
		
		try {
			gpayload = " <CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT COUNT(COLM_NAME),APPL_NAME FROM SYSTEM.SYSCOLUMNS AT(" + "'" + temno[sno] + "'" + ") ORDER BY APPL_NAME]]></sql> </CT_Get>";
			tprint();
			rows = xmle.getElementsByTagName('ROW');
			rowno = rows.length;
			rappno = 0;   
	
			for(n1 =0 ; n1 < rowno; n1++) {
				rapps[n1] = rows[n1].childNodes[1].childNodes[0].nodeValue + ";" +  rows[n1].childNodes[0].childNodes[0].nodeValue + ";";
			} 
		}
		catch(e) { 
			caterr = "yes"; 
		}

		try {
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql>SELECT APPL_NAME,TIMESTAMP FROM SYSTEM.SYSAPPLS AT(" + "'" + temno[sno] + "'" + ") ORDER BY APPL_NAME</sql> </CT_Get>";
			tprint();
			presptime = (parseInt((new Date).getTime())- resptime) /1000;
			rows = xmle.getElementsByTagName('ROW');
			rowno = rows.length;

			if (rowno > 3) {  
				
				if ( temno[sno] != hubname )
					temsType = "Remote";
				else
					temsType = "HUB";
					
				catstr += "<td valign='top' style='border:1 solid black'><table  cellspacing='1'><tr><th>" + temsType + " <font color=\"blue\">" + temno[sno] + "</font></th><th>Resp time: " + presptime + " secs</th></tr>";

				var missing = 0;
				oldappl = "";
				oldappno = 0;
				catstr2 = "";
				backcol = LIGHT_YELLOW;
				catstr += "<tr style='background-color:" + LIGHT_YELLOW + "'><td style='text-align:right;font-color:brown'><b>Number of Apps </b></td><td><b> = " + rows.length + "</b><td></tr>"; 
				rappno = 0;   
     	
				for(n1 =0 ; n1 < rowno; n1++) {
					if (caterr == "yes") { 
						rapps[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue + ";1;";
					}		
					rapps[n1] += rows[n1].childNodes[0].childNodes[0].nodeValue + ";" +  rows[n1].childNodes[1].childNodes[0].nodeValue ;
				} 
			}

			rapps.sort();

			for (happno= 0; happno < apps.length; happno++) { 
				for (rappno = oldappno ; rappno< rapps.length; rappno++) {  
		    			if ( appRowCtr%25 == 0)	
		    				catstr += "<tr style='background-color:#eeeeee; height:4;font:bold;font-size:7px'><td>AppID [<i># of Cols</i>]</td><td style='text-align:center'>Last Update on</td></tr>";

					if (apps[happno].split(";")[0] == rapps[rappno].split(";")[0] ) { 
						if ((apps[happno].split(";")[1] == rapps[rappno].split(";")[1])||(temno[sno] == hubname)||(rapps[rappno].split(";")[1] == "1")) {
							if ((apps[happno].split(";")[3] == rapps[rappno].split(";")[3])||(temno[sno] == hubname)) {
								backcol = LIGHT_GREEN;
								
								if ( temno[sno] == hubname )
									backcol = LIGHT_BROWN;
								
								catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +  "] </td><td style='text-align:center;'>" + formatDate(rapps[rappno].split(";")[3]) + "</td></tr>"; 									
							}
							else {
								backcol = LIGHT_RED;
								catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +  "] ";
								catstr += "<samp style='font-size:9px;text-align:right;'>HUB " + formatDate(apps[happno].split(";")[3]) + "</samp></td><td style='text-align:center;'>" + formatDate(rapps[rappno].split(";")[3]) + "</td></tr>"; 
							}
						}
						else {
							backcol = LIGHT_RED;
							catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>" + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +  "] ";
							catstr += "<samp style='font-size:9px;text-align:right;''> HUB has " +  apps[happno].split(";")[1] + " Cols</samp></td><td style=\"text-align:center;\">" + formatDate(rapps[rappno].split(";")[3]) + "</td></tr>"; 
						} 

						appRowCtr++;
						oldappno = rappno + 1;
						break;	 
					}
					else { 
						if ( apps[happno].split(";")[0] > rapps[rappno].split(";")[0] ) {
							backcol = "yellow";						
							catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +   "]   ";
							catstr += "<samp style='font-size:9px;''>   App not on HUB</samp></td><td style='text-align:center;'>" + formatDate(rapps[rappno].split(";")[3]) + "</td></tr>"; 
				 			appRowCtr++;    	
				 			oldappno = rappno + 1;
						}
						else {
							backcol = SKY_BLUE; 
							catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + apps[happno].split(";")[0] + "</td><td>Missing on this RTEMS</td></tr>"; 
							appRowCtr++;    
							break;
						}
					}
				}
			}
			catstr += "</table></td>";
		} 
		catch(e) { 
			caterr = "yes";
			rowno = 1;
		} 
	}

	catstr += "</tr></table>";
	traceLog("taudit.js::catalogx() EXIT");	
}

function warehousehist(vobj) 
{
	traceLog("taudit.js::warehousehist() ENTRY");		

	try {
		objstr = vobj;
	
		if (objstr.split("_LT_").length > 1) { 
			traceLog("taudit.js::warehousehist() EXIT");
			return;
		}
					
		if (objstr.split("Disk").length > 1) { 
			traceLog("taudit.js::warehousehist() EXIT");
			return;
		}

		if (objstr.split("Status").length > 1) {
			traceLog("taudit.js::warehousehist() EXIT");
			return;
		}

		if (objstr.split("KSY_").length > 1) { 
			traceLog("taudit.js::warehousehist() EXIT");
			return;
		}	
	
		try { 
			oRs.Close();
		}
		catch(e) {}
		
		try { 
			oConn.Close();
		}
		catch(e) {}
		
		sqlstr = 'SELECT * FROM "' + schema + '"."' + kvout2[nn] + '" WHERE "WRITETIME" = (SELECT MIN("WRITETIME") FROM "' + schema + '"."' + vobj + '")'; 
		oConn.CommandTimeout = 200;
		oConn.Open(wserver, wu, wp);
		oRs=oConn.Execute(sqlstr);
		
		for (nx=0; nx <10 ; nx++) { 
			xorigin = oRs(nx).Name;
			xval = "" + oRs(nx);
			
			if (parseInt(xval)) 
				{ continue; }

			if (xval.length > 3) 
				{ break; } 	
			
			if ((xorigin == "TMZDIFF")||(xorigin=="WRITETIME")) 
				{ continue; }
	
			if (xorigin.split("Node").length > 1 ) 
				{break;} 
			
			if (xorigin.split("ame").length > 1 ) 
				{break;}
				 
			if (xorigin=="Global_Timestamp") 
				{break; }
			
			if ((xorigin=="Originnode")||(xorigin=="ORIGINNODE")) 
				{ break; }
		}
	 
		if (nx==10) {
			traceLog("taudit.js::warehousehist() EXIT");
			return;
		}
		
		if ((xorigin=="Global_Timestamp")||(xorigin=="Atomize")) { 
			traceLog("taudit.js::warehousehist() EXIT");
			return;
		}	 
		
		try { 
			oRs.Close();
		}
		catch(e) {}
		
		try { 
			oConn.Close();
		}
		catch(e) {}

		sqlstr = 'SELECT "' + xorigin + '",MAX("WRITETIME") FROM "' + schema + '"."' + vobj + '" GROUP BY "' + xorigin + '"';
	
		//	histdiscrepancy += "<tr><th>" + objstr + "</th></tr>";
		warehouseu(sqlstr,objstr);
	}
	catch(e) {
		histdiscrepancy += "<tr><th>" + objstr + "</th><td>" + sqlstr + "</td><td style='background-color:ffaaaa'>" + e.message + "</td></tr>";
	}

	traceLog("taudit.js::warehousehist() EXIT");	
}

function errorsonly() 
{
	traceLog("taudit.js::errorsonly() ENTRY");
	errorson = 1;
	emno = new Array;
	madno = 0;
	badno = 0;
	baddist = new Array;
	maddist = new Array;
	getibmtime(25);
	var vsql =  'SELECT  OBJECT, SUM(ROWSREAD) AS "Number_Rows"  FROM "' + schema + '"."WAREHOUSEAGGREGLOG"  GROUP BY OBJECT';
	egbltime = parseInt(gbltime) - 1;
	vsql = vsql.replace(/000000/g, egbltime);
	ebltime =  "" + filetime + "00000";
	kvout2 = new Array;

	try {
		oConn.CommandTimeout = 100;
		oConn.Open(wserver, wu, wp); 
	}
	catch(e) {
  		histdiscrepancy = "<b>" + e.message + "</b>"; 
	}

	try {
		oRs=oConn.Execute(vsql);
		var rowsa = 0;
		
		while (!oRs.eof) { 
			if (oRs(1) > 0) {
				objstr = "" + oRs(0) + oRs(1);
				objstr = objstr.replace(/ /g,"");
				kvout2[rowsa] = objstr;
			}
			oRs.MoveNext() ;
			rowsa++;
		}
	}
	catch(e) {} 

	try { oRs.Close();} catch(e) {}
	
	try { oConn.Close();} catch(e) {}
	
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + '</password><table>KSY.KSYTABLE</table><sql>SELECT  ATTRIBNAME, SUMMARIZED,SUMMFAIL,  PRUNED, PRUNEFAIL,UPDATED, CREATED,  FAILURES, STARTTIME, ENDTIME, RUNLENGTH  FROM KSY.KSYTABLE WHERE SYSTEM.PARMA("NODELIST","*ALL",32) AND SUMMARIZED > 1 ORDER BY ATTRIBNAME</sql> </CT_Get>';
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
	
		for (n1 = 0; n1 < rowno ; n1++) {
			kvout2[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue;;
		}
	}
	catch(e) {} 

	try {
		histdiscrepancy = "<br/><h4><font color=\"brown\">History Collections Stopped</font></h4><table cellpadding='0' cellspacing='0' style='border:solid 1 black;'><th style='width:150'>System</th><th  style='width:150'>Object</th><th  style='width:150'>Time Stopped</th>";	

		for (nn=1; nn< kvout2.length; nn++) {
			if (!kvout2[nn]) 
				{ continue; }
			
			var objv = kvout2[nn];
			warehousehist(objv);
		} 
		histdiscrepancy +=	"</table>";
	}
	catch(e) {
		histdiscrepancy = " ";
	}
	
	gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODE,O4ONLINE,VERSION  FROM O4SRV.INODESTS WHERE PRODUCT = 'EM' ORDER BY NODE]]></sql> </CT_Get>";
	tprint();
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;
	sno =0;
	htmlstr1 = "";
	
	 for(var n1 =0 ; n1 < rowno; n1++) {
	 	temno[sno] = rows[n1].childNodes[0].childNodes[0].nodeValue;
		temstatus[sno] = rows[n1].childNodes[1].childNodes[0].nodeValue;
		temversion[sno] = rows[n1].childNodes[2].childNodes[0].nodeValue;
		
		if ((temstatus[sno] == "N")||(temstatus[sno] == "*OFFLINE")) { 
			htmlstr1 += "<tr  style='background-color:#ffaaaa'><td>" + temno[sno] + "</td><td><font color=\"#424262\">v</font>" + temversion[sno] + "</td></tr>" ;
		}
		sno++;
	}
	
	if (htmlstr1) { 
		htmlstr1 = "<h4>These TEMS are <font color=\"red\">Offline</font></h4><table><tr><th>TEMS Name</th><th>Version</th></tr>" + htmlstr1 + "</table>";
	}
	sdax();
	catalogx();
//orig	sitstr = sdastr;
//orig	sitstr += "<h4><font color=\"brown\">Situation Error Statistics for each TEMS</font></h4><table><tr>";
	sitstr = "<h4><font color=\"brown\">Situation Error Statistics for each TEMS</font></h4><table><tr>";

	for ( sno=0;  sno<temno.length; sno++) {
		sitstr1 = "";
		
		if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N"))
			{ continue; }	
		
		try {
			resptime = parseInt((new Date).getTime());
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT COUNT(ORIGINNODE),SITNAME,DELTASTAT FROM O4SRV.TSITSTSC AT(" + '"' + temno[sno] + '"' + ") GROUP BY SITNAME,DELTASTAT </sql> </CT_Get>";
			tprint();
			resptime = (parseInt((new Date).getTime())- resptime) /1000;
			var errorcnt = 0;
			var raisedcnt = 0;

			if (resptime > 10) { 
				bcol = LIGHT_RED; 
			}
			else { 
				bcol =LIGHT_GREEN; 
			}
			
			sitstr += "<td valign='top' style='border:1 solid black;'><table  cellspacing='0'><tr><th><font color=\"blue\">" + temno[sno] + " </font><font color=\"#424262\">v</font>" + temversion[sno] + "</font></th><th  style='background-color:" + bcol + "'> Resp time: " + resptime + " secs</th></tr>";
			rows = xmle.getElementsByTagName('ROW');
			rowno = rows.length;
			
			for(n1 =0 ; n1 < rowno; n1++) {
				var bcol = LIGHT_GREEN;
				
				if (rows[n1].childNodes[2].childNodes[0].nodeValue == "X") { 
					bcol = LIGHT_RED; 
					errorcnt++; 
					sitstr1 += "<tr  style='background-color:#ffaaaa'><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td></tr>"; 
				}
			} 

			if (errorcnt > 0) { 
				bcol =LIGHT_RED; 	// light red since there are indeed some Sits in 'error' state
			}
			else { 
				bcol = LIGHT_GREEN;		// light green; there are no Sit w/ 'error' state
			}

			sitstr +=  "<tr style='background-color:" + bcol +"'><th style='text-align:right'>Error Situations: </th><td style='text-align:right'>" + addCommas(errorcnt) + " </td></tr>" + sitstr1 ;
			sitstr +=  "</table></td>"; 
		}
		catch(e) {}
	}

	sitstr += "</tr></table>";
	distribute();
	hstr1 = "";
	duplicates();
	errorson = 0;
	//orig	botstr2 = htmlstr1 + catstr + sitstr + misdist + histdiscrepancy + hstr1;
	botstr2 = htmlstr1 + sitstr + hstr1 + histdiscrepancy + misdist +catstr ;
	traceLog("taudit.js::errorsonly() EXIT");	  
}

//beh var hstr1 = "";
function duplicates() 
{
	traceLog("taudit.js::duplicates() ENTRY");		
	var dupl = new Array;
	var duplCnt = 0;
	var uncontactCnt = 0;	
	hubliststr = ";" ;
	gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODELIST,NODE  FROM O4SRV.TNODELST WHERE NODETYPE = 'V']]></sql> </CT_Get>";
	tprint();
	rows = xmle.getElementsByTagName('ROW'); 
	rowno = rows.length;

	for(var n1 =0 ; n1 < rowno; n1++) {
		hubliststr +=  rows[n1].childNodes[0].childNodes[0].nodeValue + ";;" + rows[n1].childNodes[1].childNodes[0].nodeValue + ";"; 
	}	 

	hstr21 = "<h4><font color=\"brown\">Nodelist Compares</font> for HUB TEMS on hostname <font color=\"blue\">" + hserver + "</font> on " + (new Date).toLocaleString() + "</h4><table><tr>";
  
	for (n2 = 0; n2 < temno.length; n2++) {
		if ((temstatus[n2] == "*OFFLINE")||(temstatus[n2] == "N")) 
			{ continue; }

		if ( temno[n2] != hubname)
			temsType = "Remote";
		else
			temsType = "HUB";		
	
		hstr21 += "<td valign='top'><h4>" + temsType + " TEMS: <font color=\"blue\">" + temno[n2] + "</font></h4><table cellpadding='0' cellspacing='0' style='border:1 solid black'><tr><th>Node</th><th>Here</th><th>Thrunode</th></tr>";
		var remlist = new Array;
		gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODELIST,NODE  FROM O4SRV.TNODELST AT('" + temno[n2] + "') WHERE NODETYPE = 'V']]></sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW'); 
		rowno = rows.length;
		
		for(var n1 =0 ; n1 < rowno; n1++) {
			remlist[n1] =  rows[n1].childNodes[0].childNodes[0].nodeValue + ";" + rows[n1].childNodes[1].childNodes[0].nodeValue; 
		}	 
		
		remonlinestr = "";
		gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODE,O4ONLINE,EXPIRYTIME,THRUNODE  FROM O4SRV.INODESTS AT('" + temno[n2] + "') WHERE THRUNODE = '" + temno[n2] + "' AND EXPIRYTIME < '9' AND O4ONLINE = 'Y']]></sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW'); 
		rowno = rows.length;
		
		for(var n1 =0 ; n1 < rowno; n1++) {
			remonlinestr +=  rows[n1].childNodes[0].childNodes[0].nodeValue + ";;" + rows[n1].childNodes[0].childNodes[0].nodeValue +";"; 
		}

		for (n4=0; n4 < remlist.length ;n4++) {
			try {
				xstr = ";" + remlist[n4].split(";")[0] + ";;";
				ystr = hubliststr.split(xstr)[1];
				dstr = remlist[n4].split(";")[1];
			
				if ( remonlinestr.split(xstr).length > 1) { 
					fstr = "Y"; 
				}
				else { 
					fstr = "N"; 
				}
 				
 				if ((ystr.split(";")[0] == dstr ) ||(hubname == temno[n2]) ) {
					if (( fstr == "Y") && (dstr != temno[n2])) {
						hstr21 += "<tr><td style='background-color:#ffaaaa'> " + remlist[n4].split(";")[0] + "</td><td>" + fstr + "</td><td>" + dstr + ";;" + ystr.split(";")[0] + ";;" + temno[n2] + "</td></tr>";  
						fixa[fixa.length] = remlist[n4].split(";")[0] + ";" + temno[n2] ;
					}
					else {
						if (fstr == "Y") {
							// hstr21 += "<tr><td style='background-color:#aaffaa'> " + remlist[n4].split(";")[0] + "</td><td>" + fstr + "</td><td>" + dstr + "</td></tr>"; 
 						}
					}
				}
				else { 
					hstr21 += "<tr><td style='background-color:#ffaaaa'> " + remlist[n4].split(";")[0] + "</td><td>" + fstr + "</td><td>" + dstr + ";;" + ystr.split(";")[0] +  "</td></tr>";  
				
					if (( fstr == "Y") && (ystr.split(";")[0] == temno[n2])) {
						try {
							gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[INSERT INTO O4SRV.TNODELST AT('" + temno[n2] + "') (AFFINITIES,  LSTDATE, LSTUSRPRF, NODELIST, NODE, NODETYPE ) VALUES (' ',' ','SYSADMIN', '" +  remlist[n4].split(";")[0] + "','" + ystr.split(";")[0] + "','V' ) ]]></sql> </CT_Get>";
							//tprint();
							// hstr21 += "<tr><td style='background-color:#aaffaa'>Corrected: " + remlist[n4].split(";")[0] + "</td><td>" + temno[n2] + "</td><td>" + ystr.split(";")[0] +   "</td></tr>";  
						}
						catch(e) {}
					}
				} 
			}
			catch(e) {} 
		}
		hstr21 +=   "</table></td>";
	}
	hstr21 += "</tr></table><table>";
	
	try {
		for (n5=0; n5< fixa.length; n5++) {
			gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[INSERT INTO O4SRV.TNODELST (AFFINITIES,  LSTDATE, LSTUSRPRF, NODELIST, NODE, NODETYPE ) VALUES (' ',' ','SYSADMIN', '" +  fixa[n5].split(";")[0]  + "','" + fixa[n5].split(";")[1] + "','V' ) ]]></sql> </CT_Get>";
			tprint();
			hstr21 += "<tr><td style='background-color:#aaffaa'>*Corrected: " + xmle.xml + fixa[n5].split(";")[0] + "</td><td>" + fixa[n5].split(";")[1]  + "</td></tr>";  
		}
	}
	catch(e) {}

	hstr21 += "</table>";
	mrinit();

	var addra = ",,"; 
	hstr1 = hstr21 + "<h4><font color=\"brown\">Recent Node Switches</font></h4>";
	sqlstr = "SELECT OBJNAME,GBLTMSTMP,OPERATION  FROM O4SRV.TEIBLOGT WHERE OPERATION ='I' AND TABLENAME = '5529' AND GBLTMSTMP > '" + gbltime.substring(0,8) + "'  ORDER BY OBJNAME";
	gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql></CT_Get>";
	tprint();
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;
	    
	for(n1 =0 ; n1 < rowno; n1++) {
		hstr1 += "<b style='background-color:#ffccaa'>" + formatDate(rows[n1].childNodes[1].childNodes[0].nodeValue) + "  : " + rows[n1].childNodes[0].childNodes[0].nodeValue + " </b></br>";
	}
	
	if ( rowno == 0 )
	{
		 hstr1+= "<b>There are no recent node switches.</b><br/><br/>";
	}
		
	hstr1 += "<h4><font color=\"brown\">Duplicate Agents</font></h4>" ;
	hstr2 = "<br/><h4><font color=\"brown\">Uncontactable Agents</font> (not responding within 60 secs)</h4>"; 
	
	for ( sno=0;  sno<temno.length; sno++) {
		var uncont = new Array;
		var unconta = new Array;
		uncontactCnt = 0;		
		
		if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) 
			{ continue; }
		
		try {
			contacted = ";";
			sqlstr = 'SELECT ORIGINNODE,SYSTIME FROM O4SRV.LOCALTIME AT("' + temno[sno] + '"' + ") WHERE  SYSTEM.PARMA('NODELIST','*ALL',4) ";
			gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql></CT_Get>";
			tprint();
			rows = xmle.getElementsByTagName('ROW');
			rowno = rows.length;
			hstr1 += "<b>" + rowno + " Agents responded on <font color=\"blue\">" + temno[sno]  + "</font></b></br>";  	
			
			for(n1 =0 ; n1 < rowno; n1++) {
			//	traceLog("TEMS name <" + temno[sno] + ">\tORIGINNODE <" +  rows[n1].childNodes[0].childNodes[0].nodeValue  + ">\tSYSTIME <" + 
			//										rows[n1].childNodes[1].childNodes[0].nodeValue + ">");
				xstr = rows[n1].childNodes[0].childNodes[0].nodeValue + ";" + temno[sno];
				contacted +=  rows[n1].childNodes[0].childNodes[0].nodeValue + ";";
				dupl.push(xstr);
			}
		}
		catch(e) {}
		
		try {
			sqlstr = "SELECT NODE, HOSTADDR FROM O4SRV.INODESTS AT('" + temno[sno]  + "')  WHERE  THRUNODE = '" + temno[sno]  + "'  AND O4ONLINE = 'Y' AND PRODUCT <> 'EM'";
			gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
			tprint(); 
			rexq = new RegExp("UX|UL|NT|LZ|R2|VM|PX");  
			rows = xmle.getElementsByTagName('ROW');
			rowno = rows.length;
			hstr2 += "<b>" + rowno + " Agents online on <font color=\"blue\">" + temno[sno]  + "</font></b>";  // </br>";  	
			
			for(n1 =0 ; n1 < rowno; n1++) {
				comp = rexq.exec(rows[n1].childNodes[0].childNodes[0].nodeValue);
		
				if (!comp) 
					{ continue; }

				xstr = ";" + rows[n1].childNodes[0].childNodes[0].nodeValue + ";";
				
				try {
					addra += xstr + temno[sno] + ";" + rows[n1].childNodes[1].childNodes[0].nodeValue + ";";  
				} 
				catch(e) {}
 
				if (contacted.split(xstr).length == 1) {
					uncont.push(rows[n1].childNodes[0].childNodes[0].nodeValue);

					try { 
						unconta.push(rows[n1].childNodes[1].childNodes[0].nodeValue); 
					}
					catch(e) { 
						unconta.push("FREE");
					}
				}
				else {
				}
			}
			
//			httpTimeout = 60;	// 0.060 seconds to force timeout case for test purposes
			httpTimeout = 60000;	// 60 seconds

			for (n2=0; n2 < uncont.length; n2++) { 

				try {
					rowno = 0;
					sqlstr = 'SELECT ORIGINNODE,SYSTIME FROM O4SRV.LOCALTIME AT("' + temno[sno] + '"' + ") WHERE  SYSTEM.PARMA('NODELIST','" + uncont[n2] +  "',4) ";
					gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[" + sqlstr + "]]></sql> </CT_Get>";
					tprint();
					
					if ( httpTimeout_flag == true )
					{
						hstr2 += "</br><b style='background-color:" + LIGHT_RED + "'>" + uncont[n2] + " on <font color=\"blue\">" + temno[sno] + "</font> " + unconta[n2] + "</b> timed out"; 
						uncontactCnt++;
						continue;
					}
										
					rows = xmle.getElementsByTagName('ROW');
					rowno = rows.length;
					
					if (rowno == 1) { 
						continue; 
					} 
					
					hstr2 += "</br><b style='background-color:#ffaaaa'>" + uncont[n2] + " on " + temno[sno] + " " + unconta[n2] + ".</b>"; 
  
				}
				catch(e) {
					hstr2 += "</br><b style='background-color:#ffaaaa'>" + uncont[n2] + " on " + temno[sno] + " " + unconta[n2] + ".</b> timed out"; 
				}
				uncontactCnt++;
			}
			
			httpTimeout = 160000;	// default value of 160 secs
		}
		catch(e) {}
	
		if (uncontactCnt == 0 )
		{
			 hstr2+= "<b> . . . There are no uncontactable agents for <font color=\"blue\">" + temno[sno]  + "</font></b>"; 
		}
		hstr2 += "</br></br>";			
	}	// end of for each TEMS	
	
	dupl.push("itmx241:LZ;TEMS");		// beh  Huh ?   why itmx241:LZ   ?   looks like nonsense to me or maybe was forced 'test data'  ... TODO 
	dupl.sort();
	oldstr = "";
	
	for (n2=0; n2 < dupl.length; n2++) {
		try {
			nstr = dupl[n2];
			
			if (oldstr.split(";")[0] == nstr.split(";")[0]) {
				hstr1 += "<b style='background-color:#ffaaaa'>" + (n2-1) + " . " + oldstr.split(";")[0] + " Agent on " + oldstr.split(";")[1]  +  addra.split(oldstr)[1].split(";")[1] + ".</b></br>"; 
				hstr1 += "<b style='background-color:#ffaaaa'>" + n2 + " . " +  nstr.split(";")[0] + " Duplicate Agent on " + nstr.split(";")[1]  +  "xx" + addra.split(nstr)[1].split(";")[1] +  ".</b></br>"; 		
				duplCnt++;
			}
			else {	
				//hstr1 += "<b>" + nstr.split(";")[0] + " Agents  on " + nstr.split(";")[1]  + ".</b></br>" 	
			}
			oldstr = nstr;
		}
		catch(e) {}
	}

	if ( duplCnt == 0 )
	{
		 hstr1+= "<br/><b><i>Good News !</i> . . . There are no duplicate agents.</b></br>";
	}	
	
	hstr1 = hstr1 + hstr2;
	traceLog("taudit.js::duplicates() EXIT");	
}

function sitanalysis() 
{
	traceLog("taudit.js::sitanalysis() ENTRY");	
	htmlstrsa = "</br><h4><font color=\"brown\">Situations TEMS Load Analysis</font></h4> <table style='border:1 solid black;' cellspacing='0'><tr>";

	for(n6=0; n6 < temno.length; n6++) {
		if ((temstatus[n6] == "*OFFLINE")||(temstatus[n6] == "N"))
			{ continue; }	
		
		sqlstr = 'SELECT PREDICATE, RULENAME FROM O4SRV.SITDB  AT("' + temno[n6] + '")';
		htmlstrsa += "<td valign='top'><table style='border:1 solid black;' cellspacing='0'><tr><td><h4>" + temno[n6] + "</h4></td></tr>";
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>" + sqlstr + "</sql> </CT_Get>"
  		tprint();
		
		try {	
			rows = xmle.getElementsByTagName('ROW');
			rowno = rows.length; 
		}
		catch(e) {
			rowno = 1;
		}
		
		ste = 'SITNAME", "';
		funce = "GROUP BY|INODESTS";
		var rex = new RegExp(ste);
		var rex2 = new RegExp(funce);
		var nn = 0;
		
		for(n1 =0 ; n1 < rowno; n1++) {
			try {
				sitstr = rows[n1].childNodes[0].childNodes[0].nodeValue;
				comp = rex.exec(sitstr);
				
				if (comp) { 
					comp2 = rex2.exec(sitstr);
					
					if (comp2) { 
						bcol = "#fffaaa";
						sitstr = sitstr.replace(/\'/g, "");  
						htmlstrsa += "<tr style='background-color:" + bcol + "'><td title='" + sitstr.split("WHERE")[1] + "'>TEMS Evaluated :" + sitstr.split(ste)[1].split('"')[0] +  "</td></tr>";
					}
					else { 
						bcol = LIGHT_GREEN;
					}
				}
				else {
					bcol = LIGHT_RED;
					cmsh = 'HISTORY","';
					var rex1 = new RegExp(cmsh);
					comp1 = rex1.exec(sitstr);
					
					if (comp1) { 
						if (sitstr.split(cmsh)[1].split('"')[0] == "IRA") { 
							bcol = "yellow"; 
						}
						else { 
							bcol = "#fff888";
							htmlstrsa += "<tr style='background-color:" + bcol + "'><td  title='" + sitstr + "'>TEMS History For : " + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td></tr>";
						}
					}
					else { 
						bcol = "#fff666";
						htmlstrsa += "<tr style='background-color:" + bcol + "'><td  title='" + sitstr + "'>TEMS Collection for " + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td></tr>";
					}
				}
			}
			catch(e) {}
		}
		
		htmlstrsa += "</table></td>"; 
	}
	
	htmlstrsa += "</tr></table>";
	traceLog("taudit.js::sitanalysis() EXIT");	
}

function kpiex() 
{
	traceLog("taudit.js::kpiex() ENTRY");		
	filename = "KPI" + gbltime + ktarget + ".htm";
	filename = filename.replace(/:/g,"_");
	var file = fs.OpenTextFile(path + filename, 2, true);
	file.WriteLine("<html xmlns:v='urn:schemas-microsoft-com:vml'><head><style> v\\:*   { behavior:url(#default#VML); } v\\:line   { z-index:-1; }div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; background:#e8e8e8; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;nowrap:true; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; background:#fefefe;nowrap:true; } </style></head><body><h3>Tivoli Enterprise Platform: Daily <font color=\"magenta\">Key Performance Indicators</font> Report Version 07.00.00</h3>");

	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT VERSION, NODE,PRODUCT FROM O4SRV.INODESTS WHERE O4ONLINE = 'Y' ORDER BY PRODUCT</sql> </CT_Get>"
	tprint();
	rows = xmle.selectNodes("//ROW");

	if (rows.length > 0) {} 
	else { 
		WScript.Echo(HJJKHJKH); 
	} 

	kversion = new Array;
	knode = new Array;
	kproduct = new Array;
	ktmlstr = " ";
	var rex = new RegExp(ktarget);
	
	for(node=rows.nextNode(); node!=null; node=rows.nextNode()) {
		nodec= node.childNodes;
		xstr = nodec[1].text; 
		
		if (ktarget) {  
			comp = rex.exec(xstr);
			
			if (!comp) 
				{ continue; }
		} 
	
		knode[nn] = xstr;
		kversion[nn] = nodec[0].text;
		kproduct[nn]= nodec[2].text;
		nn++;
	}
	
	for (kn=0; kn < knode.length; kn++) {
		kversions = kversion[kn];
		knodes = knode[kn];
		kproducts = kproduct[kn];

		try {  
			kpira(kversions,knodes,kproducts); 
		}
		catch(e)  {}
		
		file.WriteLine(ktmlstr);
		ktmlstr = " ";
	}	

	file.WriteLine("</div></body></html>");
	file.Close();
	traceLog("taudit.js::kpiex() EXIT");		
} 


function kpira(vvers,vagt,vwstr) 
{
	traceLog("taudit.js::kpira() ENTRY");	
rowstr1 = "";
tablstr = "";
kpix = 0;
n2 = 0;
resptime = parseInt((new Date).getTime());
for (pn1=0;pn1<kpip.length ;pn1++){
if (kpip[pn1]==vwstr) {
kpix = pn1;
break;
}
}
if (kpix==0) { return; }

ktmlstr += "<hr></hr><h4><font color=\"magenta\"> Key Performance Indicators</font> for : <font color=\"blue\">" + vagt + "</font><font color=\"#424262\">v</font>" + vvers + "  on   " + (new Date).toDateString() + "</h4>";

kpialen = kpia[kpix].length; 
for (n1=0;n1<kpialen ;n1++){
fltstr = "";
try {
rowstr1 += "<td style='width:250'  valign='top'><h4>" + kpia[kpix][n1].split(";")[0] + "</h4>";
if (tablstr == kpia[kpix][n1].split(";")[1] ) {} else {
tablstr = kpia[kpix][n1].split(";")[1] ;
try {
 gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><object>" +  tablstr + "</object><target>" + vagt + "</target></CT_Get>";
 tprint();
 rows = xmle.getElementsByTagName('ROW');
rowno = rows.length;
 
if (!rowno) {alert(kkk); } } catch(e) {
if (n1 ==0) {
ktmlstr += "<b style = 'background-color:#ffaaaa'>No Data</b>"; return;
 } 
tablstr = tablstr.replace(/_64/,"");
 gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><object>" +  tablstr + "</object><target>" + vagt + "</target></CT_Get>";
 tprint();
 rows = xmle.getElementsByTagName('ROW');
rowno = rows.length;

}
}

curatr = kpia[kpix][n1].split(";")[2];

x1 = rows[0].childNodes;
k9 = 99;
for (n3 =0; n3 < x1.length; n3++) {
colhdr = rows[0].childNodes[n3].nodeName ;
try { colval = x1[n3].childNodes[0].nodeValue ; } catch(e) {}
if ( colhdr == curatr) { k8 = n3; } 
 
if (colhdr == kpia[kpix][n1].split(";")[3]) {
k9 = n3;
} 


}

ymax = 0;
if (rows.length < 2) { rowslen = 1; } else { rowslen = rows.length; } 
rowstr10 = "<h5>Number of " + kpia[kpix][n1].split(";")[4]  + " : " + addCommas((rowslen -1)) + "</h5>";
for (r1=0; r1<rows.length; r1++) {
try {
x1 = rows[r1].childNodes;
if (parseInt(x1[k8].childNodes[0].nodeValue ) >= ymax) { 
if (x1[k9].childNodes[0].nodeValue=="iexplore") continue;
if (x1[k9].childNodes[0].nodeValue=="_Total") continue; 
if (x1[k9].childNodes[0].nodeValue=="Idle") continue; 
if (x1[k9].childNodes[0].nodeValue=="System") continue; 
ymax = x1[k8].childNodes[0].nodeValue; 
kmax = r1;
}
} catch(e) {}
}
if (!kmax) {kmax =0 ; }
rowstr11 = "";
rowstr12 = "";

x1 = rows[kmax].childNodes;
for (n3 =0; n3 < x1.length; n3++) {
try {
colhdr = rows[0].childNodes[n3].nodeName ;
colval = x1[n3].childNodes[0].nodeValue ;
 } catch(e) { continue;}
if (colhdr == curatr) {
realno = n3; 
if (colval < 101) { 
if (colval < 90) { bcol =LIGHT_GREEN; } else { bcol = LIGHT_RED;}

} else {
if (colval < 1000000000) { bcol = LIGHT_GREEN; } else { bcol = LIGHT_RED;}

}
rowstr11 = "<b style='width:250;background-color:" + bcol + "'>" + curatr + " = " + addCommas(colval) + "</b>";
//beh rowstr11 = "<b style='width:196;background-color:" + bcol + "'>" + curatr + " = " + colval + "</b>";
realval = colval;
continue;
} 
try {
if (rows.length==1) {
numatr = kpia[kpix][n1].split(";")[5] ;

if (colhdr == numatr) {
if (colval == 0 ) { rowslen =1 } else { rowslen = colval; } 
rowstr10 = "<h5>Number of " + kpia[kpix][n1].split(";")[4]  + " : " + addCommas(rowslen) + "</h5>";

continue;
} 

}} catch(e) {}

try {
if (n3 == k9) {
rowstr12 = "<b style='width:250;background-color:#eeeeee'>" + colhdr + " = " + colval +  "</b>";
//beh rowstr12 = "<b style='width:196;background-color:#eeeeee'>" + colhdr + " = " +colval +  "</b>";
fltstr += "<afilter>" + colhdr + ";EQ;" + colval  + "</afilter>"; 
continue;
} 
} catch(e) {}
}
rowstr1 += rowstr10 + rowstr12 + rowstr11;
} catch(e) {}

try {

 gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + "</password><object>" +  tablstr + "</object><target>" + vagt + "</target><history>y</history><afilter>Write_Time;GE;" + gbltime + "0000000</afilter>" + fltstr + "</CT_Get>";
 tprint();
hrows = xmle.getElementsByTagName('ROW');
hrowno = hrows.length;

h4 = 0;
x1 = hrows[0].childNodes;
for (h2=0; h2 <x1.length; h2++) {
if (curatr == hrows[0].childNodes[h2].nodeName  ) {
realno = h2;
}
}
h1ar = new Array;
oldtime = "";
for (h1=0; h1< hrowno; h1++) {
x1 = hrows[h1].childNodes;
if (oldtime == (x1[0].childNodes[0].nodeValue).substring(0,10)) { continue; } else { oldtime = (x1[0].childNodes[0].nodeValue).substring(0,10); }
h1ar[h4] = x1[realno].childNodes[0].nodeValue;
h4++;
}
 rav = parseInt(h1ar[0]);
for (h3=1; h3< h1ar.length; h3++) { 
 rav = parseInt((parseInt(h1ar[h3]) +  rav) * 5)/10 
}
plotkpi(); 
} catch(e) { 
}

rowstr1 += "<br/><b></b></td>";
}
presptime = ((parseInt((new Date).getTime())- resptime) /1000) ;

rowstr = "<table cellspacing='0' cellpadding = '0' ><tr>" + rowstr1 +"</tr></table>";
ktmlstr += "<b> Response Time = " + addCommas(presptime) + " seconds</b>" + rowstr;
	traceLog("taudit.js::kpira() EXIT");	
}
//beh var rowstr1 = "";
function plotkpi() {
	traceLog("taudit.js::plotkpi() ENTRY");	
rowstr1 += "<div style='position:relative;top:0;left:0;width:196;height:180;background-color:#eeeeee;'>";
for (b1=0; b1 <11; b1 ++) {  
if (b1 <11) {
rowstr1 += "<v:line strokeweight='1px' strokecolor='#cccccc' from='"  + 10 + "px, " + ((b1*15) + 10) + "px' to='"  + 170 + "px, " + ((b1*15) + 10) + "px'></v:line>" ;
}
rowstr1 += "<v:line strokeweight='1px' strokecolor='#cccccc' from='"  + ((b1*16) + 10) + "px, " + 10 + "px' to='"  + ((b1*16) + 10) + "px, " + 160 + "px'></v:line>" ;

if (sitav[objno]) {
rowstr1 += "<v:line strokeweight='1px' strokecolor='red' from='"  + 10 + "px, " + 25 + "px' to='"  + 170 + "px, " + 25 + "px'></v:line>" ;
rowstr1 += "<span style='position:absolute;background-color:#ffaaaa;top:20;left:35;'>" + sitav[objno].split(" ")[0] + "</span>";
} else {
rowstr1 += "<v:line strokeweight='1px' strokecolor='red' from='"  + 10 + "px, " + 25 + "px' to='"  + 170 + "px, " + 25 + "px'></v:line>" ;
}
}
h1arlen = h1ar.length;


for (b2=0; b2 <h1arlen; b2 ++) {
if (h1ar[b2] > 100) {
y1 = parseInt(h1ar[b2] * 1.5/10000000);
} else { 
y1 = parseInt(h1ar[b2] * 1.5);
}

if (b2 > 1) {
ty1 = (ty1 + y1)/2;
rowstr1 += "<v:line strokeweight='1px' strokecolor='blue' from='"  + (10 +(b2-1)*2) + "px, " + (160-ty0) + "px' to='"  + (10 + b2*2) + "px, " + (160 - ty1) + "px'></v:line>" ;
ty0 = ty1;
} else { 
ty1 = y1;
ty0 = y1;
 } 
if (y1 < 135) {
rowstr1 += "<v:line strokeweight='2px' strokecolor='green' from='"  + (11+b2*2) + "px, " + (160) + "px' to='"  + (11+b2*2) + "px, " + (160 - y1) + "px'></v:line>" ;
} else { 
rowstr1 += "<v:line strokeweight='2px' strokecolor='red' from='"  + (11+b2*2) + "px, " + (160) + "px' to='"  + (11+b2*2) + "px, " + (160 - y1) + "px'></v:line>" ;
}
}
rowstr1 += "<v:line strokeweight='1px' strokecolor='blue' from='"  + (10 +(h1arlen-1)*2) + "px, " + (160-ty1) + "px' to='"  + (10 + (h1arlen + 1)*2) + "px, " + (160 - ty1) + "px'></v:line>" ;
if (realval > 100) {
y1 = parseInt(realval * 1.5/10000000);
} else { 
y1 = parseInt(realval * 1.5);
}
if (y1 <135) { bcol = "#88ff88"; } else { bcol = "red"; }
rowstr1 += "<div style='background-color:" + bcol + ";position:absolute;left:" + ( 10 + h1arlen*2) + "px;height:5px;top:" + (156- y1) + "px;' title=' Value = " + realval + "'>*</div>";

if ((h1arlen - (75-h1arlen)) > 0 ) {
ty2 = y1 + (h1ar[h1arlen - 1] - h1ar[h1arlen - (75 - h1arlen)])* 1.5 ;
 }


rowstr1 += "<v:line strokeweight='1px' strokecolor='blue' from='4px, 170px' to='20px, 170px'></v:line>" ;
rowstr1 += "<div style='background-color:#eeeeee;position:absolute;left:20px;top:165px;' title='Running Average'>Running Average = " + rav + " </div>";
rowstr1 += "</div>";
	traceLog("taudit.js::plotkpi() EXIT");	
}


function temsno() 
{
	traceLog("taudit.js::temsno() ENTRY");		
	gpayload = '<CT_Get> <userid>' +hu+ '</userid><password>' + hp+ "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODE,O4ONLINE,VERSION  FROM O4SRV.INODESTS WHERE PRODUCT = 'EM' AND O4ONLINE = 'Y' ORDER BY NODE]]></sql> </CT_Get>";
	tprint();
//	WScript.Echo(gpayload);
//	WScript.Echo(xmlhttp.responseText);
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;
	sno =0;
	listOnlineRTEMS = "";
	
	for(n1 =0 ; n1 < rowno; n1++) {
		temno[sno] = rows[n1].childNodes[0].childNodes[0].nodeValue;
		temstatus[sno] = rows[n1].childNodes[1].childNodes[0].nodeValue;
		temversion[sno] = rows[n1].childNodes[2].childNodes[0].nodeValue;

		if ( temno[sno] != hubname) {
				listOnlineRTEMS += ";" + temno[sno];
		}

		sno++;
	}

	listOnlineRTEMS += ";";	
//	traceLog("\tlistOnlineRTEMS <" + listOnlineRTEMS + ">");
		
	for (n2=0 ; n2 <sno ; n2++) { 
		try {
			if ((temstatus[n2] == "N")||(temstatus[n2] == "*OFFLINE")) { continue; }
			gpayload = '<CT_Get> <userid>' +hu+ '</userid><password>' + hp+ "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODE FROM O4SRV.TNODELST AT('" + temno[n2] + "')  WHERE NODELIST = '*HUB']]></sql> </CT_Get>";
			tprint();
			rows = xmle.getElementsByTagName('ROW');
			tmpname = rows[0].childNodes[0].childNodes[0].nodeValue;
			
			if ( tmpname!= hubname ) 
				mirrorname = tmpname;
		}
		catch(e) {}	 
	}
	traceLog("taudit.js::temsno() EXIT");	
} 


function cpusage() 
{
	traceLog("taudit.js::cpusage() ENTRY");	
	gpayload = '<CT_Get> <userid>' +hu+ '</userid><password>' + hp+ "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT COUNT(NODE), PRODUCT  FROM O4SRV.INODESTS WHERE (PRODUCT ='NT' OR PRODUCT ='UX' OR PRODUCT = 'LZ' OR PRODUCT = 'M5') GROUP BY PRODUCT]]></sql> </CT_Get>";
	tprint();
	rows = xmle.getElementsByTagName('ROW');
	
	for (n1=0; n1 < rows.length; n1++) {
		prodstr += ";" + rows[n1].childNodes[1].childNodes[0].nodeValue;
	}

	agtstr = "";
	
	if (prodstr.split("NT").length > 1) {
		agtstr += "<h4>Windows TEMS/TEPS Statistics  HUB at " + hubname + "</h4><table style='border:1 solid black;' cellspacing='0'>";
 		agtstr += "<tr><th>Server Name</th><th>Process Name</th><th>Elapsed Time</th><th>Processor Time</th><th>Thread Count</th><th>Handle Count</th><th>Virtual Bytes Peak</th></tr>";

		for ( sno=0;  sno<temno.length; sno++) {
			try {
				if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) 
					{ continue; }
					
				sqlstr = "SELECT ORIGINNODE,INSTCNAME,ELAPSEDTME ,PCTPRCSTME, THREADCNT, HANDLECNT, VIRTBYTSPK  FROM KNT.NTPROCESS AT(" + '"' + temno[sno] + '") WHERE (INSTCNAME = "kdsmain" OR INSTCNAME = "KfwServices") AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>KNT.NTPROCESS</table><sql>" + sqlstr + "</sql></CT_Get>";
				tprint();
				rows = xmle.getElementsByTagName('ROW');
				rowno = rows.length;
				
				if (rowno > 0) {
					for(n1 =0 ; n1 < rowno; n1++) {
						elapsedTime = addCommas(rows[n1].childNodes[2].childNodes[0].nodeValue);
						procTime = addCommas(rows[n1].childNodes[3].childNodes[0].nodeValue);
						threadCount = addCommas(rows[n1].childNodes[4].childNodes[0].nodeValue);	
						handleCount = addCommas(rows[n1].childNodes[5].childNodes[0].nodeValue);	
						virtBytePeak = addCommas(rows[n1].childNodes[6].childNodes[0].nodeValue);
						agtstr += "<tr><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td><td style='text-align:right'>" + elapsedTime + "</td><td style='text-align:right'>" + procTime + "</td><td style='text-align:right'>" + threadCount +  "</td><td style='text-align:right'>" + handleCount  +  "</td><td style='text-align:right'>" + virtBytePeak  +  "</td></tr>";
						//BEH   agtstr += "<tr><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[3].childNodes[0].nodeValue +  "</td><td>" + rows[n1].childNodes[4].childNodes[0].nodeValue  +  "</td><td>" + rows[n1].childNodes[5].childNodes[0].nodeValue  +  "</td><td>" + rows[n1].childNodes[6].childNodes[0].nodeValue  +  "</td></tr>";   
					}
				}
			}
			catch(e) {}
		}
		
		agtstr += "</table>";
	}

	if (prodstr.split("UX").length > 1) {
		agtstr += "<h4>UNIX TEMS/TEPS Statistics  HUB at " + hubname + "</h4><table style='border:1 solid black;' cellspacing='0'>";
		agtstr += "<tr><th>Server Name</th><th>Process Name</th><th>Virtual Size</th><th>Thread Count</th><th>Elapsed Time</th><th>CPU</th></tr>";

		for ( sno=0;  sno<temno.length; sno++) {
			try {
				if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) 
					{ continue; }
					
				sqlstr = "SELECT ORIGINNODE,COMMAND,VSIZE,THREADCNT,ELAPTIME,CPU  FROM OMUNX.UNIXPS AT(" + '"' + temno[sno] + '") WHERE (BCMD = "kdsmain" OR BCMD = "KfwServices") AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>OMUNX.UNIXPS</table><sql>" + sqlstr + "</sql></CT_Get>";
				tprint();
				rows = xmle.getElementsByTagName('ROW');
				 rowno = rows.length;

				if (rowno > 0) {
					for(n1 =0 ; n1 < rowno; n1++) {
						agtstr += "<tr><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[3].childNodes[0].nodeValue +  "</td><td>" + rows[n1].childNodes[4].childNodes[0].nodeValue  +  "</td><td>" + rows[n1].childNodes[5].childNodes[0].nodeValue  +  "</td></tr>";
					}
				}
			}
			catch(e) {}
		}

		agtstr += "</table>";  
	}
	
	if (prodstr.split("LZ").length > 1) {
		agtstr += "<h4>LINUX TEMS/TEPS Statistics  HUB at " + hubname + "</h4><table style='border:1 solid black;' cellspacing='0'>";
		agtstr += "<tr><th>Server Name</th><th>Process Name</th><th>VM Size</th><th>Size</th><th>Thread Count</th><th>CPU</th></tr>";

		for ( sno=0;  sno<temno.length; sno++) {
			try {
				if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) 
					{ continue; }
					
				sqlstr = "SELECT ORIGINNODE,CMD,VMSIZE,SIZE,PROCTHRD,BUSYCPU  FROM KLZ.KLZPROC AT(" + '"' + temno[sno] + '") WHERE (CMD = "kdsmain" OR CMD = "KfwServices") AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>KLZ.KLZPROC</table><sql>" + sqlstr + "</sql></CT_Get>";
				tprint();
				rows = xmle.getElementsByTagName('ROW');
				rowno = rows.length;

				if (rowno > 0) {
					for(n1 =0 ; n1 < rowno; n1++) {
						agtstr += "<tr><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[3].childNodes[0].nodeValue +  "</td><td>" + rows[n1].childNodes[4].childNodes[0].nodeValue  +  "</td><td>" + rows[n1].childNodes[5].childNodes[0].nodeValue  +  "</td></tr>";
					}
				}
			}
			catch(e) {}
		}

		agtstr += "</table>";  
	}	
	
	if (prodstr.split("M5").length > 1) {
		try {
			agtstr += "<h4>zOS High CPU Usage Statistics (" + resptime + " Seconds)</h4><table style='border:1 solid black;' cellspacing='0'>";
			
			for ( sno=0;  sno<temno.length; sno++) {
				if ((temstatus[sno] == "*ONLINE")||(temstatus[sno] == "Y")) { 
					sqlstr = "SELECT ORIGINNODE,JOBNAME,PROCSTEP, JCPUTM,JELAPTM  FROM KM5.ASCPUUTIL AT(" + '"' + temno[sno] + '") WHERE JCPUTM > 900000 AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
					gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password><table>KM5.ASCPUUTIL</table><sql>" + sqlstr + "</sql></CT_Get>"
					
					try {
						resptime = parseInt((new Date).getTime());
    						tprint();
						rows = xmle.getElementsByTagName('ROW');
						rowno = rows.length; 
						
						if (rowno > 0) {
							agtstr += "<tr><th>Server Name</th><th>Job/Step</th><th>CPU Time/Elapsed Secs</th><th>Life CPU %</th></tr>";
							
							for(n1 =0 ; n1 < rowno; n1++) {
								try { 
									cpupct = 0;
									cpupct = parseInt((rows[n1].childNodes[3].childNodes[0].nodeValue  * 1000)/ rows[n1].childNodes[4].childNodes[0].nodeValue) /10; 
									
									if ( cpupct > 10 ) { bcol = LIGHT_RED; } 
									else { 			
										if ( cpupct > 5 ) { bcol = LIGHT_YELLOW; } 
										else {
											bcol = LIGHT_GREEN; 
										}
									}
									
									agtstr += "<tr  style='background-color:" + bcol + "'><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "/" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + parseInt(rows[n1].childNodes[3].childNodes[0].nodeValue) + "/" + parseInt(rows[n1].childNodes[4].childNodes[0].nodeValue)  + " </td><td> " + cpupct + "% </td> </tr>";
								}
								catch(e) {}
							} 
						}
					}
					catch(e) {}
				}
			}
			
			agtstr += "</table>";
		}
		catch(e) { }
		
		try {
			agtstr += "<h4>zOS TEMS Usage Statistics (" + resptime + " Seconds)</h4><table style='border:1 solid black;' cellspacing='0'>";
		
			for ( sno=0;  sno<temno.length; sno++) {
				if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N"))
					{ continue; }
	
				sqlstr = "SELECT ORIGINNODE,JOBNAME,PROCSTEP, JCPUTM,JELAPTM  FROM KM5.ASCPUUTIL AT(" + '"' + temno[sno] + '") WHERE PROCSTEP = "TEMS" AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password><table>KM5.ASCPUUTIL</table><sql>" + sqlstr + "</sql></CT_Get>"
				
				try {
					resptime = parseInt((new Date).getTime());
					tprint();
					rows = xmle.getElementsByTagName('ROW');
					rowno = rows.length; 
					
					if (rowno > 0) {
						agtstr += "<tr><th>Server Name</th><th>Job/Step</th><th>CPU Time/Elapsed Secs</th><th>Life CPU %</th></tr>";
						
						for(n1 =0 ; n1 < rowno; n1++) {
							try { 
								cpupct = 0;
								cpupct = parseInt((rows[n1].childNodes[3].childNodes[0].nodeValue  * 1000)/ rows[n1].childNodes[4].childNodes[0].nodeValue) /10; 
							
								if ( cpupct > 10 ) { bcol = LIGHT_RED; } 
								else { 			
									if ( cpupct > 5 ) { bcol = LIGHT_YELLOW; } 
									else {
										bcol = LIGHT_GREEN; 
									}
								}
					
								agtstr += "<tr  style='background-color:" + bcol + "'><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "/" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + parseInt(rows[n1].childNodes[3].childNodes[0].nodeValue) + "/" + parseInt(rows[n1].childNodes[4].childNodes[0].nodeValue)  + " </td><td> " + cpupct + "% </td> </tr>";
							}
							catch(e) {}
						} 
					}
				}
				catch(e) {}
			}
			
			agtstr += "</table>";
		}
		catch(e) { }
	
		try {
			agtstr += "<h4>zOS AGENT Usage Statistics (" + resptime + " Seconds)</h4><table style='border:1 solid black;' cellspacing='0'>";
			
			for ( sno=0;  sno<temno.length; sno++) {
				if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N"))
					{ continue; }
				
				sqlstr = "SELECT ORIGINNODE,JOBNAME,PROCSTEP, JCPUTM,JELAPTM  FROM KM5.ASCPUUTIL AT(" + '"' + temno[sno] + '") WHERE PROCSTEP = "AGENT" AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password><table>KM5.ASCPUUTIL</table><sql>" + sqlstr + "</sql></CT_Get>"
				
				try {
					resptime = parseInt((new Date).getTime());
					tprint();
					rows = xmle.getElementsByTagName('ROW');
					rowno = rows.length; 
					
					if (rowno > 0) {
						agtstr += "<tr><th>Server Name</th><th>Job/Step</th><th>CPU Time/Elapsed Secs</th><th>Life CPU %</th></tr>";
						
						for(n1 =0 ; n1 < rowno; n1++) {
							try { 
								cpupct = 0;
								cpupct = parseInt((rows[n1].childNodes[3].childNodes[0].nodeValue  * 1000)/ rows[n1].childNodes[4].childNodes[0].nodeValue) /10; 
								
								if ( cpupct > 10 ) { bcol = LIGHT_RED; } 
								else { 			
									if ( cpupct > 5 ) { bcol = LIGHT_YELLOW; } 
									else {
										bcol = LIGHT_GREEN; 
									}
								}
								
								agtstr += "<tr  style='background-color:" + bcol + "'><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "/" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + parseInt(rows[n1].childNodes[3].childNodes[0].nodeValue) + "/" + parseInt(rows[n1].childNodes[4].childNodes[0].nodeValue)  + " </td><td> " + cpupct + "% </td> </tr>";
							}
							catch(e) {}
						} 
					}
				}
				catch(e) {}
			}
			
			agtstr += "</table>";
		}
		catch(e) { }

		try {
			agtstr += "<h4>zOS M2 Collector Usage Statistics (" + resptime + " Seconds)</h4><table style='border:1 solid black;' cellspacing='0'>";
			
			for ( sno=0;  sno<temno.length; sno++) {
				if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N"))
					{ continue; }
					
				sqlstr = "SELECT ORIGINNODE,JOBNAME,PROCSTEP, JCPUTM,JELAPTM  FROM KM5.ASCPUUTIL AT(" + '"' + temno[sno] + '") WHERE PROCSTEP = "M2COLL" AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password><table>KM5.ASCPUUTIL</table><sql>" + sqlstr + "</sql></CT_Get>"
				
				try {
					resptime = parseInt((new Date).getTime());
					tprint();
					rows = xmle.getElementsByTagName('ROW');
					rowno = rows.length; 
					
					if (rowno > 0) {
						agtstr += "<tr><th>Server Name</th><th>Job/Step</th><th>CPU_Time/Elapsed Secs</th><th>Life CPU %</th></tr>";
						
						for(n1 =0 ; n1 < rowno; n1++) {
							try { 
								cpupct = 0;
								cpupct = parseInt((rows[n1].childNodes[3].childNodes[0].nodeValue  * 1000)/ rows[n1].childNodes[4].childNodes[0].nodeValue) /10; 
								
								if ( cpupct > 10 ) { bcol = LIGHT_RED; } 
								else { 			
									if ( cpupct > 5 ) { bcol = LIGHT_YELLOW; } 
									else {
										bcol = LIGHT_GREEN; 
									}
								}
								
								agtstr += "<tr  style='background-color:" + bcol + "'><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "/" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + parseInt(rows[n1].childNodes[3].childNodes[0].nodeValue) + "/" + parseInt(rows[n1].childNodes[4].childNodes[0].nodeValue)  + " </td><td> " + cpupct + "% </td> </tr>";
							}
							catch(e) {}
						} 
					}
				}
				catch(e) {}
			}
			
			agtstr += "</table>";
		}
		catch(e) {}
		
		try {
			agtstr += "<h4>zOS CNDL Usage Statistics (" + resptime + " Seconds)</h4><table style='border:1 solid black;' cellspacing='0'>";
		
			for ( sno=0;  sno<temno.length; sno++) {
				if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N"))
					{ continue; }
					
				sqlstr = "SELECT ORIGINNODE,JOBNAME,PROCSTEP, JCPUTM,JELAPTM  FROM KM5.ASCPUUTIL AT(" + '"' + temno[sno] + '") WHERE PROCSTEP = "CNDL" AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password><table>KM5.ASCPUUTIL</table><sql>" + sqlstr + "</sql></CT_Get>"
				
				try {
					resptime = parseInt((new Date).getTime());
					tprint();
					rows = xmle.getElementsByTagName('ROW');
					rowno = rows.length; 
					
					if (rowno > 0) {
						agtstr += "<tr><th>Server Name</th><th>Job/Step</th><th>CPU Time/Elapsed Secs</th><th>Life CPU %</th></tr>";
						
						for(n1 =0 ; n1 < rowno; n1++) {
							try { 
								cpupct = 0;
								cpupct = parseInt((rows[n1].childNodes[3].childNodes[0].nodeValue  * 1000)/ rows[n1].childNodes[4].childNodes[0].nodeValue) /10; 
								
								if (cpupct > 10 ) { bcol = LIGHT_RED; } 
								else { 			
									if ( cpupct > 5 ) { bcol = LIGHT_YELLOW; } 
									else {
										bcol = LIGHT_GREEN;
									}
								}
								
								agtstr += "<tr  style='background-color:" + bcol + "'><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "/" + rows[n1].childNodes[2].childNodes[0].nodeValue + "</td><td>" + parseInt(rows[n1].childNodes[3].childNodes[0].nodeValue) + "/" + parseInt(rows[n1].childNodes[4].childNodes[0].nodeValue)  + " </td><td> " + cpupct + "% </td> </tr>";
							}
							catch(e) {}
						} 
					}
				}
				catch(e) {}
			}
			
			agtstr += "</table>";
		}
		catch(e) { }
	}
	
	traceLog("taudit.js::cpusage() EXIT");	   
}

function distribute() 
{
	traceLog("taudit.js::distribute() ENTRY");	
	xresptime = parseInt((new Date).getTime());
	badno = 0;  
	distByTemsHdr = "";
	distByTemsBdy = ""
	botstr32 = "";
	resptime = parseInt((new Date).getTime());	
	tepcallen =1;
	temstype = "";

	var onlineNodeCnt_withSits =0;
	var onlineSubnodeCnt_withSits =0;	
	var parentRows = new Array;	
	var notAutoStartedstr;
	var autoStartedstr;

/* START arun's code, does nothing that is utilized	 
	 try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT THRUNODE, COUNT(NODE) FROM O4SRV.INODESTS GROUP BY THRUNODE </sql> </CT_Get>";
		tprint();
		dthrustr = xmlhttp.responseText;			//beh TODO :  why is this never being used; Arun has commented out code that tried to use it
	}
	catch(e) {}
  END arun's code, does nothing that is utilized */
  
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT NODE, GBLTMSTMP, THRUNODE FROM O4SRV.TNODESAV </sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
		nodesavstr = ";;";
		
		for(n8 =0 ; n8 < rowno; n8++) {
			try {
				nodesavstr += rows[n8].childNodes[0].childNodes[0].nodeValue + ";" ;
			}
			catch(e) {
				nodesavstr +=  " ;";
			}
			
			try {
				nodesavstr += rows[n8].childNodes[1].childNodes[0].nodeValue + ";" ;
			}
			catch(e) {
				nodesavstr +=  " ;";
			}
			
			try {
				nodesavstr += rows[n8].childNodes[2].childNodes[0].nodeValue + ";;";
			}
			catch(e) {
				nodesavstr +=  " ;;";
			}
		}
	}
	catch(e) {}

	notAutoStartedstr = "";  
	
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT SITNAME, AUTOSTART FROM O4SRV.TSITDESC </sql> </CT_Get>";
  		tprint();
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
		notAutoStartedstr = ";";
		autoStartedstr = ";";
		
		for(n8 =0 ; n8 < rowno; n8++) {
			try {
				if (rows[n8].childNodes[1].childNodes[0].nodeValue == "*NO") {
					notAutoStartedstr += rows[n8].childNodes[0].childNodes[0].nodeValue + ";";
				}
				else {
					autoStartedstr += rows[n8].childNodes[0].childNodes[0].nodeValue + ";";
				}
			}
			catch(e) {}
		}

	}
	catch(e) {}

	try {
		affsit = new Array;
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODE  FROM O4SRV.INODESTS WHERE O4ONLINE = 'Y' ORDER BY NODE]]></sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
		affnostr = ";;";
 		
 		for(n4 = 0 ; n4 < rowno; n4++) {
			affsit[n4] = rows[n4].childNodes[0].childNodes[0].nodeValue;
			affnostr += rows[n4].childNodes[0].childNodes[0].nodeValue + ";" + n4 + ";;"; 
		}
	}
	catch(e) {}

	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODELIST, NODE FROM O4SRV.TNODELST WHERE NODETYPE = 'M']]></sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
		ndlist = ";";
		oldnodl = ""
	 	
	 	for(n4 = 0 ; n4 < rowno; n4++) {
			newnodl = rows[n4].childNodes[0].childNodes[0].nodeValue;

			if (oldnodl == newnodl) {
				ndlist += rows[n4].childNodes[1].childNodes[0].nodeValue + ";"; 
			}
			else {
				oldnodl = newnodl;
				ndlist += ";;" + newnodl +  ";;" + rows[n4].childNodes[1].childNodes[0].nodeValue + ";"; 
			} 
		}
	}
	catch(e) {}

	//try {

	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT OBJNAME, NODEL, OBJCLASS  FROM O4SRV.TOBJACCL WHERE SYSTEM.PARMA('QIBNODE','QOMEGAVIEW',32) ORDER BY OBJNAME]]></sql> </CT_Get>";
	tprint();
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;
	oldsit = "";

	for(n4 = 0 ; n4 < rowno; n4++) {		// build list of orphaned Sits
		try {
			newsit = rows[n4].childNodes[0].childNodes[0].nodeValue;
			newsitx = ";" + newsit + ";";
			var rex = new RegExp(newsitx);
			comp = rex.exec(notAutoStartedstr);
			
			if (comp)  
				{ continue; }
			
			if (newsit.substring(0,2) == "_Z" ) 
				{ continue; }
			
			comp1 = rex.exec(autoStartedstr);

			if ((!comp1)&&(rows[n4].childNodes[2].childNodes[0].nodeValue=="5140")) { 
				orphanstr += newsit + ";";
				continue;
			}

			newnodlc = ";;" + rows[n4].childNodes[1].childNodes[0].nodeValue + ";;";

			if (ndlist.split(newnodlc).length > 1 ) {
				newnodla = ndlist.split(newnodlc)[1].split(";;")[0];
				newnodlb = newnodla.split(";");
				
				for(var x2=0;x2 < newnodlb.length; x2++) {
					newnodl = ";" + newnodlb[x2] + ";"; 
					
					if (affnostr.split(newnodl).length < 2) 
						{ continue; }

					try {
						affno = affnostr.split(newnodl)[1].split(";")[0];
						affsit[affno] += ";" + newsit;
					}
					catch(e) {}

				}
			}
			else { 
				newnodl = ";" + rows[n4].childNodes[1].childNodes[0].nodeValue + ";"; 
				
				if (affnostr.split(newnodl).length < 2) 
					{ continue; }
				
				try {
					affno = affnostr.split(newnodl)[1].split(";")[0];
					affsit[affno] += ";" + newsit;
				}
				catch(e) {}
			}
		}
		catch(e) {}
	}	

	try {
		orphlist = orphanstr.split(";");

		if (orphlist.length > 1) {
			botstr32 += "</br><h4><font color=" + DARK_GREEN + ">These situations have orphaned distributions ... \"orphans\" may be cleaned up by running</font> taudit /run:dist /auto:correct</h4>" ;

			for (var x2 =0; x2 < orphlist.length; x2++) {
				try {
					if (!orphlist[x2]) { continue; }
						botstr32 += "<b style='width:400;background-color:#ffaaaa'>" + orphlist[x2] + "</b></br>" ;
  				}
  				catch(e) {}
			}
			notAutoStartedstr = notAutoStartedstr + orphanstr;
		}
	}
	catch(e) {}
	//botstr32 += "<b>" + autoStartedstr + "</b>" +  notautostartedstr ;

	emdta = "";
	
	for(n6=0; n6 < temno.length; n6++) {
		emdta += temno[n6] + ";";
	}
   
	for(n6=0; n6 < temno.length; n6++) {
		// try {
		if ((temstatus[n6] == "N")||(temstatus[n6] == "*OFFLINE")) 
			{ continue; }

		if (temno[n6] == hubname )	 
			temstype = "HUB TEMS";
		else
			temstype = "Remote TEMS";
				
		resptime = parseInt((new Date).getTime());
		badstr1 = " ";
//arun - not used		var xthrustr = "";
		var n4 = 0;
		onlineNodeCnt_withSits = 0;
		onlineSubnodeCnt_withSits = 0;
	
		gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + '</password><table>O4SRV.UTCTIME</table><sql>SELECT THRUNODE, COUNT(NODE) FROM O4SRV.INODESTS AT("' + temno[n6] + '") WHERE O4ONLINE = "Y"  GROUP BY THRUNODE</sql> </CT_Get>';
		tprint();
		rows = xmle.getElementsByTagName('ROW');  
		rowno = rows.length;

/* START arun's code, does nothing that is utilized		
		for (n1 =0 ; n1 < rowno; n1++) {
			if (rows[n1].childNodes[0].childNodes[0].nodeValue == temno[n6]) 
				{  continue; }
	
			xthrustr += rows[n1].childNodes[0].childNodes[0].nodeValue + ";";
		}
END arun's code, does nothing that is utilized */	
		try {
			gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + '</password><table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODE FROM O4SRV.TNODELST AT("' + temno[n6] + '") WHERE NODELIST = "*HUB"]]></sql> </CT_Get>';
			tprint();
			rows = xmle.getElementsByTagName('ROW');  
			xname = rows[0].childNodes[0].childNodes[0].nodeValue;
		}
		catch(e) {
			xname = hubname;
		}

/* START arun's code, does nothing that is utilized		
		if ( temno[n6] == xname ) {
			var vthrustr = "";
			var n4 = 0;
			gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + '</password><table>O4SRV.UTCTIME</table><sql>SELECT NODE FROM O4SRV.INODESTS AT("' + temno[n6] + '") WHERE O4ONLINE = "Y"  </sql> </CT_Get>';
			tprint();
			rows = xmle.getElementsByTagName('ROW'); 
			rowno = rows.length;
			
			for (n1 =0 ; n1 < rowno; n1++) {
				curnode = rows[n1].childNodes[0].childNodes[0].nodeValue + ";";
				var rex = new RegExp(curnode);
				comp = rex.exec(xthrustr);
				
				if (!comp) 
					continue; 
	
				vthrustr += curnode;
			}
		}
		else { 
			vthrustr = xthrustr; 
		}
END arun's code, does nothing that is utilized */
	
//		if ( botstr32.length > 0 )
//			botstr32 += "</br>";
			
		botstr32 += "</br><h4><font color=\"brown\">Distributions by " + temstype + " </font><font color=\"blue\">" + temno[n6] + " </font><font color=\"#424262\">v</font>" + temversion[n6] +  "<font color=\"brown\"> for Online Agents and Autostarted Situations</font></h4>"; 
		htmlstr4 = "";
		
		try {
			gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + '</password><table>O4SRV.UTCTIME</table><sql>SELECT NODE,VERSION,PRODUCT,THRUNODE, HOSTADDR FROM O4SRV.INODESTS AT("' + temno[n6] + '") WHERE O4ONLINE = "Y"  ORDER BY NODE</sql> </CT_Get>';
			tprint();
			rows = xmle.getElementsByTagName('ROW');  
			rowno = rows.length;
		}
		catch(e) { 
			rowno = 1;
		}

// START new code from itmsuper.htm 

		var vnodes = new Array; 
		var nproduct = new Array;
		var nthrunode = new Array;
		var nversion = new Array;
		var nhostname = new Array;	
		var nsubnode = new Array;
		var vnodestr = "";
		var hostaddr;
		var hostaddrParts;
		var thruNode;
		var msn;
		
		traceLog("\t>>> Per table INODESTS, online-node count=" + rowno + "  for TEMS name=" + temno[n6] + " <<<");

		for (n1 =0 ; n1 < rowno; n1++) {	// get HostName for each node
			try {
				// SELECT NODE,PRODUCT,VERSION,THRUNODE, HOSTADDR
				nthrunode[n1] = rows[n1].childNodes[3].childNodes[0].nodeValue;
				vnodestr += rows[n1].childNodes[0].childNodes[0].nodeValue +";";   
				vnodes[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue ;
				nversion[n1] = rows[n1].childNodes[1].childNodes[0].nodeValue;	
				nproduct[n1] = rows[n1].childNodes[2].childNodes[0].nodeValue;
	
//				traceLog("\t\tnode=" + vnodes[n1] + " prod=" + nproduct[n1] + " thrunode=" + nthrunode[n1] + ";  TEMS is <" + temno[n6] + ">");

				if ( temno[n6] == hubname) {
					var thrunodeRegEx = new RegExp(";" + nthrunode[n1] + ";");
					comp = thrunodeRegEx.exec(listOnlineRTEMS);

					if (comp) {  // thrunode is a Remote TEMS, so we skip this 'subnode'
						nthrunode[n1] = "notMINE";
						nhostname[n1] = "notAvail";
						nsubnode[n1] = "N";	
						continue;
					}
				}			
				 				
				if ( nthrunode[n1] == temno[n6] ) {	// is this node a MSN ? 
					nsubnode[n1] = "N";		// yes it is, so mark 'subnode' flag as 'N'
					hostaddr = rows[n1].childNodes[4].childNodes[0].nodeValue;

					hostaddrParts =  hostaddr.split("<NM>");
					
					// example hostaddr value --> ip.pipe:#192.168.1.140[18303]<NM>CUPNTAPP04</NM>
					// alert ("hostaddrParts.len=" +  hostaddrParts.length + ": hostaddrParts=" + hostaddrParts );
					if ( hostaddrParts.length == 2) {
						hostaddrParts =  hostaddrParts[1].split("</NM>");
						nhostname[n1] = hostaddrParts[0];
					}
					else if (hostaddrParts.length == 1) {
						hostaddrParts =  hostaddr.split("<IP.PIPE>");
						if ( hostaddrParts.length == 2) {
							hostaddrParts =  hostaddrParts[1].split("</IP.PIPE>");
							firstSqBracket = hostaddrParts[0].indexOf("[");
							if (firstSqBracket > 0 )
								nhostname[n1] = hostaddrParts[0].substring(1,firstSqBracket);
							else
								nhostname[n1] = hostaddrParts;
						}
					}
					else		// <IP.PIPE>#9.42.35.14[1918]</IP.PIPE><IP.SPIPE>#9.42.35.14[3660]</IP.SPIPE>
						nhostname[n1] = "who are u ?";
						onlineNodeCnt_withSits++;
				}
				else {
//					traceLog("\t\tnode=" + vnodes[n1] + " is a SUBNODE !!!\tprod=" + nproduct[n1] + " thrunode=" + nthrunode[n1] + ";  TEMS is <" + temno[n6] + ">");
					nhostname[n1] = "I am subnode";	// but if we are processing HUB TEMS, am I subnode of MSN belonging to HUB TEMS ?
					nsubnode[n1] = "Y";		// mark 'subnode' flag as 'Y'
					gpayload = "<CT_Get><userid>" + hu + "</userid><password>" + hp + '</password><table>O4SRV.UTCTIME</table><sql>SELECT NODE,PRODUCT,VERSION,THRUNODE, HOSTADDR FROM O4SRV.INODESTS AT("' + temno[n6] + '") WHERE O4ONLINE = "Y" AND NODE ="' + nthrunode[n1] + '"  ORDER BY NODE</sql> </CT_Get>';
					tprint();
						
					try {
						parentRows = xmle.getElementsByTagName('ROW');  
					}
					catch(e) {}							
		
//					traceLog("\t\tparent thrunode count for subnode=" + parentRows.length + "  for TEMS <" + temno[n6] + "> for node (nthrunode[n1])<" + nthrunode[n1] + ">");													
		
					// using subnode's THRUNODE, aka parent ... get THRUNODE of the subnode's "parent" and extract hostaddr from "parent"
					par_thruNode = parentRows[0].childNodes[3].childNodes[0].nodeValue;

//					traceLog("WhoYA !! parent node<" + parentRows[0].childNodes[0].childNodes[0].nodeValue + ">" + 
//							" par_thrunode<" + par_thruNode + "> TEMS is <" + temno[n6] + "> par_HOSTADDR=" + parentRows[0].childNodes[4].childNodes[0].nodeValue);
			
					if ( par_thruNode == temno[n6] ) {
						hostaddr = parentRows[0].childNodes[4].childNodes[0].nodeValue;
						hostaddrParts =  hostaddr.split("<NM>");
						
						if ( hostaddrParts.length == 2) {
							hostaddrParts =  hostaddrParts[1].split("</NM>");
							nhostname[n1] = hostaddrParts[0];
						}
						else if (hostaddrParts.length == 1) {
							hostaddrParts =  hostaddr.split("<IP.PIPE>");

							if ( hostaddrParts.length == 2) {
								hostaddrParts =  hostaddrParts[1].split("</IP.PIPE>");
								firstSqBracket = hostaddrParts[0].indexOf("[");
								if (firstSqBracket > 0 )
									nhostname[n1] = hostaddrParts[0].substring(1,firstSqBracket);
								else
									nhostname[n1] = hostaddrParts;
							}
						}
						else {		// <IP.PIPE>#9.42.35.14[1918]</IP.PIPE><IP.SPIPE>#9.42.35.14[3660]</IP.SPIPE>
							nhostname[n1] = "who are you ?";
							//beh		traceLog("node=" + vnodes[n1]  + "  hostaddr=" + rows[n1].childNodes[4].childNodes[0].nodeValue + "  hostname=" + nhostname[n1]);
						}
//								traceLog("Subnode MATCH for <" + vnodes[n1] + "> w/ parent node of <" +  par_thruNode + "> hostaddr of <" + nhostname[n1] + ">");
						onlineNodeCnt_withSits++;
						onlineSubnodeCnt_withSits++;								
					}
					else {
//						traceLog("for subnode <" + vnodes[n1] + ">; parent thrunode<" + par_thruNode + "> TEMS is <" + emno[n6] + ">"); 
						nthrunode[n1] = "notMINE";
						nhostname[n1] = "notAvail";
						nsubnode[n1] = "N";	
					}

				}
//				traceLog("\t\thostname<" + nhostname[n1] + ">");					
	
			}
			catch(e)
			{
				traceLog("\t\te.message<" + e.message + "> for n1=" + n1);
			}
//			traceLog("\t\tn1=" + n1);
		}
	
		nodeslen= vnodes.length;		// count of 'online' nodes for a TEMS
// END new code from itmsuper.htm 
	
		try {
			rsitstart = ";";
			rsitlen = 0;
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT SITNAME, COUNT(DELTASTAT)  FROM O4SRV.ISITSTSH AT('" +  temno[n6] +  "') WHERE NODE = '" + temno[n6] + "' AND DELTASTAT <> 'P' GROUP BY SITNAME]]></sql> </CT_Get>";
			tprint();
			presptime = (parseInt((new Date).getTime())- resptime) /1000;
			rows = xmle.getElementsByTagName('ROW');
			rowno = rows.length;
			rsitlen = rowno;
	   
			for(n4 = 0 ; n4 < rowno; n4++) {
				rsitstart += rows[n4].childNodes[0].childNodes[0].nodeValue + "; ";
			}
		}
		catch(e) {
			rsitlen = 0;
		}  
	
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT OBJNAME,NODEL  FROM O4SRV.TOBJACCL AT(" + "'" + temno[n6] + "'" + ") WHERE SYSTEM.PARMA(" + '"QIBNODE","' + temno[n6] + '",32' + ")  AND ((OBJNAME > 'AA' AND OBJNAME < 'ZZ') OR  (OBJNAME > 'aa' AND OBJNAME < 'zz')) ORDER BY NODEL]]></sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
	  	rowno = rows.length; 
		remdist = new Array;
		opdist = new Array;
		
		try {
			if (rowno > 0) {
				var remrowno = 0;
				curnode = "";
				
				for(n4 = 0 ; n4 < rowno; n4++) {
					if (curnode == rows[n4].childNodes[1].childNodes[0].nodeValue)  {
						cursit = rows[n4].childNodes[0].childNodes[0].nodeValue;
						cursitx = ";" + cursit + ";";
						var rex = new RegExp(cursitx);
						comp = rex.exec(notAutoStartedstr);
						
						if (comp)  { 
							continue;
						}
						
						ncurnode = rows[n4].childNodes[1].childNodes[0].nodeValue;
						remrowno++; 
						
						if (!remdist[n9]) { 
							remdist[n9] =  curnode + ";"; 
							remdist[n9] +=  cursit + ";"; 
							continue; 
						}
						else { 
							remdist[n9]  += cursit + ";"; 
							continue; 
						}
					}
					else {
						ncurnode = rows[n4].childNodes[1].childNodes[0].nodeValue;
						cursit = rows[n4].childNodes[0].childNodes[0].nodeValue;
						astr = ";" + ncurnode + ";";
						blen = vnodestr.split(astr)[0].split(";").length;
						
						if (nodeslen < blen) { 
							curnode = " ";
							continue;
						}
	
						n9 = blen; 
						curnode = ncurnode;
					}
	
					remrowno++; 
					
					if (!remdist[n9]) {   
						remdist[n9] =   curnode + ";"; 
						remdist[n9] +=  cursit + ";"; 
					}
					else { 
						remdist[n9]  += cursit + ";"; 
						continue; 
					}
				} 
			}
		}
		catch(e) {}

		distByTemsHdr = "<b>There are " + addCommas(onlineNodeCnt_withSits)  + " Online Agents with Autostart Situations ( " + addCommas(onlineSubnodeCnt_withSits) + " <i>are agent subnodes</i> );";	 		

		if (temno[n6] == xname ) {
			distByTemsHdr += "<b> " + temstype + " Distributions = " + addCommas(remrowno) +  "</b>";	 
		}
		else { 
			distByTemsHdr += "<b> " + temstype + " Distributions = " + addCommas(remdist.length)  + " Agents (" + addCommas(remrowno) + " Distributions)</b>";	 
		}
		
		distByTemsBdy += "<table  cellspacing='0' style='border:1 solid black'>";
		remno = 0;
		oldhubno = 0;  
		oldremno = 0;

		for (n1= 1; n1 < (nodeslen+1); n1++) {			// for each agent 
		  	//  try {
			if ((!remdist[n1])&&temno[n6]==xname) 
				{ continue; }

			if ( nthrunode[n1-1] == "notMINE") {
				continue;
			}
							
			htmlstr2 = "";
			htmlstr3 = "";
			tstr = "";
			rowno = 0;
			ohub = vnodes[n1-1];
			asfstr = ohub + ";*****;";
		
			try {
				asfstr = ohub + ";*****;";
				xhub = ";" + ohub + ";";
				affno =  affnostr.split(xhub)[1].split(";")[0];
				asfstr = ohub + ";**" + affno + "***;";
				asfstr = affsit[affno] + ";";
			}
			catch(e) {}
			
			hubnovr = asfstr.split(";");
			// traceLog("asfstr <" + asfstr + ">");			
			// traceLog("hubnovr <" + hubnovr + ">");
			//   gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT MSGTEXT,ID FROM O4SRV.OPLOG AT(" + "'" + temno[n6] + "'" + ") WHERE (ID='KRAIRA001' OR ID='KRAIRA000') AND ORIGINNODE = '" + ohub + "' </sql> </CT_Get>";
			//   tprint();
			//   rows = xmle.getElementsByTagName('ROW');
			//   rowno = rows.length;
			//try {
			//for(n4 = 0 ; n4 < rowno; n4++) {
			//xstr = rows[n4].childNodes[0].childNodes[0].nodeValue;
			//ystr = rows[n4].childNodes[1].childNodes[0].nodeValue;
			//if (xstr.split("UADVISOR").length >1 ) { continue; }
			//if (xstr.split("HEARTBEAT").length >1 ) { continue; }
			//WScript.Echo(xstr);
			//try {
			//if ( ystr == 'KRAIRA000') {
			//tstr += xstr.split("Enterprise situation")[1].split(",")[0];
			//} else {
			//bstr = xstr.split("Enterprise situation")[1].split(",")[0];
			//tstr = tstr.replace(bstr," ");
			//}
			//} catch(e) { 
			// WScript.Echo(e.message);
			//}
			//}
			//} catch(e) {}
			
			tstr = "";
			rowno = hubnovr.length - 1;
			
			if (rowno > 1 ) { 
				tstr = hubnovr[0];
				htmlstr3 += "<tr><th>" +  (rowno -1) + " Situations  </th><td><br/>";
//traceLog("autoStartstr <" + autoStartedstr + ">  rsitstart <" + rsitstart + ">");		
				for (n7=1;n7< rowno; n7++) {
					try {
						var rex = new RegExp(hubnovr[n7]);
						comp2 = rex.exec(autoStartedstr);
						comp = rex.exec(remdist[n1]);
//traceLog("hubnovr[" + n7 + "] <" + hubnovr[n7] + ">   remdist[" + n1 + "] <" + 	remdist[n1] + ">");					
						if (comp) { 
							bcol = LIGHT_GREEN;			
							comp1 = rex.exec(rsitstart);

							if ((comp1)||(!comp2)) {
								bcol = LIGHT_GREEN; 		
							}
							else { 
								if (hubnovr[n7].substring(0,8) == "UADVISOR") 
									{ continue; }
								
								bcol = LIGHT_YELLOW; 	
								htmlstr4 += "<b style= 'background-color:" + bcol + "'>" + badno + "." + hubnovr[n7]  + "</b> ";
								raddista[radno] = hubnovr[n7]  + ";" + temno[n6]  + ";NotStarted ";
						//		traceLog("raddista[" + radno + "] <" + raddista[radno] + ">"); 
								radno++;
							}
		
							htmlstr3 += "<b style= 'background-color:" + bcol + "'>" + hubnovr[n7] + "</b> ; " ;
		 				}
		 				else { 
							bcol = LIGHT_RED; 	 
							baddista[badno] = hubnovr[n7] + ";" + tstr + ";" + temno[n6] + ";  " ;
							badno++;
							htmlstr3 += "<b style= 'background-color:" + bcol + "'>" + hubnovr[n7] + "</b> ; " ;
							continue;
						} 
		
						//if (rsitlen  < 2) { continue; }
		
						sitx = hubnovr[n7];
						//if (sitx.substring(0,8) == "UADVISOR") { continue; }
						//if (dthrustr.split(tstr).length > 1) { continue; }
					}
					catch(e) {}
		
				}
		
				htmlstr3 += "</td></tr>"; 
			}
			else {
				try {
					if (remdist[n1]) {
					//	traceLog("remdist[" + n1 + "] <" + remdist[n1] + ">");
						msn =  remdist[n1].split(";")[0];
						sitList = remdist[n1].substring((msn.length + 1));
						htmlstr3 += "<tr><th>Distributed to / Not Started Situations</th><td>" + msn + " / " + sitList + "</td></tr>";
					} 
				}
				catch(e) {}
		
			}
		
			bcol = LIGHT_RED;	
			
			if (htmlstr3) { 
				xstr = ";;" + vnodes[n1-1];
//				traceLog("xstr <" + xstr + ">");
//				traceLog("nodesavstr <" + nodesavstr + ">");
		 		try {
					yspl = (nodesavstr.split(xstr)[1]).split(";");
					yspl1 = formatDate(yspl[1]);
					yspl2 = yspl[2];
				}
				catch(e) {
					yspl1 = " ";
					yspl2 = " ";
				}
		
				if (nsubnode[n1-1] == "N" )
					msn = "MSN";
				else
					msn = "MSN (subnode)";	
					
				distByTemsBdy += "<tr style='height:50'><th><table style='border:1 solid black'><tr><td style='border:1 solid #666699;width:75'><samp>" + msn + "</samp></td><td style='border:1 solid #666699;background-color:" + SKY_BLUE + ";width:135'><b>" +  vnodes[n1-1] + "</b></td></tr>";
				distByTemsBdy += "<tr><td style='border:1 solid #666699;width:75'><samp>ProdCode, Vers</samp></td><td style='border:1 solid #666699;background-color:" + SKY_BLUE + ";width:135'><b>" + nproduct[n1-1] + ", " + nversion[n1-1]  + "</b></td</tr>";
				distByTemsBdy += "<tr><td style='border:1 solid #666699';width:75><samp>Hostname</samp></td><td style='border:1 solid #666699;background-color:" + SKY_BLUE + ";width:135'><b>" + nhostname[n1-1] + "</b></td></tr>";
				distByTemsBdy += "<tr><td style='border:1 solid #666699';width:75><samp>Parent</samp></td><td style='border:1 solid #666699;background-color:" + SKY_BLUE + ";width:135'><b>" + nthrunode[n1-1] + "</b></td</tr>"; 	// </table></th><td  style='width:800'><table cellspacing='0' style='border:1 solid black;width:800'>" + htmlstr3 + "</table></td></tr>";	
				distByTemsBdy += "<tr><td style='border:1 solid #666699';width:75><samp>Last Switch</samp></td><td style='border:1 solid #666699;background-color:" + SKY_BLUE + ";width:135'><b>" + yspl1 + "</b></td</tr></table></th><td  style='width:800'><table cellspacing='0' style='border:1 solid black;width:800'>" + htmlstr3 + "</table></td></tr>";					
//				traceLog("nthrunode[n1-1] <" + nthrunode[n1-1] + ">  yspl2 <" + yspl2 + ">");
			}
		
			htmlstr1 = "";
			htmlstr2 = "";
			htmlstr3 = "";
		
			//} catch(e) {  }
		}  // for each Agent
		
		distByTemsBdy += "</table>";
		presptime = (parseInt((new Date).getTime())- resptime) /1000;
		distByTemsHdr += "<b>;  Analysis Time = " + presptime + " seconds</b><br/>";
		botstr32 += distByTemsHdr + distByTemsBdy;
		
		botstr32 += "</br><h4>The following situations are started at " + temstype + " <font color=\"blue\">" +  temno[n6] + "</font></h4><b>" +  rsitstart +  "</b>";
		distByTemsHdr = "";
		distByTemsBdy = "";
		//} catch(e) {}
	} //  For each tems
	
	botstr32 = botstr32.replace(/[\r\n]/g, "");
	misdist = "";
	misdista = "";
	misdistb = "";
	newstr = ";";	

	try {
		if (baddista.length > 0) {
			for (n7 = 0; n7 < baddista.length; n7++) {
				curnode = baddista[n7]; 
				astr = curnode.split(";")[3];
				dno++; 
				misdistb += "<tr style='background-color:#ffaaaa'><th style='background-color:#fefefe' >" + dno + "</th><td  style='background-color:#ffaaaa'>" + curnode.split(";")[2] + "</td><td  style='background-color:#ffaaaa'>"  + curnode.split(";")[1] + "</td><td  style='background-color:#ffaaaa'>" + curnode.split(";")[0] + "</td></tr>" ;  
				missedcsv = curnode.split(";")[2] + ","  + curnode.split(";")[1] + "," + curnode.split(";")[0] + "," ;  
				file7.WriteLine (missedcsv); 
				
				if (sendevt) { 
					sendevts(curnode); 
				}
			}
		}
		
		if (raddista.length > 0) {
			for (n7 = 0; n7 < raddista.length; n7++) {
				curnode = raddista[n7]; 
				newsit = curnode.split(";")[0];
				
				if (newstr.split(newsit).length == 1) { 
					newstr += newsit + ";";
					misdista += "<tr style='background-color:#ffaaaa'><th style='background-color:#ffaaaa'>" + (n7+1) + "</th><td>" + curnode.split(";")[1] + "</td><td  style='background-color:#ffaaaa'>"   + newsit + "</td></tr>" ;  
				}

				missedcsv = curnode.split(";")[2] + ","  + curnode.split(";")[1] + "," + curnode.split(";")[0] + "," ;  
				file7.WriteLine (missedcsv); 
				if (sendevt) { 
					sendevts(curnode);
				}
			}
		}
 
		if (misdistb) {
			misdist = "<br/><h4><font color=\"brown\">Missing Distributions</font></h4><table  cellspacing='0' style='border:1 solid black'>"; 
			misdist += "<tr><th></th><th>TEMS Name</th><th>Managed System Name</th><th>Situation Name</th></tr>" ;
			misdist += misdistb +  "</table>"; 
		}
		else { 
			misdist = ""; 
		}
			
		if (misdista) {
			misdist += "<h4>Not Started at TEMS Situations/Error Situations (situations have *YES for Automatic start) </h4><table  cellspacing='0' style='border:1 solid black'>" + misdista + "</table>";
		}

		if (madno >1 ) {
			misdist = "<h4>" + maddist.length + " Missing Overrides </h4><table  cellspacing='0' style='border:1 solid black'><tr><th>TEMS</th><th>AGENT</th><th>OVERRIDE ITEM</th></tr>";
			
			for (n7 = 0; n7 < maddist.length; n7++) {
				try {
					curnode = maddist[n7]; 
					misdist += "<tr style='background-color:#ffaaaa'><td>" + curnode.split(";")[2] + "</td><td>"  + curnode.split(";")[1] + "</td><td>" + curnode.split(";")[0] + "</td></tr>" ;  
				}
				catch(e) {}
			}
			misdist += "</table></br>";
		} 
	}
	catch(e) {
		misdist += "<b>" + e.message + "</b>";
	}

	presptime = (parseInt((new Date).getTime())- xresptime) /1000;
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT TABLENAME, MAX(GBLTMSTMP), MIN(GBLTMSTMP), COUNT(OPERATION) FROM O4SRV.TEIBLOGT WHERE OPERATION ='I' AND TABLENAME = '5529' GROUP BY TABLENAME </sql></CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		cycend = rows[0].childNodes[1].childNodes[0].nodeValue;
		cycstart = rows[0].childNodes[2].childNodes[0].nodeValue;
		dminutes(cycend,cycstart);
	}
	catch(e) {}

	dhrs = (dmin/60).toFixed(2);
	hstr1 = "<center><b>" + today +  "</b></center>";
	hstr1 += "<b>Total Analysis time : " + presptime + " seconds ; " + addCommas(rows[0].childNodes[3].childNodes[0].nodeValue) + " Agent Switches in " + addCommas(dhrs) + " hours</b><br/>"; 
	
	try {
		if (muptime) {
			if (parseInt(muptime) > parseInt(huptime)) { 
				act1 =""; act2 = " ((Active)) " ;
			}
			else { 
				act2 =""; act1 = " ((Active)) " ;
			}
			hstr1 += "<b>Primary " + act1 + " HUB Uptime = " + addCommas(huptime) + " seconds. ; Mirror " +  act2 + " HUB Uptime =  " + addCommas(muptime) + " seconds</b>";
		}
	}
	catch(e) {}
		
	traceLog("taudit.js::distribute() EXIT");
}
 
function sendevts(vdist) 
{
	traceLog("taudit.js::sendevts() ENTRY");	
	var xdist = vdist;
	gpayload = "<CT_Alert><name>MissingDistributions</name><source>" + xdist.split(";")[1]  + "</source><item>" + xdist.split(";")[0] + "</item><userid>" + hu + "</userid><password>" + hp + "</password> </CT_Alert>";
	xmlhttp.open("POST", url, false);
	xmlhttp.setRequestHeader("MessageType", "CALL")
	xmlhttp.setRequestHeader("Content-Type", "application/xml; charset=utf-8")
	xmlhttp.setOption(2,13056);
	xmlhttp.send(gpayload); 
	traceLog("taudit.js::sendevts() EXIT");	
}


function iwareuptime(sql) 
{
	traceLog("taudit.js::iwareuptime() ENTRY");	
	var value, colNum, row;
	var totRows  = new Array;
	var rowArray = new Array;

	oConn.CommandTimeout = 200;
	xmlstr = "";
	xmlstr += "<REQUEST><TABLE><OBJECT>uptime</OBJECT><today>" + gbltime + "</today><DATA>";
     	
     	try { oRs.Close();} 
     	catch(e) {}
	
	try {oConn.Close();} 
	catch(e) {}
	
	try {
		oConn.Open(wserver, wu, wp);
		sql = sql.replace(/x0s/g,"/");
		sql = sql.replace(/x0p/g,"%");
		oRs=oConn.Execute(sql);
	}
	catch(e) { 
		xmlstr += "<ERROR>" + e.message + "</ERROR></DATA></TABLE></REQUEST>";
	}
	
	try {
		olduptime = 0;
		oldtime = " ";
		oldms = "";
		
		while (!oRs.eof) { 
			if (oldms != oRs(1)) { 
				olduptime = parseInt(oRs(2));
				oldtime = "" + oRs(0);oldms = "" + oRs(1); 
				oRs.MoveNext() ; 
				continue;
			}
			
			if (parseInt(oRs(2)) >= olduptime ) { 
				olduptime = parseInt(oRs(2));oldtime = "" + oRs(0);oldms = "" + oRs(1);
			}
			else {  
				xmlstr += "<ROW><c1>" + oldms + "</c1><c2>Y</c2><c3>" +  oldtime + "</c3><c4>" + olduptime +  "</c4></ROW>";
				xmlstr += "<ROW><c1>" + oRs(1) + "</c1><c2>N</c2><c3>" +  oRs(0) + "</c3><c4>" + oRs(2) +  "</c4></ROW>";
				olduptime = parseInt(oRs(2));
				oldtime = oRs(0);oldms = oRs(1);
			}

			oRs.MoveNext() ; 

		}
	}
	catch(e) {}
	
	xmlstr += "</DATA></TABLE></REQUEST>";
	file5str += "<tr><th></th><th><xmp>" + xmlstr +  "</xmp></th></tr>";
	xmlDoc.loadXML(xmlstr);

	try {
		oRs.Close();
		oConn.Close();
	}
	catch(e) {}
 	traceLog("taudit.js::iwareuptime() EXIT");	
} 


//beh var xnum = 0;
function perc(vnum) 
{
	if (parseInt(vnum)) {
		ynum = dayno * 1440;
		xnum =  parseInt((ynum - vnum ) * 10000/ynum)/100; 
		backcol = "yellow"; 
	}
	else { 
		xnum = 100; 
		backcol = "#f0faf0";
	}
	xnumstr = "<b>" + xnum + "<b>";
}

function iaplot(xar,yar1,yar2,yar3) {
	traceLog("taudit.js::iaplot() ENTRY");	
	var hstra = new Array;
	
	for (i=0;i <xar.length; i++) {
		nn = 0;hstra[i]="";
		
		if (yar1[i]) {
			perc(yar1[i]);
			xnn = (100 - xnum) * 6; if (xnn < 1) {xnn = 5;}
			nn += xnn;  }
			
			if (yar2[i]) {
				perc(yar2[i]);
				xnn = (100 - xnum) * 6; if (xnn < 1) {xnn = 5;
			}
			
			hstra[i]  += '<td title="Unscheduled Heartbeat Outage for ' + xar[i] + ' is ' + parseInt((100 - xnum)*1000)/1000 + ' percent"  style="width:80;background-color:#ff8888" ></td>';
			nn += xnn; 
		}

		if (yar3[i]) {
			perc(yar3[i]);
			xnn = (100 - xnum) * 6; if (xnn < 1) {xnn = 5;
		}
		
		hstra[i]  +='<td title="Unscheduled System Recycle Outage for ' + xar[i] + ' is ' + parseInt((100 - xnum)*1000)/1000 + ' percent"  style="width:80;background-color:red"></td>';
		nn += xnn; }
		xnn = 600 - nn;
		hstra[i]  += '<td title="Availability for ' + xar[i] + ' is ' + (xnn/8) + ' percent"  style="width:80;background-color:#aaffaa"></td>';
	} 
	
	htmlstr = "<h4>Outage Summary </h4><table style='border:0'>";
	
	for (i=0;i <xar.length; i++) {
		htmlstr += "<tr><td style='width:200'>" + xar[i] + "</td>" + hstra[i] + "</tr>" ;
	} 
	
	htmlstr += "</tr></table>";
	traceLog("taudit.js::iaplot() EXIT");	
}

function iaplot1(xar,yar1,yar2,yar3) 
{
	traceLog("taudit.js::iaplot1() ENTRY");		
	var hstra = new Array;
	ii = 0; grpstr = "";var bnn = 0;var cnn =0;
	
	for (i=0;i <vnodelistn.length; i++) {
		if (grpstr == vnodelistl[i]) {} 
		else { 
			xnn = 600 - nn;
			vgrp[ii] = grpstr;
			
			if ((cnn)||(bnn)) { 
				hstra[ii]  += '<v:line style="z-index:2" title="Availability for ' + vnodelistl[i-1] + '"  strokeweight="14px"  strokecolor="#aaffaa" from="' + nn +  'px, 0px" to="' + (nn + xnn/dayno) + 'px;0px"></v:line></div></td></tr><tr><td></td><td>' + cnn + ' Unscheduled Outage Minutes.</td></tr>';
			}
			else { 
				// hstra[ii]  += '<v:line title="Availability for ' + i + ' is 100 percent"  strokeweight="14px"  strokecolor="#aaffaa" from="0px;0px" to="600px;0px"></v:line></td></tr><tr><td> </td><td>100% Available</td></tr>';
			}
			
			bnn = 0; cnn =0;
			ii++;
			nn1 = 0; nn2 = 0; nn3 = 0;
			hstra[ii]=""; 
			grpstr = vnodelistl[i]  ; 
		}
		
		var nm = vnodelistn[i];
		
		if (yar1[nm]) {
			bnn += yar1[nm];
			perc(yar1[nm]);
			xnn = yar1[nm];
			//nn1 += xnn;  
		}

		if (yar2[nm]) {
			cnn += yar2[nm];
			perc(yar2[nm]);
			xnn = yar2[nm];
			hstra[ii]  += '<v:line style="z-index:2" title="Unscheduled Heartbeat Outage for ' + xar[nm] + ' is ' + yar2[nm] + ' minutes"  strokeweight="14px"  strokecolor="#ff8888" from="' + nn2 +  'px, 0px" to="' + (nn2 + xnn/dayno) + 'px;0px"></v:line>';
			//nn2 += xnn;
 		}

		if (yar3[nm]) {
			cnn += yar3[nm];
			perc(yar3[nm]);
			xnn = yar3[nm];
			hstra[ii]  +='<v:line style="z-index:2" title="Unscheduled System Recycle Outage for ' + xar[nm] + ' is ' + yar3[nm] + ' minutes"  strokeweight="14px"  strokecolor="red" from="' + nn3 +  'px, 0px" to="' + (nn3 + xnn/dayno) + 'px;0px"></v:line>';
			//nn3 += xnn; 
		}
	} 
	
	if ((cnn)||(bnn)) { 
		xnn = 600 - nn;
		hstra[ii]  += '<v:line style="z-index:2" title="Availability for ' + vnodelistl[vnodelistn.length-1] + '"  strokeweight="14px"  strokecolor="#aaffaa" from="' + nn +  'px, 0px" to="' + (nn + xnn/dayno) + 'px;0px"></v:line></td></tr><tr><td></td><td>' + cnn + ' Unscheduled Outage Minutes.</td></tr>';
	}
	else {
		//hstra[ii]  += '<v:line title="Availability for ' + i + ' is 100 percent"  strokeweight="14px"  strokecolor="#aaffaa" from="0px;0px" to="600px;0px"></v:line></td></tr><tr><td> </td><td>100% Available</td></tr>';
	}
	
	htmlstr = "<table style='border:0'>"; 
	
	for (i=1;i <vgrp.length; i++) {
		if (!hstra[i]) 
			{ continue; }
			
		htmlstr += "<tr><td style='width:200'><center>" + vgrp[i] + "</center></td><td><div style='width:800;background-color:#aaffaa'>" + hstra[i] ;
	} 
	
	htmlstr += "</tr></table>";
	traceLog("taudit.js::iaplot() EXIT");	
}

//beh var dayno = (new Date).getDate() + 1;

function iaplot2(xar,yar1,yar2,yar3) 
{
	traceLog("taudit.js::iaplot2() ENTRY");		
	var hstra = new Array;
	ii = 0; grpstr = "";
	var bnn = 0;var cnn =0;
	
	for (i=0;i < dayno; i++) {
		nn1 =0;
		nn2 =0; 
		nn3 = 0;
		bnn = 0; 
		cnn =0;
		hstra[i] = "";
		
		if (dsch[i]) {
			bnn += dsch[i];
			perc(dsch[i]);
			xnn = dsch[i];
			//nn1 += xnn;  
		}
		
		if (dhrt[i]) {
			cnn += dhrt[i];
			perc(dhrt[i]);
			xnn = dhrt[i];
			hstra[i]  += '<v:line style="z-index:2" title="Unscheduled Heartbeat Outage for ' + i + ' is ' + dhrt[i] + ' minutes"  strokeweight="14px"  strokecolor="#ff8888" from="' + nn2 +  'px, 0px" to="' + (nn2 + xnn/dayno) + 'px;0px"></v:line>';
			//nn2 += xnn; 
 		}
		if (dupt[i]) {
			cnn += dupt[i];
			perc(dupt[i]);
			xnn = dupt[i];
			hstra[i]  +='<v:line style="z-index:2" title="Unscheduled System Recycle Outage for ' + i + ' is ' + dupt[i] + ' minutes"  strokeweight="14px"  strokecolor="red" from="' + nn3 +  'px, 0px" to="' + (nn3 + xnn/dayno) + 'px;0px"></v:line>';
			//nn3 += xnn;
 		}
		xnn = 600 - nn;

		if ((cnn)||(bnn)) { 
			hstra[i]  += '</div></td></tr><tr><td></td><td>' + cnn + ' Unscheduled Outage Minutes.</td></tr>';
		}
		else {
			//hstra[i]  += '<v:line style="z-index:2" title="Availability for ' + i + ' is 100 percent"  strokeweight="14px"  strokecolor="#aaffaa" from="0px;0px" to="600px;0px"></v:line></div></td></tr><tr><td> </td><td>100% Available</td></tr>';
		}
	}

	htmlstr = "<table style='border:0'>"; 
	
	for (i=1;i < dayno ; i++) {
		htmlstr += "<tr><td style='width:200px;'>" + i + "</td><td><div style='width:800;background-color:#aaffaa'>" + hstra[i] ;
	} 
	htmlstr += "</tr></table>";
	traceLog("taudit.js::iaplot2() EXIT");	
}

function iaplot3(xar,yar1,yar2,yar3) 
{
	traceLog("taudit.js::iaplot3() ENTRY");		
	var hstra = new Array;
	ii = 0; grpstr = "";
	var bnn = 0;
	var cnn =0;
	
	for (i=0;i <30; i++) {
		nn =0;
		bnn = 0; cnn =0;
		hstra[i] = "";
	
		if (dsch[i]) {
			bnn += dsch[i];
			perc(dsch[i]);
			xnn = (100 - xnum) * 6; 
			if (xnn < 1) 
				{xnn = 5;}
			nn += xnn;  
		}
			
		if (dhrt[i]) {
			cnn += dhrt[i];
			perc(dhrt[i]);
			xnn = (100 - xnum) * 6; 
			if (xnn < 1) 
				{xnn = 5;}
			hstra[i]  += '<td title="Unscheduled Heartbeat Outage for ' + i + ' is ' + parseInt((100 - xnum)*1000)/1000 + ' percent"  style="background-color:#ff8888"></td>';
			nn += xnn; 
		}
		
		if (dupt[i]) {
			cnn += dupt[i];
			perc(dupt[i]);
			xnn = (100 - xnum) * 6; 
			if (xnn < 1) 
				{xnn = 5;}
			hstra[i]  +='<td title="Unscheduled System Recycle Outage for ' + i + ' is ' + parseInt((100 - xnum)*1000)/1000 + ' percent"  style="background-color:red"></td>';
			nn += xnn; 
		}
		
		xnn = 600 - nn;

		if ((cnn)||(bnn)) { 
			hstra[i]  += '<td title="Availability for ' + i + ' is ' + (xnn/8) + ' percent"  style="background-color:#aaffaa" ></td></tr><tr><td></td><td><b>' + cnn + ' Unscheduled Outage Minutes  ..</b></td></tr>';
		} 
		else {
			hstra[i]  += '<td title="Availability for ' + i + ' is 100 percent"  style="background-color:#aaffaa" ></td></tr><tr><td></td><td></td></tr>';
		}
	}

	htmlstr = "<table style='border:0'>"; 
	
	for (i=1;i <30; i++) {
		htmlstr += "<tr><td style='width:200'><center>" + i + "</center></td><td>" + hstra[i] ;
	} 
	
	htmlstr += "</tr></table>";
	traceLog("taudit.js::iaplot3() EXIT");	
}

function longavail() 
{
	traceLog("taudit.js::longavail() ENTRY");	
	gpayload = "<CT_Get><userid>" +  hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql>SELECT NODELIST, NODE  FROM O4SRV.TNODELST  WHERE NODETYPE = 'M'  ORDER BY NODELIST,NODE ASC</sql></CT_Get>";
	tprint();    

	oldno = 0;
	oldmsl = "";  
	nodeslen = vnodes.length;
	var rows = xmle.selectNodes("//ROW");
	
	for(i=0,node=rows.nextNode(); node!=null; node=rows.nextNode(),i++) {
		nodec= node.childNodes;
		vnodelistl[i] = nodec[0].text;
		
		for (n=oldno;n < nodeslen; n++) {
			if (oldmsl == vnodelistl[i] ) {} else { oldno = 0; oldmsl = vnodelistl[i]; } 
			if (nodec[1].text == vnodes[n]) { 
				oldno = n; 
				vnodelistn[i] = n;
				break;
			}
		}
	}
	
	for (i=0; i <31; i++) {
		dhrt[i] = 0;
		dupt[i] = 0;
		dsch[i] = 0;
	} 
		 
	presptime0 = (parseInt((new Date).getTime())- resptime) /1000;
	resptime = parseInt((new Date).getTime());
	begind = gbltime;
	
	try { oRs.Close();} catch(e) {}
	try { oConn.Close();} catch(e) {}
	try {
		sqlstr = 'SELECT "Managed_System","Status","Global_Timestamp" FROM "' + schema + '"."Status_History" WHERE "Global_Timestamp" > ' + "'" + gbltime.substring(0,5) + "'" +  ' AND "Managed_System" > ' + "'A'"  +' AND "Situation_Name" = ' + " 'MS_Offline' " + ' ORDER BY "Global_Timestamp" ';
		oConn.Open(wserver, wu, wp);
		oRs=oConn.Execute(sqlstr);
 
		while (!oRs.eof) { 
			xstr = "" + oRs(0);
			begind = "" + oRs(2);
			
			for (nn = oldno; nn < nodeslen; nn++) {
				if (vnodes[nn] > xstr) { break; }
				if (xstr == vnodes[nn]) {
					oldno = nn;
					if (oRs(1)=="Y") { 
						vhrtp[nn] = "" + oRs(2); 
						break; 
					}  
					if (!vhrtp[nn]) { 
						break; 
					}	
	startd = vhrtp[nn]
 	 ystr = vhrt[nn];
	 dminutes(begind,startd);
	 if (dmin < 5) { break; }
         if (vtot[nn]) { tno = parseInt(vtot[nn]) + dmin; } else { tno = dmin; }
         vtot[nn] = tno; 
	 xstr = 	"Heartbeat Outage on: " + xstr + " at " + formatDate(startd) +  " for " + dmin + " minutes.";			 
	 if (ystr) { 
	 ystr += "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &delta; </a>";
	 } else { 
	 ystr =  "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &delta; </a>";
	 }
	 vhrt[nn] = ystr;
	 
	 nhrt++;
     nhrtn += dmin;
	 vhrtn[nn] += dmin;
	var dn = parseInt(startd.substring(5,7));
	if (dn == 0) { dn = parseInt(startd.substring(6,7)); }
	 vhrtp[nn] = 0;
	 dhrt[dn] += dmin;
	 break;
     } else {
	}
  
  }
    oRs.MoveNext() ; 
	}



	 } catch(e) {
file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; 
	 }
	 
	 
gpayload = "<CT_Get><userid>" +  hu + "</userid><password>" + hp + "</password><table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT ORIGINNODE,DELTASTAT,GBLTMSTMP FROM O4SRV.TSITSTSH WHERE GBLTMSTMP > " + "'" + begind + "'"  + " AND ORIGINNODE > 'A' AND STRSCAN(SITNAME, 'ff') = 1 ORDER BY ORIGINNODE, GBLTMSTMP ASC ]]></sql></CT_Get>";
tprint(); 
try {

 var rows = xmle.selectNodes("//ROW");
 oldno = 0; 
 for(i=0,node=rows.nextNode(); node!=null; node=rows.nextNode(),i++) {
  nodec= node.childNodes;
  xstr = nodec[0].text;
  begind = nodec[2].text;
   for (nn = oldno; nn < nodeslen; nn++) {
   if (vnodes[nn] > xstr) { break; }
    if (xstr == vnodes[nn]) {
	oldno = nn;
    if (nodec[1].text=="Y") { 
	vhrtp[nn] = begind; 
	break; }  
    if (!vhrtp[nn]) { 
	     break; }
     startd = vhrtp[nn];		 
 	 ystr = vhrt[nn];
	 dminutes(begind,startd);
	 	 if (dmin < 5) { break; }
         if (vtot[nn]) { tno = parseInt(vtot[nn]) + dmin; } else { tno = dmin; }
         vtot[nn] = tno; 
	 xstr = "" + i + ": Heartbeat Outage on: " + xstr + " at " + formatDate(startd) +  " for " + dmin + " minutes";			 
	 if (ystr) { 
	 ystr += "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>";
	 } else { 
	 ystr = "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>"; }
	vhrtp[nn] = 0;
	vhrt[nn] = ystr;
		 nhrt++;
     nhrtn += dmin;
	 vhrtn[nn] += dmin;
	 var dn = parseInt(startd.substring(5,7));
	 if (dn == 0) { dn = parseInt(startd.substring(6,7)); }
	 dhrt[dn] += dmin;
	 break;
     } 
  
  }
  }

  } catch(e) {}
 
 begind = begind.substring(0,5);
 
sqlstr = 'SELECT "WRITETIME","System_Name" AS "MS","System_Uptime" AS "UP" FROM "' + schema + '"."Linux_System_Statistics" WHERE "WRITETIME" > ' + "'" + gbltime.substring(0,5) + "'" + ' ORDER BY "System_Name", "WRITETIME" ';
//xmpstr += "<sql>" + sqlstr + "</sql>";
try 
{ 
iwareuptime(sqlstr); 
 xmle = xmlDoc;
 var rows = xmle.selectNodes("//ROW");
 oldno = 0; 
 for(i=0,node=rows.nextNode(); node!=null; node=rows.nextNode(),i++) {
  nodec= node.childNodes;
  xstr = nodec[0].text;
begind = nodec[2].text;  
   for (nn=oldno; nn< nodeslen; nn++) {
   if (vnodes[nn] > xstr) { break; }
   if (xstr== vnodes[nn]) {
     oldno = nn;
     if (nodec[1].text=="Y") { vuptp[nn] = begind; break; }   
 	 ystr = vupt[nn];
	 startd = vuptp[nn];
	 dminutes(begind,startd);
         if (vtot[nn]) { tno = parseInt(vtot[nn]) + dmin; } else { tno = dmin; }
         vtot[nn] = tno;
     xstr = 	"System Recycle Outage on: " + xstr + " at " + formatDate(startd) +   " for " + dmin + " minutes";	 
	 if (ystr) { ystr += "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>"; } else { ystr = "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>"; }
	 vupt[nn] = ystr;
	 
	 nuptn += dmin;
	 nupt++; 
	 vuptn[nn] += dmin;
	 var dn = parseInt(startd.substring(5,7));
	 if (dn == 0) { dn = parseInt(startd.substring(6,7)); }
	 dupt[dn] += dmin;
	 break;
     }
   }
  }
} catch(e) {}


sqlstr = 'SELECT "WRITETIME","Server_Name" AS "MS","System_Up_Time" AS "UP" FROM "' + schema + '"."NT_System" WHERE "WRITETIME" > ' +  "'" + gbltime.substring(0,5) + "'" + ' ORDER BY "Server_Name", "WRITETIME" ';
//xmpstr += "<sql>" + sqlstr + "</sql>";
try 
{ 
iwareuptime(sqlstr); 
 xmle = xmlDoc;
//  xmpstr += xmlDoc.xml;
 var rows = xmle.selectNodes("//ROW");
 for(i=0,node=rows.nextNode(); node!=null; node=rows.nextNode(),i++) {
  nodec= node.childNodes;
  xstr = nodec[0].text;
  begind = nodec[2].text;
 for (nn=oldno; nn< nodeslen; nn++) {
    if (vnodes[nn] > xstr) { break; }
   if (xstr== vnodes[nn]) {
    oldno = nn;
     if (nodec[1].text=="Y") { vuptp[nn] = begind; break; }   
 	 ystr = vupt[nn];
	 startd = vuptp[nn];
	 dminutes(begind,startd);
     if (vtot[nn]) { tno = parseInt(vtot[nn]) + dmin; } else { tno = dmin; }
     vtot[nn] = tno;  
	 xstr = 	"System Recycle Outage on: " + xstr + " at " + formatDate(startd) +   " for " + dmin + " minutes";	 
	 if (ystr) { 
	 ystr += "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>"; 
	 } else { 
	 ystr = "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>"; 
	 }
	 vupt[nn] = ystr;
	 nuptn += dmin;
	 nupt++; 
	 vuptn[nn] += dmin;
	 dn = parseInt(startd.substring(5,7));
	 if (dn == 0) { dn = parseInt(startd.substring(6,7)); }
	 dupt[dn] += dmin;
	 break;
     }
   }
  }

 } catch(e) {
file5str += "<tr><th></th><th>" + e.message +  "</th></tr>";
  }
  sqlstr = 'SELECT "WRITETIME","System_Name" AS "MS","Up_Time" AS "UP" FROM "' + schema + '"."System" WHERE "WRITETIME" >  ' + "'" + gbltime.substring(0,5) + "'" + ' ORDER BY "System_Name", "WRITETIME" ';
 //  xmpstr += "<sql>" + sqlstr + "</sql>";
  try { 
  iwareuptime(sqlstr);
  xmle = xmlDoc;
//  xmpstr += xmlDoc.xml;
 var rows = xmle.selectNodes("//ROW");
try {

 var rows = xmle.selectNodes("//ROW");
 oldno = 0; 
 for(i=0,node=rows.nextNode(); node!=null; node=rows.nextNode(),i++) {
  nodec= node.childNodes;
  xstr = nodec[0].text;
  begind = nodec[2].text;
   for (nn = oldno; nn < nodeslen; nn++) {
   if (vnodes[nn] > xstr) { break; }
    if (xstr == vnodes[nn]) {
	oldno = nn;
    if (nodec[1].text=="Y") { 
	vhrtp[nn] = begind; 
	break; }  
    if (!vhrtp[nn]) { 
	     break; }
startd = vhrtp[nn];		 
 	 ystr = vhrt[nn];
	 dminutes(begind,startd);
	 	 if (dmin < 5) { break; }
         if (vtot[nn]) { tno = parseInt(vtot[nn]) + dmin; } else { tno = dmin; }
         vtot[nn] = tno; 
	 xstr = "" + i + ": Heartbeat Outage on: " + xstr + " at " + formatDate(startd) +  " for " + dmin + " minutes";			 
	 if (ystr) { 
	 ystr += "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>";
	 } else { 
	 ystr = "<a href='#' onclick= 'alert("  + '"' + xstr + '"' + ")' >  &nabla; </a>"; }
	vhrtp[nn] = 0;
	vhrt[nn] = ystr;
		 nhrt++;
     nhrtn += dmin;
	 vhrtn[nn] += dmin;
	 var dn = parseInt(startd.substring(5,7));
	 if (dn == 0) { dn = parseInt(startd.substring(6,7)); }
	 dhrt[dn] += dmin;
	 break;
     } 
  
  }
  }

  } catch(e) {}
} catch(e) {
file5str += "<tr><th></th><th>" + e.message +  "</th></tr>";
}
 monthar = new Array("January","February","March","April","May","June","July","August","September","October","November","December");
 htmlstr = "<h4>Unscheduled Outages for the Month:  " + monthar[(new Date).getMonth()] + " " + (new Date).getFullYear() + "</h4><table cellpadding='1' cellspacing='0' style='border:1  solid #bbbbbb;'><tr><th style='width:250'>System</th><th>ip address</th><th style='width:90;'>Heartbeat</th><th> Outage</th><th style='width:90;'>System_Recycle</th> <th>Outage</th><th>Total</th><th style='width:80'>Availability </th></tr><tr><th></th><th></th><th>No of outages</th><th>Minutes</th><th>No of outages</th><th>Minutes</th><th style='width:60;'>Outage</th><th>%</th></tr>";
 for (i=0; i< nodeslen; i++) {
 if (nip[i])   {  nipstr = "(" + nip[i] + ")"; } else { nipstr = ""; }
 if (vsch[i])  {  vschstr = vsch[i] } else { vschstr = "."; }
 if (vschn[i]) {  vschnstr = vschn[i] } else { vschnstr = "."; }
 if (vhrt[i]) {  vhrtstr = vhrt[i] } else { vhrtstr = "."; }
 if (vhrtn[i]) {  vhrtnstr = vhrtn[i] } else { vhrtnstr = "."; }
 if (vupt[i]) {  vuptstr = vupt[i] } else { vuptstr = "."; }
 if (vuptn[i]) {  vuptnstr = vuptn[i] } else { vuptnstr = "."; }
 if (vtot[i]) {  vtotstr = vtot[i] } else { vtotstr = "."; }

 perc(vtotstr);
  if (xnum == 100 ) { continue; }
 htmlstr += "<tr><td>" + vnodes[i] + "</td><td>" + nipstr + "</td><td><center>" + vhrtstr + "</center></td><td><center>" + vhrtnstr + "</center></td><td><center>" + vuptstr + "</center></td><td><center>" + vuptnstr + "</center></td><td><center>" + vtotstr + "</center></td><th style='background-color:" + backcol + "'>" + xnumstr + "</th></tr>";
 }
 htmlstr += "</table><br></br><h5>Total "  + (nsch + nupt + nhrt) + " outages = " + parseInt(nschn + nuptn + nhrtn) + " minutes.  </h5>";
 xmpstr = "";
 xmpstr += htmlstr;
 htmlstr = "";
 iaplot(vnodes,vschn,vhrtn,vuptn);
 htmlstr = "<h4>Availablilty by Resource/Maintenance  Category  for the Month:  " + monthar[(new Date).getMonth()] + " " + (new Date).getFullYear() + "</h4><table><tr><td style='width:20;background-color:green;' > </td><td>Available </td><td style='width:20;background-color:#ff8888;'></td><td>Heartbeat </td><td  style='width:20;background-color:red;'></td><td>System_Recycle</td></tr> </table>" + htmlstr;
 htmlstr = "";

 iaplot1(vnodes,vschn,vhrtn,vuptn);
 htmlstr = "<h4>Availablilty by Group/Maintenance Category for the Month:  " + monthar[(new Date).getMonth()] + " " + (new Date).getFullYear() + "</h4><FIELDSET style='top:0;width:880; margin-left:0'><LEGEND>Instructions</LEGEND><span><v:line strokeweight='8px'  strokecolor='#aaF380' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Available<v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Heartbeat Outage<v:line strokeweight='8px'  strokecolor='red' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>System Recycle Outage</span></FIELDSET>" + htmlstr;
 xmpstr += htmlstr;
 htmlstr = "";

	iaplot2(vnodes,vschn,vhrtn,vuptn);
	htmlstr = "<h4>Availablilty by Date/Maintenance Category for the Month:  " + monthar[(new Date).getMonth()] + " " + (new Date).getFullYear() + "</h4><FIELDSET style='top:0;width:880; margin-left:0'><LEGEND>Instructions</LEGEND><span><v:line strokeweight='8px'  strokecolor='#aaF380' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Available<v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Heartbeat Outage<v:line strokeweight='8px'  strokecolor='red' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>System Recycle Outage</span></FIELDSET>" + htmlstr;
	xmpstr += htmlstr; 
	htmlstr = "";
	traceLog("taudit.js::longavail() EXIT");
} 	// end of function longavail()


function tprint() 
{
	var htimet = 0;
	var htimes;	
	var tp_rows;
//	traceLog("taudit.js::tprint() ENTRY");	

	try {
		xmle = xxmle;
		
		try {
			sqlstr = gpayload.split("SELECT ");
			
			if (!sqlstr[1]) { 
				sqlstr = gpayload.split("object"); 
			}
			
			date1 = new Date; 
			file5str += "<tr><th>" + totime(date1) + " </th><td> " + sqlstr[1].replace(/SELECT/g,"") +" </td></tr>";
			file6str = " " + totime(date1) + "  ; " + sqlstr[1].split(/\</)[0] ;
			file6 = fs.OpenTextFile(path + "Taudittrace.txt", 8, true);
			file6.WriteLine(file6str);
			file6.Close(); 
		}
		catch(e) {}

		if (sqlstr.length > 1) {
			htimes= parseInt((new Date).getTime());		// 16 digit integer value			
			httpTimeout_flag = false;		
			// args are: resolveTimeout, connectTimeout,  sendTimeout, receiveTimeout
			// taudit uses 160 secs as its default value for these args
			xmlhttp.setTimeouts(httpTimeout,httpTimeout,httpTimeout,httpTimeout);	// 160000 ms = 160 secs			
			xmlhttp.open("POST", url, false);
			xmlhttp.setRequestHeader("MessageType", "CALL")
			xmlhttp.setRequestHeader("Content-Type", "application/xml; charset=utf-8")
			xmlhttp.setOption(2,13056);
	
			try {
				xmlhttp.send(gpayload); 
			}
		 	catch(e) 
		 	{
		 		sendFailed = "cannot send request to HUB; xmlhttp.send failed : error message =" + e.message;
				traceLog("taudit.js::tprint() EXIT" + sendFailed);	
				file6 = fs.OpenTextFile(path + "Taudittrace.txt", 8, true);
				file6.WriteLine(sendFailed);
				file6.Close(); 				
		 		exit;
		 	}			
			
			htimet = (parseInt((new Date).getTime())- htimes) /1000;
			
			if ( htimet > (httpTimeout/1000) )
			{
				httpTimeout_flag = true;	
			}
		}
					
		try {   
			xmle = xmlhttp.responseXML;
			tp_rows = xmle.getElementsByTagName('ROW');
			xstr = tp_rows.length; 	
		}
		catch(e) { 
			xstr = xmlhttp.responseText;
			WScript.Echo(xstr);
		}
	
		file6str = " " + xstr +" Rows";
		file6 = fs.OpenTextFile(path + "Taudittrace.txt", 8, true);
		file6.WriteLine(file6str);
		file6.Close(); 

		if (runt == "trace") {
			file6str = " " + totime(date1) + "  ; " + xmlhttp.responseText;
			file6 = fs.OpenTextFile(path + "Taudittrace.txt", 8, true);
			file6.WriteLine(file6str);
			file6.Close(); 
		}

		try {
			date1 = new Date; 
			fault = xmle.getElementsByTagName('faultstring'); 
			faultstr = fault[0].childNodes[0].nodeValue;
			file5str += "<tr><th>" + totime(date1) + " </th><td> " + faultstr + "</td></tr>"; 
		}
		catch(e) {}
	}
	catch(e) {
		date1 = new Date; 
		faultstr = e.message;
		
		if (gpayload != "Started") {
			file5str += "<tr><th>" + totime(date1) + " </th><td> " + faultstr + "</td></tr>"; 
		}
	}
//	traceLog("taudit.js::tprint() EXIT");	
}


function getibmtime(vhours) 
{
	date.setHours(date.getHours() - vhours) ;
	var endYear   = date.getFullYear() - 1900;
	var endMon    = date.getMonth() + 1;
	var endDay    = date.getDate(); 
	var endHr    = date.getHours(); 
	var endMin    = date.getMinutes(); 
	endTime = endYear   < 100 ? "0" + endYear   : "" + endYear;
	endTime    += endMon    < 10  ? "0" + endMon    : endMon;
	endTime    += endDay    < 10  ? "0" + endDay    : endDay;
	gbltime = endTime;
	  
	endTime    += endHr    < 10  ? "0" + endHr    : endHr;
	endTime    += endMin    < 10  ? "0" + endMin    : endMin;
	filetime = endTime;
}

function formatDate(vdate) 
{
	if (vdate.length < 15) 
		{ return " "; }
	try { 
		return vdate.substring(3,5) + '/' + vdate.substring(5,7) + '/' + vdate.substring(1,3) + ' ' + vdate.substring(7,9) + ':' + vdate.substring(9,11) + ':' + vdate.substring(11,13);
	}
	catch(e) { 
		return "A";
	} 
}

function formatDatm(vdate) 
{
	return vdate.substring(3,5) + '/' + vdate.substring(5,7) + '/' + vdate.substring(1,3) + '@' + vdate.substring(7,9) + ':' + vdate.substring(9,11) ;
}

function formatIBMtime(ibmTime)
{
	return ( "20" + ibmTime.substring(1,3) + ibmTime.substring(3,5) + ibmTime.substring(5,7) );
}

function addCommas(nStr)
{
	nStr += '';
	x = nStr.split('.');
	x1 = x[0];
	x2 = x.length > 1 ? '.' + x[1] : '';
	var rgx = /(\d+)(\d{3})/;
	
	while (rgx.test(x1)) {
		x1 = x1.replace(rgx, '$1' + ',' + '$2');
	}
	return x1 + x2;
}

	function mapDeltaToString(internalDelta)
	{
		var deltaStr;
		
		switch (internalDelta)
		{
			case "Y":
				deltaStr = "Raised";			//True
				break;
			case "N":
				deltaStr = "Reset/Closed";			//False
				break;
			case "A":
				deltaStr = "Acknowledged";
				break;
			case "E":
				deltaStr = "Acknowledge Retracted";
				break;
			case "S":
				deltaStr = "Started";
				break;
			case "P":
				deltaStr = "Stopped";
				break;
			case "X":
				deltaStr= "Problem";
				break;
			case "D":
				deltaStr = "Deleted";
				break;				
			default: 
				deltaStr = "Unknown";	
				break;				
		}	
		
		return deltaStr;
	}
			
function email() 
{ 
	if (euser) {
		for (var count = 0; count < euser.length; count++) {
			var euserstr = euser[count]; 
			var file = fs.OpenTextFile(path + filename, 1, true);
			var freadall = file.ReadAll();
			gpayload = '<CT_EMail> <server>' + eserver + '</server> <sender>' + euserstr + '</sender> <message><![CDATA[' + msgemail + ']]></message><receiver> ' + euserstr + '</receiver> <subject>' + subject + (new Date).toLocaleString() + '</subject><attachmenttitle>' + filename + '</attachmenttitle><request><insert><html><![CDATA[' + freadall + ']]></html></insert></request></CT_EMail>';
			xmlhttp.open("POST", url, false);
			xmlhttp.setRequestHeader("MessageType", "CALL")
			xmlhttp.setRequestHeader("Content-Type", "application/xml; charset=utf-8")
			xmlhttp.setOption(2,13056);
			xmlhttp.send(gpayload);
			xmle = xmlhttp.responseXML;
			WScript.Echo(xmle.xml);
		} 
	}
}

function totime( date ) 
{
    var endMon  = date.getMonth() + 1;
    var endDay  = date.getDate();
    var endHour = date.getHours();
    var endMin  = date.getMinutes();
    var endSec  = date.getSeconds();

                     
    bendTime    = endMon  < 10  ? "0" + endMon  : endMon;
	bendTime    += "/";
    bendTime    += endDay  < 10  ? "0" + endDay  : endDay;
	bendTime    += " ";
    bendTime    += endHour < 10  ? "0" + endHour : endHour;
	bendTime    += ":";
    bendTime    += endMin  < 10  ? "0" + endMin  : endMin;
	bendTime    += ":";
    bendTime    += endSec  < 10  ? "0" + endSec  : endSec;
    return bendTime;
}
//beh tprint();
//beh getibmtime(0);
//beh filetimen= filetime;
//beh var obj = " ";

function warehouseb(vsql,vobj) { 
try {
  var anx = 0;
  resptime = parseInt((new Date).getTime());
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
 
  botstr4 += "<b style= 'position:absolute; left:" + (leftoffset + 45) + "; top:50'>" + vobj + "</b>"; 
    botstr4 += "<div style='border:1 solid #999999;position:absolute; left:" + (leftoffset + 45) + "; top:165px; width:120px; height:410px; background-color:#ccffcc;'></div>";
  botstr4 += "<div style='border:1 solid #999999;position:absolute; left:" + (leftoffset + 45) + "; top:115px; width:120px; height:50px; background-color:lightyellow;'></div>";
  botstr4 += "<div style='border:1 solid #999999;position:absolute; left:" + (leftoffset + 45)  + "; top:65px; width:120px; height:50px; background-color:#ffcccc;'></div>";
  resptime = (parseInt((new Date).getTime())- resptime) /1000;
  while (!oRs.eof) 
  { 
    try {
    sysstr = oRs(1);
	xstr = ";" + oRs(2);
	sysstr += xstr;
    } catch(e) {}
    if (oRs(0) > 100) 
    { 
      barrels[nx] = 65;
    } 
    else 
    { 
      barrels[nx] = 565 - parseInt(oRs(0) * 5) ;
    } 
        
    if (( nx > 10 ) && (nx < 21)) 
    { 
      anx = 20 - nx; 
    }  
    else 
    { 
      anx = nx; 
    }
        
    if (oRs(0) > 90) 
    { 
      nscol = "red"; 
    } 
    else 
    { 
	   if (oRs(0) > 80) { nscol = "red" } else { 
      nscol = "gre" ; }
    }
        
    botstr4 += "<b class='" + nscol + "' onclick='javascript:alert(" + '"' +  sysstr + ":=" + oRs(0) + "% Used" + '"' + ")'  style='position:absolute;left:" + (leftoffset + 50 + parseInt(anx * 10)) + ";top:" + barrels[nx] + ";'>&nabla;</b>";
        
    if (nx == 20) 
    { 
      nx = 0; 
    }
        
    oRs.MoveNext() ;nx++; anx ++;   
  }

  if (resptime > 15) 
  { 
    backcol = "#ffaaaa"; 
  } 
  else 
  { 
    backcol = "aaffaa"; 
  }
  leftoffset += 150;
  } catch(e) { 
  }
  
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
}  //function warehouseb

function realtimeb(vsql,vobj) { 
try {
  var anx = 0;
  resptime = parseInt((new Date).getTime());
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
 
  botstr4 += "<b style= 'position:absolute; left:" + (leftoffset + 45) + "; top:50'>" + vobj + "</b>"; 
  botstr4 += "<div style='border:1 solid #999999;position:absolute; left:" + (leftoffset + 45) + "; top:165px; width:120px; height:410px; background-color:#ccffcc;'></div>";
  botstr4 += "<div style='border:1 solid #999999;position:absolute; left:" + (leftoffset + 45) + "; top:115px; width:120px; height:50px; background-color:lightyellow;'></div>";
  botstr4 += "<div style='border:1 solid #999999;position:absolute; left:" + (leftoffset + 45)  + "; top:65px; width:120px; height:50px; background-color:#ffcccc;'></div>";
  resptime = (parseInt((new Date).getTime())- resptime) /1000;
  while (!oRs.eof) 
  { 
    try {
    sysstr = oRs(1);
	xstr = ";" + oRs(2);
	sysstr += xstr;
    } catch(e) {}
    if (oRs(0) > 100) 
    { 
      barrels[nx] = 65;
    } 
    else 
    { 
      barrels[nx] = 565 - parseInt(oRs(0) * 5) ;
    } 
        
    if (( nx > 10 ) && (nx < 21)) 
    { 
      anx = 20 - nx; 
    }  
    else 
    { 
      anx = nx; 
    }
        
    if (oRs(0) > 90) 
    { 
      nscol = "red"; 
    } 
    else 
    { 
	   if (oRs(0) > 80) { nscol = "red" } else { 
      nscol = "gre" ; }
    }
        
    botstr4 += "<b class='" + nscol + "' onclick='javascript:alert(" + '"' +  sysstr + ":=" + oRs(0) + "% Used" + '"' + ")'  style='position:absolute;left:" + (leftoffset + 50 + parseInt(anx * 10)) + ";top:" + barrels[nx] + ";'>&nabla;</b>";
        
    if (nx == 20) 
    { 
      nx = 0; 
    }
        
    oRs.MoveNext() ;nx++; anx ++;   
  }

  if (resptime > 15) 
  { 
    backcol = "#ffaaaa"; 
  } 
  else 
  { 
    backcol = "aaffaa"; 
  }
  leftoffset += 150;
  } catch(e) { 
  }
  
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
}  //function warehouseb

function warehouset(vsql)  {  
  try {
  resptime = parseInt((new Date).getTime());
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
  sno = parseInt(oRs(0));
if (sno > 1) {
  try {
  s1w = "" + oRs(2);
  s1w = formatDatm(s1w);
  s2w = "" + oRs(1);
  s2w = formatDatm(s2w);
  } catch(e)   { 
  } }
  resptime = (parseInt((new Date).getTime())- resptime) /1000;
  if (resptime > 15) 
  { 
    backcol = "#ffaaaa"; 
  } 
  else 
  { 
    backcol = "aaffaa"; 
  } 
} catch(e)   { 
resptime = 0;sno =0;
}

    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
}  

function warehouseu(vsql,v2)  {  

	traceLog("taudit.js::warehouseu() ENTRY");	
  try {
	oConn.CommandTimeout = 200;
  
	try {
		oConn.Open(wserver, wu, wp);
	}
	catch (e)
	{
		traceLog("taudit.js::warehouseu() EXIT w/ ***ERROR opening Warehouse database");	
		throw e;					
	}
	
	try {	
		oRs=oConn.Execute(vsql);
	}
	catch (e)
	{
		traceLog("taudit.js::warehouseu() EXIT w/ ***ERROR executing SQL query on Warehouse database");		
		throw e;					
	}	
  
    while (!oRs.eof) {
	 xval = "" + oRs(0);
	 if (parseInt(xval))  { oRs.MoveNext() ; continue; }
	 if (xval.length < 3) { oRs.MoveNext() ; continue; } 
     htim = "" + oRs(1);


   if (htim < ebltime ) { 
   htim = "" + oRs(1);
   misstime = formatDatm(htim);
   if (!parseInt(oRs(0))) {  
    xstr = ";" + oRs(0)  + ";"; 
    xstr = xstr.replace(/ /g,""); 
	ystr = xstr + "Y";

	if (nstr.split(ystr).length > 1) {
   histdiscrepancy += "<tr><td>" + v2 + "</td><td  style='background-color:#ffaaaa'>" + oRs(0) + "</td><td>" + misstime + "</td></tr>";
   histcsv =  v2 + "," + oRs(0) + "," + misstime + ",";
   file7.WriteLine (histcsv);
   } else {
   if (nstr.split(xstr).length > 1) {
   histdiscrepancy += "<tr><td>" + v2 + "</td><td   style='background-color:#ffffaa'>" + oRs(0) + "</td><td>" + misstime + "</td></tr>";
   histcsv =  v2 + "," + oRs(0) + "," + misstime + ",";
   file7.WriteLine (histcsv);
   } else {
      histdiscrepancy += "<tr><td>" + v2 + "</td><td   style='background-color:#eeeeee'>" + oRs(0) + "</td><td>" + misstime + "</td></tr>";
   }
   }
 }
 }
     oRs.MoveNext() ;
  }
} catch(e)   { 
resptime = 0;sno =0;
}

    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
	traceLog("taudit.js::warehouseu() EXIT");	    
}  //function warehouseu

function warehousex(vsql) {
	traceLog("taudit.js::warehousex() ENTRY");		
// var oConn = WScript.CreateObject("ADODB.Connection");
  nn = 0;
  resptime = parseInt((new Date).getTime());
  oConn.CommandTimeout = 200;
  
try {
  oConn.Open(wserver, wu, wp);
}
catch (e)
{
	traceLog("taudit.js::warehousex() EXIT w/ ***ERROR opening Warehouse database");		
	wshShell.Popup("***WARNING: Unable to open Warehouse ODBC Source <" + wserver + ">\nUserID <" + wu + "> Password <" + wp + ">", 0, "Warehouse ODBC Source inaccessible");						
	return
}

try {	
  oRs=oConn.Execute(vsql);
}
catch (e)
{
	traceLog("taudit.js::warehousex() EXIT w/ ***ERROR executing SQL query on Warehouse database");						
	return
}	 
  
  while (!oRs.eof) 
  {
  kvout2[nn] = "" + oRs(0);
  kvout2[nn] = kvout2[nn].replace(/ /g, "");
   oRs.MoveNext() ;
   nn++;
   }
  kvout2len = kvout2.length;
  resptime = (parseInt((new Date).getTime())- resptime)  /1000;
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
	traceLog("taudit.js::warehousex() EXIT");	    
} 

function warehouse(vsql) {
// var oConn = WScript.CreateObject("ADODB.Connection");
	traceLog("taudit.js::warehouse() ENTRY");	
  resptime = parseInt((new Date).getTime());
  oConn.CommandTimeout = 200;

try {
  oConn.Open(wserver, wu, wp);
}
catch (e)
{
	traceLog("taudit.js::warehouse() EXIT w/ ***ERROR opening Warehouse database");		
	wshShell.Popup("***WARNING: Unable to open Warehouse ODBC Source <" + wserver + ">\nUserID <" + wu + "> Password <" + wp + ">", 0, "Warehouse ODBC Source inaccessible");						
	return
}

try {	
  oRs=oConn.Execute(vsql);
}
catch (e)
{
	traceLog("taudit.js::warehouse() EXIT w/ ***ERROR executing SQL query on Warehouse database");						
	return
}	
  while (!oRs.eof) 
  {
      newr =0;
    var  xwr = "1" + oRs(0); vout1[nn] = parseInt(xwr) -100;
    if (vout1[nn] == vout1[0]) 
    { 
      xxx = vout1[nn]; 
    }

    if (oRs(1) ) 
    { 
      vout2[nn] = " " + oRs(1); 
	  vout2[nn] = vout2[nn].replace(/ /g, "");
    }
    
    if (vout1[nn] == xxx) 
    { 
      kvout2[nnn] = vout2[nn] ; nnn++;  
    }
	
		
        
    for (var nm = 0; nm < kvout2.length; nm++ ) 
    {
      if (kvout2[nm] == vout2[nn] ) 
      {
        vout2[nn] = nm; newr = 1; 
        continue;
      } 
    }
      
    if ((newr == 0)&&(vout1[nn] != xxx))  
    { 
 //     kvout2[nnn] = vout2[nn] ; nnn++; 
      for (var mnm = 0; mnm < kvout2.length; mnm++ ) 
      { 
        if (kvout2[mnm] == vout2[nn] ) 
        {
          vout2[nn] = mnm; newr = 1; 
          continue;
        } 
      }
    }
    vout3[nn] = parseInt(oRs(2)); 
    oRs.MoveNext() ;  nn++; 
  } //while
  
  resptime = (parseInt((new Date).getTime())- resptime)  /1000;
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
	traceLog("taudit.js::warehouse() EXIT");	
}  //function warehouse


function formatDate1( date ){
  newDate = new Date( parseInt( date.substring(  0,  3 ) ,10 ) + 1900 ,
                        (parseInt( date.substring(  3,  5 ) ,10 ) -1) ,
                        parseInt( date.substring(  5,  7 ) ,10 ) ,
                        parseInt( date.substring(  7,  9 ) ,10 ) ,
                        parseInt( date.substring(  9, 11 ) ,10 ) ,
                        parseInt( date.substring( 11, 13 ) ,10 ) ,
                        0 );
  return newDate.toLocaleString();
}

function mydate( vdate ) {

  newDate = new Date( parseInt( vdate.substring(  0,  3 ) ,10 ) + 1900 ,
                      parseInt( vdate.substring(  3,  5 ) ,10 ) - 1,
                      parseInt( vdate.substring(  5,  7 ) ,10 ) ,
                      parseInt( vdate.substring(  7,  9 ) ,10 ) ,
                      parseInt( vdate.substring(  9, 11 ) ,10 ) ,
                      parseInt( vdate.substring( 11, 13 ) ,10 ) ,
                      0 );

}

function dminutes(vstr1,vstr2) {
try {
mydate(vstr1);
v1no = parseInt(newDate.getTime());
mydate(vstr2);
v2no = parseInt(newDate.getTime());
dmin = parseInt((v1no-v2no)/60000); } catch(e) { dmin = 0;}
}

//beh var outstr = "WWW";


function allwarehouse() 
{	
	traceLog("taudit.js::allwarehouse() ENTRY");	 
	botstr1 = "<div id='botdiv' style='position:absolute; top:100;visibility:hidden'>";
	row1 = "";
	
	try { 
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + '</password><table>KHD.KHDLOADST</table><sql>SELECT ORIGINNODE,DISCNX, DISC_RT, FAIL_COUNT, FAIL_RT, NODE_COUNT, ROWS_INS,ROWS_RETR, ROWS_RT,ROWS_SENT  FROM KHD.KHDLOADST WHERE SYSTEM.PARMA("NODELIST","*ALL",32) </sql> </CT_Get>';
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		rowno = rows.length;
		exported = 0;
		
		for (n1 = 0; n1 < rowno ; n1++) {
			colno = rows[0].childNodes.length;
			
			if (colno < 1 ) { continue; }
			
			if (n1==0) {
				hstr = "<tr>";
				xrow = rows[0].childNodes;
				
				for (n2 = 0; n2 < colno; n2++) {
					if (n2 == 6) { 
						exported =  xrow[n2].childNodes[0].nodeValue; 
					}
					hstr += "<th>" + xrow[n2].nodeName + "</th>";
				}
				hstr += "</tr>";
				row1 += hstr ;
			} 
			
			try {
				cstr = "<tr>";
				xrow = rows[n1].childNodes;
				
				for (n2=0; n2 < colno; n2++) {
					try {
						xstr = xrow[n2].childNodes[0].nodeValue;
						
						if ((n2 == 3)&&(xstr > 0)) { bcol = "#ffaaaa"; } else { bcol = "#aaffaa"; }
							
						if ((n2 == 7)&&(!dtotalw)) { dtotalw = parseInt(x1str); }

						if (n2 > 0) {
							x1str = addCommas(xstr);
							styleTD = "'background-color:" + bcol + ";text-align:right'";	
						}
						else {	
							x1str = xstr;
							styleTD = "'background-color:" + bcol + "'";;
						}	  
						cstr += "<td nowrap='nowrap' " + styleTD + ">" + x1str + "</td>";

					}
					catch(e) {}
				}
				cstr += "</tr>"; 
			}
			catch(e) {}
			
			row1 +=  cstr ;
		}


htmlstrwa = "<h4><font color=\"brown\">Warehouse Load Statistics/Errors</font></h4><table cellspacing='0'>" + row1 + "</table><br/>";
} catch(e) {}
row1 = "";

try {
gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + '</password><table>KSY.KSYTABLE</table><sql>SELECT  ATTRIBNAME, SUMMARIZED,SUMMFAIL,  PRUNED, PRUNEFAIL,UPDATED, CREATED,  FAILURES, STARTTIME, ENDTIME, RUNLENGTH  FROM KSY.KSYTABLE WHERE SYSTEM.PARMA("NODELIST","*ALL",32) AND SUMMARIZED > 1 ORDER BY ATTRIBNAME</sql> </CT_Get>';
    tprint();
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;
	if (dtotala) {} else { rowsa = rowno; }
for (n1 = 0; n1 < rowno ; n1++){
colno = rows[0].childNodes.length;
if (colno < 1 ) { continue; }
if (n1==0) {
hstr = "<tr>";
xrow = rows[0].childNodes;
for (n2 = 0; n2 < colno; n2++) {
hstr += "<th>" + xrow[n2].nodeName + "</th>";
}
hstr += "</tr>";
row1 += hstr ;
} 
try {
cstr = "<tr>";
xrow = rows[n1].childNodes;
		kvout2[n1] = xrow[0].childNodes[0].nodeValue;;
for (n2=0; n2 < colno; n2++) {
try {
xstr = xrow[n2].childNodes[0].nodeValue;
if ((n2 == 1)&&(xstr > 1)) { summarized += parseInt(xstr); } 
if ((n2 == 3)&&(xstr > 1)) { pruned += parseInt(xstr); } 
if ((n2 == 2)&&(xstr > 1)) { bcol = LIGHT_RED; } else { bcol = LIGHT_GREEN; } 
if ((n2 == 8)||(n2 == 9)) { 
x1str = formatDate(xstr);
} else { x1str = xstr; }
cstr += "<td nowrap='nowrap' style='background-color:" + bcol + ";'>" + x1str + "</td>";
} catch(e) {}
}
cstr += "</tr>"; 
} catch(e) {}
row1 +=  cstr ;
}
htmlstrwa += "<h4><font color=\"brown\">Summarization Statistics/Errors</font></h4><table cellspacing='0'>" + row1 + "  </table><br/>";
htmlstrwa += "<b>Total No of Exported = " + addCommas(exported) + " rows. This is approximately = " + addCommas(parseInt(exported * 300/5000)/100) + " MB or " + addCommas(parseInt(exported * 300/5000000)/100) + " GB </b><br/>";
htmlstrwa += "<b>Total No of Summarized = " + addCommas(summarized) + " rows. This is approximately = " + addCommas(parseInt(summarized * 300/5000)/100) + " MB or " + addCommas(parseInt(summarized * 300/5000000)/100) + " GB </b><br/>";
htmlstrwa += "<b>Total No of Pruned = " + addCommas(pruned) + " rows. This is approximately = " + addCommas(parseInt(pruned * 300/5000)/100) + " MB or " + addCommas(parseInt(pruned * 300/5000000)/100) + " GB </b><br/>";
htmlstrwa += "<b>Total No of Growth = " + addCommas((exported - pruned)) + " rows. This is approximately = " + addCommas(parseInt((exported -pruned) * 300/5000000)/100) + " GB </b><br/>";
//botstr1 += htmlstrwa;
} catch(e) {} 

if (!sendevt) {

try {
  sqlstr = 'SELECT  MAX("AVG_System_CPU"),"System_Name"  AS "maxc"  FROM "Linux_CPU_H" ' + " WHERE WRITETIME > '00000000' GROUP BY " + '"System_Name" ORDER BY "maxc" ASC' ;
sqlstr = sqlstr.replace(/000000/g, gbltime);
  obj = "Linux_Systems"; 
  warehouseb(sqlstr,obj);
} catch(e) {}

try {
  sqlstr = 'SELECT  MAX("AVG_Space_Used_Percent") AS "maxc","System_Name","Disk_Name"  FROM "Linux_Disk_H"  ' + " WHERE WRITETIME > '00000000' GROUP BY " + '"Disk_Name","System_Name" ORDER BY "maxc" ASC' ;
sqlstr = sqlstr.replace(/000000/g, gbltime);
  obj = "Linux_Disks"; 
  warehouseb(sqlstr, obj);

} catch(e) {}

try {
  sqlstr = 'SELECT  MAX("AVG_System_CPU") AS "maxc","System_Name"   FROM "' + schema + '"."SMP_CPU_H"  ' + " WHERE WRITETIME > '00000000' GROUP BY " + '"System_Name" ORDER BY "maxc" ASC' ;
 sqlstr = sqlstr.replace(/000000/g, gbltime);
  obj = "SMP_UNIX_Systems"; 
  warehouseb(sqlstr, obj);
  } catch(e) {}

try {
  sqlstr = 'SELECT  MAX("AVG_Space_Used_Percent") AS "maxc","System_Name","LAT_Name"  FROM "' + schema + '"."Disk_H"  ' + " WHERE WRITETIME > '00000000' GROUP BY " + '"LAT_Name","System_Name" ORDER BY "maxc" ASC' ;
sqlstr = sqlstr.replace(/000000/g, gbltime);
  obj = "UNIX_Disks"; 
  warehouseb(sqlstr, obj);
} catch(e) {}

try {
  sqlstr = 'SELECT  MAX("prcSysTime") AS "maxc","Node"  FROM "' + schema + '"."AMX_DMXCpu_Percent_usage_CPU"  ' + " WHERE WRITETIME > '00000000' GROUP BY " + '"Node" ORDER BY "maxc" ASC' ;
 sqlstr = sqlstr.replace(/000000/g, gbltime);
  obj = "AMX_DMX_CPU"; 
  warehouseb(sqlstr, obj);
 } catch(e) {}

try {
  sqlstr = 'SELECT  AVG("%_Processor_Time") AS "maxc","Server_Name"  FROM "' + schema + '"."NT_Processor"  ' + " WHERE WRITETIME > '00000000' " + 'AND "Processor" = ' + "'_Total' GROUP BY " + '"Server_Name" ORDER BY "maxc" ASC' ;
 sqlstr = sqlstr.replace(/000000/g, gbltime);
  obj = "WINDOWS CPU"; 
  warehouseb(sqlstr, obj);
} catch(e) {}

try {
 sqlstr = 'SELECT  MAX("%_Used") AS "maxc","Server_Name","Disk_Name" FROM "' + schema + '"."NT_Logical_Disk"  ' + " WHERE WRITETIME > '00000000' GROUP BY " + '"Server_Name","Disk_Name" ORDER BY "maxc" ASC' ;
 sqlstr = sqlstr.replace(/000000/g, gbltime);
  obj = "WINDOWS DISK"; 
  warehouseb(sqlstr, obj);
} catch(e) {}

sqlstr = 'SELECT  SUBSTRING(EXPORTTIME,8,2) AS "HOUR", OBJECT, SUM(ROWSINSERTED) AS "Number_Rows"  FROM "' + schema + '"."WAREHOUSELOG"' + " WHERE EXPORTTIME > '000000' AND EXPORTTIME < '00000099' GROUP BY SUBSTRING(EXPORTTIME,8,2),OBJECT  ORDER BY OBJECT,SUBSTRING(EXPORTTIME,8,2)"; 
if (dbt != "sql") 
{ 
  sqlstr = sqlstr.replace(/SUBSTRING/g, "SUBSTR"); 
}
sqlstr = sqlstr.replace(/000000/g, gbltime);

try {

  warehouse(sqlstr);
  kvout2len = kvout2.length;

for (n=0;n < vout3.length; n++) { 
 xtotv3 += parseInt(vout3[n]);
 totv3[vout1[n]] = xtotv3; 
 if (totv3[vout1[n]] > maxv3 ) { maxv3 = totv3[vout1[n]]}
}

yfactor = 400 / maxv3 ;
vout3len = vout3.length;
for (n=0;n < vout3len; n++) { 
 yax += parseInt(vout3[n] * yfactor); 
 xax = parseInt(vout1[n] * 40); 

}

var htotalw = new Array;
for (n=0;n < 24; n++) { 
 botstr2 += "<th>Hr:" + n + "</th>" ; 
 htotalw[n] = 0;
}

botstr2 += "<th>DayTotal</th></tr>";
for (nn=0;nn < kvout2len; nn++) {
kvout2t[nn] = 0;
var xno = 0;
var bno =0;
botstr2 += " <tr><th>" + kvout2[nn] +  "</th>";

for (n=0;n < (vout3len); n++) { 
     if (vout2[n] == nn) { vno = xno;
	 while (  vno  < vout1[n] ){ botstr2 += "<td>.</td>"; vno++;}
        vout3n = vout3[n];botstr2 += "<td>" +  vout3n + "</td>"; xno = vout1[n] + 1;
		kvout2tn = parseInt(kvout2t[nn]); 
		kvout2tn += parseInt(vout3n); 
		dtotalw += parseInt(vout3n);
        htotalw[vno] += parseInt(vout3n);
		kvout2t[nn] = kvout2tn;
	
}  
 } // for vout3len
 bno =1;
 while (bno < (24-vno) ) {botstr2 += "<td>.</td>"; bno++;}
 botstr2 += "<th>" + kvout2t[nn] + "</th></tr>" 
}  // for kvout2len
botstr2 += "<tr><td>Hourly Totals</td>";  
for (n=0; n <24; n++) {
botstr2 += "<th>" + htotalw[n] + "</th>";
      }
botstr2 += "</tr>";  
if (dtotalw > 0) { backcol = "#ffffff"; } else { backcol = LIGHT_RED; } 
botstr2 += "</table><FIELDSET style='width:780;'><LEGEND>Analysis & Recommendations</LEGEND><b style='background-color:" + backcol + "'>Daily warehouse Total = " + parseInt(dtotalw/10000)/100 +  " Million Rows </b><br> This means that the number of bytes inserted is approximately = " + parseInt(dtotalw/1600) + " MB  or  " + parseInt(dtotalw/16000)/100 + " GB today</br></FIELDSET>";
} catch(e) { 
 botstr2 += "</table><FIELDSET style='width:780;'><LEGEND>Analysis & Recommendations</LEGEND><b style='background-color:#ffaaaa'>" + e.message +  "</b></FIELDSET>";
 }
 try {
dtotala = 0;
var vsql =  'SELECT  SUBSTRING(EXPORTTIME,6,2) AS "Day",SUM(ROWSINSERTED) AS "Number_Rows_Inserted"  FROM "' + schema + '"."WAREHOUSELOG"  WHERE EXPORTTIME > ' + "'" + gbltime.substring(0,5)  + "' GROUP BY SUBSTRING(EXPORTTIME,6,2) ";
vsql = vsql.replace(/000000/g, gbltime);
if (dbt != "sql") 
{ 
  vsql = vsql.replace(/SUBSTRING/g, "SUBSTR"); 
}
//  var oConn =  WScript.CreateObject("ADODB.Connection");
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
  botstr2 += "<br/><br/><b>Warehouse Log Export Report</b><table cellspacing='0' cellpadding = '0' ><tr><th>Day</th><th>Rows_Inserted</th></tr>"
var rowsa = 0;
while (!oRs.eof) { 
	 
        botstr2 += "<td>" + oRs(0) + "</td><td>" + oRs(1) + "</td></tr>";
        oRs.MoveNext() ;
 }
 botstr2 += "</table>";
 } catch(e) {
  }
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}

  try {
dtotala = 0;
var vsql =  'SELECT  SUBSTRING(ENDTIME,6,2) AS "Day", MIN(STARTTIME) AS "Cycle_Start", MAX(ENDTIME) AS "Cycle_End",SUM(ROWSREAD) AS "Number_Rows_Processed"  FROM "' + schema + '"."WAREHOUSEAGGREGLOG"  WHERE STARTTIME > ' + "'" + gbltime.substring(0,5)  + "' GROUP BY SUBSTRING(ENDTIME,6,2) ";
vsql = vsql.replace(/000000/g, gbltime);
if (dbt != "sql") 
{ 
  vsql = vsql.replace(/SUBSTRING/g, "SUBSTR"); 
}
//  var oConn =  WScript.CreateObject("ADODB.Connection");
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
  botstr2 += "<br/><br/><b>Warehouse Aggregation Cycles Report</b><br>Cycle Time and Rows read daily</br><table cellspacing='0' cellpadding = '0' ><tr><th>Day</th><th>Cycle Start</th><th>Cycle End</th><th>Duration Minutes</th><th>Rows_Processed</th></tr>"
var rowsa = 0;
while (!oRs.eof) { 

	     var cycstart = "" + oRs(1);		 
		 var cycend = "" + oRs(2);
		 var cycdur = "";
		 try {
		  dminutes(cycend,cycstart);
		  cycdur = "" + dmin + " .";
		 } catch(e) {  cycdur = e.message; }
		 
        botstr2 += "<td>" + oRs(0) + "</td><td>" + formatDate(cycstart) + "</td><td>" + formatDate(cycend) + "</td><th>" + cycdur + "</th><td>" + oRs(3) + "</td></tr>";
        oRs.MoveNext() ;
    rowsa++;	
 }
 botstr2 += "</table>";
 } catch(e) {
  }
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
	
	

dtotala = 0;

} else {
botstr2 = " ";
}
 
	try {
		var vsql =  'SELECT  "Attribute_Group_Name", SUM("Rows_Summarized") AS "Number_Rows"  FROM "' + schema + '"."KSY_TABLE_STATISTICS"  WHERE "Rows_Summarized" > 0 GROUP BY "Attribute_Group_Name"';
		//var vsql =  'SELECT  * FROM "SYSIBM"."SYSTABLES" WHERE "SCHEMA" = ' + "'ITMUSER'";
		vsql = vsql.replace(/000000/g, gbltime);
		//  var oConn =  WScript.CreateObject("ADODB.Connection");
  		oConn.CommandTimeout = 200;
		try {
			oConn.Open(wserver, wu, wp);
		}
		catch (e)
		{
			traceLog("taudit.js::allwarehouse() EXIT w/ ***ERROR opening Warehouse database");	
			wshShell.Popup("***WARNING: Unable to open Warehouse ODBC Source <" + wserver + ">\nUserID <" + wu + "> Password <" + wp + ">", 0, "Warehouse ODBC Source status");				
			throw e;					
		}
		try {	
			oRs=oConn.Execute(vsql);
		}
		catch (e)
		{
			traceLog("taudit.js::allwarehouse() EXIT w/ ***ERROR executing SQL query on Warehouse database");		
			wshShell.Popup("***WARNING: Unable to execute SQL query for schema <" + schema +  "> on Warehouse ODBC Source <" + wserver + ">\nUserID <" + wu + "> Password <" + wp + ">", 0, "Warehouse SQL query status");	
			throw e;					
		}			
//beh  		oConn.Open(wserver, wu, wp);
//beh  		oRs=oConn.Execute(vsql);
  		botstr2 += "<br/><br/><b>Warehouse Aggregation Objects Report</b><br>Number of Rows Processed  per Object Daily Totals </br><table  cellspacing='0' cellpadding = '0' ><tr><th>Object</th><th>Rows Processed</th></tr>"
		var rowsa = 0;
		
		while (!oRs.eof) { 
			if (oRs(1) > -1) {
				botstr2 += "<td>" + oRs(0) + "</td><td>" + oRs(1) + "</td></tr>";
				kvout2[rowsa] = "" + oRs(0);
				kvout2[rowsa] = kvout2[rowsa].replace(/ /g, "");
				rowsa++;	
			}
			else { 
				// botstr2 += "<td style='background-color:#ffaaaa' >" + oRs(0) + "</td><td>0</td></tr>";
				kvout2[rowsa] = "" + oRs(0);
				kvout2[rowsa] = kvout2[rowsa].replace(/ /g, "");
				rowsa++;
			}
			
			dtotala += parseInt(oRs(1));
			oRs.MoveNext() ;
		}

		kvout2len = kvout2.length;
 
		if (dtotala) { 
			botstr2 += "</table><FIELDSET style='width:780;'><LEGEND>Analysis & Recommendations</LEGEND><b>Daily Aggregation Total = " + parseInt(dtotala/10000)/100 +  " Million Rows</b></FIELDSET>";
			
			if (sendevt) { 
				botstr2 = ""; 
			}
		}
		else {
			var vsql =  'SELECT  OBJECT, COUNT(ROWSINSERTED) AS "Number_Rows"  FROM "' + schema + '"."WAREHOUSELOG"  GROUP BY OBJECT';
			vsql = vsql.replace(/000000/g, gbltime);
			
			try { 
				oConn.Close();
			}
			catch(e) 
				{}

			oConn.CommandTimeout = 200;
			oConn.Open(wserver, wu, wp);
			oRs=oConn.Execute(vsql);
			botstr2 += "<br/><br/><b>Warehouse Aggregation Objects Report</b><br>Number of Rows Processed  per Object Daily Totals </br><table  cellspacing='0' cellpadding = '0' ><tr><th>Object</th><th>Rows Processed</th></tr>"
			var rowsa = 0;
			
			while (!oRs.eof) { 
				if (oRs(1) > 0) {
					botstr2 += "<td>" + oRs(0) + "</td><td>" + oRs(1) + "</td></tr>";
					kvout2[rowsa] = "" + oRs(0);
					kvout2[rowsa] = kvout2[rowsa].replace(/ /g, "");
				}
				else { 
					botstr2 += "<td style='background-color:#ffaaaa' >" + oRs(0) + "</td><td>0</td></tr>";
				}

				dtotala += parseInt(oRs(1));
				oRs.MoveNext() ;
				rowsa++;	
			}

			//botstr2 += "</table><FIELDSET style='width:780;'><LEGEND>Analysis & Recommendations</LEGEND><b style='background-color:#ffaaaa'>YOUR AGGREGATION AND PRUNING AGENT IS NOT WORKING</b></FIELDSET>";
		}
	}
	catch(e) {
		// WScript.Echo(e.message);
		botstr2 += "<FIELDSET style='width:780;'><LEGEND>Analysis & Recommendations</LEGEND><b style='background-color:#ffaaaa'>YOUR AGGREGATION AND PRUNING AGENT IS NOT WORKING</b></FIELDSET>";
	}

	try { 
		oRs.Close();
	}
	catch(e) {}
	
	try { 
		oConn.Close();
	}
	catch(e) {}
	
	if (!sendevt) {
		botstr2 += " <br/><br/><b>Response Times and Capacity </b><br/><FIELDSET style='width:780;'><LEGEND>Warehouse Query Response Times</LEGEND><v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Bad Response Time  <v:line strokeweight='8px'  strokecolor='#aaffaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Good Response Time</FIELDSET><table cellpadding='0' style='border:1 solid black;' cellspacing='0'><tr><th></th><th>Number of Systems</th><th>History Rows</th><th>From</th><th>To</th><th>Response Time</th><th>Hour-Aggregated Rows</th><th>From</th><th>To</th><th>Response Time</th><th>Day-Aggregated Rows</th><th>From</th><th>To</th><th>Response Time</th></tr>";

		try {
			sqlstr = 'SELECT DISTINCT OBJECT AS "obj" FROM "' + schema + '"."WAREHOUSELOG"';
			warehousex(sqlstr);
		}
		catch(e) {} 
	}

	try {
		gpayload = '<CT_Get> <userid>' + hu + '</userid><password>' + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT NODE,O4ONLINE FROM O4SRV.INODESTS  ]]></sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		nstr = ";"; 
		rowno = rows.length;

		for(var n1 =0 ; n1 < rowno; n1++) {
			nstr += rows[n1].childNodes[0].childNodes[0].nodeValue + ";" +  rows[n1].childNodes[1].childNodes[0].nodeValue + ";";
		}
	}
	catch(e) {
		nstr = ";";
	} 

	getibmtime(25);
	ebltime =  "" + filetime + "00000";
	
	for (nn=0;nn < kvout2len; nn++) {
		if (!sendevt) {
    			try {
				botstr2 += " <tr><th>" + kvout2[nn] +  "</th>";
				sqlstr = 'SELECT COUNT(DISTINCT ORIGINNODE) AS "NUMBER" FROM "' + schema + '"."WAREHOUSELOG"' + " WHERE OBJECT = '" + kvout2[nn] + "' ";
				warehouset(sqlstr);
				botstr2 += " <td>" + sno +  "</td>";  } catch(e) {}
				
				try {
					sqlstr = 'SELECT COUNT(WRITETIME) AS "NUMBER",MAX("WRITETIME"),MIN("WRITETIME") FROM "' + schema + '"."' + kvout2[nn] + '"';
					warehouset(sqlstr);
					botstr2 += " <td>" + sno +  "</td><td>" + s1w +  "&ndash;</td><td>" + s2w +  "</td><td style='background-color:" + backcol + "'>" + resptime + "</td>";
					s1w = ""; 
					s2w = "";
					totalw += sno; } catch(e) { }
					
					try {
						sqlstr = 'SELECT COUNT(WRITETIME) AS "NUMBER",MAX("WRITETIME"),MIN("WRITETIME") FROM "' + schema + '"."' + kvout2[nn] + '_H"';
						warehouset(sqlstr);
						botstr2 += " <td>" + sno +  "</td><td>" + s1w +  "&ndash;</td><td>" + s2w +  "</td><td style='background-color:" + backcol + "'>" + resptime + "</td>";
						s1w = ""; 
						s2w = "";
						totalh += sno;
					}
					catch(e) {}
					
					try {
						sqlstr = 'SELECT COUNT(WRITETIME) AS "NUMBER",MAX("WRITETIME"),MIN("WRITETIME") FROM "' + schema + '"."' + kvout2[nn] + '_D"';
						warehouset(sqlstr);
						botstr2 += " <td>" + sno +  "</td><td>" + s1w +  "&ndash;</td><td>" + s2w +  "</td><td style='background-color:" + backcol + "'>" + resptime + "</td>";
						s1w = ""; 
						s2w = "";
						totald += sno; 
					}
					catch(e) {}
					
					botstr2 += "</tr>";	
		
}

var objv = kvout2[nn];
warehousehist(objv);
	}

 
 if (!sendevt) {
 try {
  sqlstr = 'SELECT COUNT(EXPORTTIME) AS "NUMBER",MAX("EXPORTTIME"),MIN("EXPORTTIME") FROM "' + schema + '"."WAREHOUSELOG"';
    warehouset(sqlstr);
    botstr2 += "<tr><th>WAREHOUSELOG</th> <td></td><td>" + sno +  "</td><td>" + s1w +  "&ndash;</td><td>" + s2w +  "</td><td style='background-color:" + backcol + "'>" + resptime + "</td></tr>";
	s1w = ""; 
	s2w = "";
	} catch(e) {}
 try {
  sqlstr = 'SELECT COUNT(ENDTIME) AS "NUMBER",MAX("ENDTIME"),MIN("ENDTIME") FROM "' + schema + '"."WAREHOUSEAGGREGLOG"';
    warehouset(sqlstr);
    botstr2 += "<tr><th>WAREHOUSEAGGREGLOG</th><td></td> <td>" + sno +  "</td><td>" + s1w +  "&ndash;</td><td>" + s2w +  "</td><td style='background-color:" + backcol + "'>" + resptime + "</td></tr>";
	s1w = ""; 
	s2w = ""; 
	} catch(e) {}

botstr2 += " </table>" + htmlstrwa + histdiscrepancy + "</table><FIELDSET style='width:780;'><LEGEND>Analysis & Recommendations</LEGEND>Total Rows in Raw Tables  =  " + (parseInt(totalw/10000)/100) +  " Million Rows</br/>Total Rows in Hourly Aggregated Tables  =  " + (parseInt(totalh/10000)/100) +  " Million Rows<br/>Total Rows in Day Aggregated Tables  =  " + (parseInt(totald/10000)/100) +  " Million Rows</FIELDSET></div>";
var n = 0;
try {
  vsql =  'SELECT COUNT(Managed_System) AS "CNT" ,Managed_System AS "MS"  FROM "' + schema + '"."Status_History" ' + " WHERE Status = 'Raised' OR Status = 'Y' GROUP BY Managed_System ORDER BY CNT DESC";
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
  var botstr3x = "<b>Top ten Managed Systems having highest Exceptions count</b><br/><table><tr><th>Managed System</th><th>Count</th></tr>"
  for (n=0; n<10; n++) 
  { 
    botstr3x += "<td>" + oRs(1) + "</td><td>" + oRs(0) + "</td></tr>";
    oRs.MoveNext() ;
  }
  botstr3x += "</table>";
    if (n >1) {botstr3 += botstr3x; }
	} catch(e) {}
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}

try {
//var oConn =  WScript.CreateObject("ADODB.Connection");
  vsql =  'SELECT COUNT(Situation_Name) AS "COUNT" ,Situation_Name AS "ST"  FROM "' + schema + '"."Status_History" ' + " WHERE Status = 'Raised' OR Status = 'Y' GROUP BY Situation_Name ORDER BY COUNT DESC ";
  var botstr3x = "<b>Top ten Situations having highest Exceptions count</b><br/><table cellpadding='0' cellspacing='0'><tr><th>Situation Name</th><th>Count</th></tr>"
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
  for (n=0; n<10; n++) 
  { 
    botstr3x += "<td>" + oRs(1) + "</td><td>" + oRs(0) + "</td></tr>"; 
    oRs.MoveNext() ;
  }
  botstr3x += "</table>";
    if (n >1) {botstr3 += botstr3x; }
	} catch(e) {}
   try { oRs.Close();} catch(e) {}
   try { oConn.Close();} catch(e) {}


try {
//var oConn =  WScript.CreateObject("ADODB.Connection");
  vsql =  'SELECT COUNT(Situation_Name) AS "COUNT" ,Situation_Name AS "ST",  Managed_System AS "MS"  FROM "' + schema + '"."Status_History"' + " WHERE Status = 'Raised' OR Status = 'Y' GROUP BY Situation_Name, Managed_System ORDER BY COUNT DESC ";
  botstr3x = "<b>Top ten Situation/ManagedSystem combination having highest Exceptions</b><br/><table cellpadding='0' cellspacing='0'><tr><th>Situation Name</th><th>Managed System</th><th>Count</th></tr>"
  oConn.CommandTimeout = 200;
  oConn.Open(wserver, wu, wp);
  oRs=oConn.Execute(vsql);
  for (n=0; n<10; n++) 
  { 
    botstr3x += "<td>" + oRs(1) + "</td><td>" + oRs(2) + "</td><td>" + oRs(0) + "</td></tr>"; 
    oRs.MoveNext() ;
  }
      botstr3x += "</table>";
      if (n >1) {botstr3 += botstr3x; }
	} catch(e) {}
    try { oRs.Close();} catch(e) {}
    try { oConn.Close();} catch(e) {}
} else {

 botstr2 += " </table>" + htmlstrwa + histdiscrepancy + "</table>";
 }
	traceLog("taudit.js::allwarehouse() EXIT");	
}

function wareex() 
{
	traceLog("taudit.js::wareex() ENTRY");	
	var reportID;
	
	if ( sendevt == "n" ) {
		filename = "aud_HISTMISSING_"; // + formatIBMtime(gbltime) + ".htm";	
		reportID = "HISTORY MISSING";
	}
	else {
		filename = "aud_WAREHOUSE_"; // + formatIBMtime(gbltime) + ".htm";		
		reportID = "WAREHOUSE";
	}
	
	filename +=  formatIBMtime(gbltime) + ".htm";	
	var file = fs.OpenTextFile(path + filename, 2, true);
	resptime = parseInt((new Date).getTime());
	allwarehouse();
	presptime = (parseInt((new Date).getTime())- resptime) /1000;	 
	//		 botstr2 += nstr;
	file.WriteLine("<html xmlns:v='urn:schemas-microsoft-com:vml'><head><style> v\\:*   { behavior:url(#default#VML); div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; background:#e8e8e8; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;nowrap:true; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; background:#fefefe;nowrap:true; } </style><script> function wload() {  }</script></head><body onload='javascript:wload()'><h5><center>Tivoli Enterprise Platform: Daily <font color=\"magenta\">" + reportID + "</font> Audit Report Version 07.00.10beta</center></h5><center><b>" + today +  "</b></center><hr></hr><h4>"  + (new Date).toLocaleString() + " ; Analysis Time = " + presptime + " seconds  </h4>" + botstr2 + "</div></body></html>");
//	file.WriteLine ("</head><body><h5><center>Tivoli Enterprise Platform: Daily <font color=\"magenta\">" + reportID + "</font> Audit Report Version 07.00.10beta</center></h5>");
//	file.WriteLine ("<center><b>" + today +  "</b></center><hr></hr><h4>"  + (new Date).toLocaleString() + "</h4>Analysis Time = " + presptime + " seconds" + botstr2); // + "</div></body></html>");

	file.Close();
	traceLog("taudit.js::wareex() EXIT");	
	return (path + filename);	
}

//beh if (runt == "warehouse") { wareex(); }
  	
//beh else { restof() ;}
 
function restof() 
{ 
	traceLog("taudit.js::restof() ENTRY");	
	file6 = fs.OpenTextFile(path + "Taudittrace.txt", 2, true);
	file6.Close(); 
	hurl = url; 
	
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT UPTIME FROM KQM.CMSUPTIME</sql> </CT_Get>";
		tprint();
		rows = xmle.getElementsByTagName('ROW');
		huptime = rows[0].childNodes[0].childNodes[0].nodeValue;
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT NODE FROM O4SRV.TNODELST WHERE NODELIST = '*HUB'</sql> </CT_Get>";
		tprint();
		parent[0] = xmle.selectSingleNode("//DATA/ROW/NODE").text;
	}
	catch(e) {
		try {
			huptime = 0;
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT NODE FROM O4SRV.TNODELST WHERE NODELIST = '*HUB'</sql> </CT_Get>";
			url = url.replace(/\/\/\//,"//");
			hurl = url;
			tprint(); 
			parent[0] = xmle.selectSingleNode("//DATA/ROW/NODE").text;
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT UPTIME FROM KQM.CMSUPTIME</sql> </CT_Get>";
			tprint();
			rows = xmle.getElementsByTagName('ROW');
			huptime = rows[0].childNodes[0].childNodes[0].nodeValue;
		}
		catch(e) { 
			url = url35; 
			huptime = 0;
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT NODE FROM O4SRV.TNODELST WHERE NODELIST = '*HUB'</sql> </CT_Get>"
			tprint();
		}
	
		try {
			parent[0] = xmle.selectSingleNode("//DATA/ROW/NODE").text; 
		} 
		catch(e) {}
	} 

	if ((huptime)&&(mserver))  {
	
		url = url35;
	        gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT UPTIME FROM KQM.CMSUPTIME</sql> </CT_Get>";
	        tprint();
		rows = xmle.getElementsByTagName('ROW');
		muptime = rows[0].childNodes[0].childNodes[0].nodeValue;
	
		if (parseInt(muptime) > parseInt(huptime)) {
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT NODE FROM O4SRV.TNODELST WHERE NODELIST = '*HUB'</sql> </CT_Get>"
			tprint();
			parent[0] = xmle.selectSingleNode("//DATA/ROW/NODE").text; 
		}
		else {		
			url = hurl;
		}
	}
 
	hubname = parent[0];
	xxmle = xmle;

	if (!autoreport) {
		if (!parent[0]) { 
			WScript.Echo("HUB IS NOT FOUND");
			WScript.Echo(url); 
		} 
		else {
			WScript.Echo(parent[0]); 
		}
	}
 
	hubname = parent[0];

	if (runt == "dist") 
	{
		temsno();
		//try {
		row1 = '<html xmlns:v="urn:schemas-microsoft-com:vml"><head><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><STYLE>  v\\:*   { behavior:url(#default#VML); } v\\:line   { z-index:-1; } a:visited  {color: #0000ff; text-decoration: none}  a:active  {color: grey; text-decoration: none} a:link  {color: #0000ff; text-decoration: none}  center    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px } b.red    { color:red;} b.gre    { color:green;} div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; nowrap:true; } button { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:10px; border:1 solid #aaaaaa; background:#E2E7EE;} select { font-size:11px; width:200px} </STYLE>';
		filename4 = "aud_" + hubname +   "_SITDIST_" + formatIBMtime(filetimen) + ".htm";	
		filename4= filename4.replace(/:/g,"");
		var file4 = fs.OpenTextFile(path + filename4, 2, true);
		file4.WriteLine(row1);
		file4.WriteLine ("</head><body><h5><center>Tivoli Enterprise Platform: Daily <font color=\"magenta\">SITUATIONS DISTRIBUTIONS</font> Audit Report Version 07.00.10beta</center></h5>");
		distribute();
	
		 if (runt=="error") 
		 	{} 
		 else {
	 		file4.WriteLine (hstr1);
	 		file4.WriteLine (misdist);
//beh botstr31 is empty			 file4.WriteLine (botstr31);
			if ( misdist.length > 0 )
				misdist += "</br></br>";	
			file4.WriteLine (botstr32); 
	 	}
	 	
		if (autoreport =="correct") { 
			correctdist();
		}
		
		file4.WriteLine (htmlstr); 
		file4.WriteLine ("</body></html>");
		file4.Close();
		//} catch(e) {WScript.Echo(e.message);}	
		traceLog("taudit.js::restof() EXIT");	
		return (path + filename4);
	} 

	if (runt == "dupl") 
	{
		temsno();
		//try {
		row1 = '<html xmlns:v="urn:schemas-microsoft-com:vml"><head><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><STYLE>  v\\:*   { behavior:url(#default#VML); } v\\:line   { z-index:-1; } a:visited  {color: #0000ff; text-decoration: none}  a:active  {color: grey; text-decoration: none} a:link  {color: #0000ff; text-decoration: none}  center    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px } b.red    { color:red;} b.gre    { color:green;} div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:17px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; nowrap:true; } button { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:10px; border:1 solid #aaaaaa; background:#E2E7EE;} select { font-size:11px; width:200px} </STYLE>';
		filename4 = "aud_" + hubname +   "_AGTCONTACT_" + formatIBMtime(filetimen) + ".htm";	
		filename4= filename4.replace(/:/g,"");
		var file4 = fs.OpenTextFile(path + filename4, 2, true);
		file4.WriteLine(row1);
		file4.WriteLine ("</head><body><h5><center>Tivoli Enterprise Platform: Daily <font color=\"magenta\">AGENT CONTACTABILITY</font> Audit Report Version 07.00.10beta</center></h5><center><b>" + today +  "</b></center>");
	
		hstr1 = "";
		duplicates();
		
		 if (runt=="error") 
		 	{}
		 else {
			 file4.WriteLine (hstr1);
	 	}
		
		file4.WriteLine ("</body></html>");
		file4.Close();
		//} catch(e) {WScript.Echo(e.message);}	
		traceLog("taudit.js::restof() EXIT");		
		return (path + filename4);
	} 

	if (runt == "error") {
		errorsonly(); 
		filename = "aud_" + hubname + "_ERRORS_" + formatIBMtime(filetimen) + ".htm";
		filename= filename.replace(/:/g,"");
		var file = fs.OpenTextFile(path + filename, 2, true);
		row1 = '<html xmlns:v="urn:schemas-microsoft-com:vml"><head><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><STYLE>  v\\:*   { behavior:url(#default#VML); } v\\:line   { z-index:-1; } a:visited  {color: #0000ff; text-decoration: none}  a:active  {color: grey; text-decoration: none} a:link  {color: #0000ff; text-decoration: none}  center    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px } b.red    { color:red;} b.gre    { color:green;} div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; nowrap:true; } button { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:10px; border:1 solid #aaaaaa; background:#E2E7EE;} select { font-size:11px; width:200px} </STYLE>';	
		file.Writeline(row1);
		file.WriteLine ("</head><body><h5><center>Tivoli Enterprise Platform: Daily <font color=\"magenta\">ERRORS ONLY</font> Audit Report Version 07.00.00</center></h5><center><b>" + today +  "</b></center>");
		//beh	file.WriteLine("<html><head><style>div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; background:#e8e8e8; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;nowrap:true; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; background:#fefefe;nowrap:true; } </style><script> function wload() {  }</script></head><body><h3>Tivoli Enterprise Platform: Daily <font color=\"magenta\">ERRORS ONLY</font> Report Version 07.00.00</h3><hr></hr><h4>"  + (new Date).toLocaleString() + "   </h4>");
		//beh	file.WriteLine( "</div></body></html>");
		file.WriteLine( botstr2 );
		file.WriteLine( "</body></html>");	//beh
		file.Close();
		traceLog("taudit.js::restof() EXIT");		
		return (path + filename);
	}
		 
	if (runt == "kpi") { 
		kpiex();
		traceLog("taudit.js::restof() EXIT");	    
		return;
	} 

	allwarehouse();
	temsno();
	sdax();
	//botstr1b += sdastr;
	sitanalysis();

	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT COUNT(SITNAME),AUTOSTART FROM O4SRV.TSITDESC GROUP BY AUTOSTART</sql> </CT_Get>";
		tprint();
		rows = xmle.selectNodes("//DATA/ROW");
		botstr3 += "<table cellspacing='8'><tr><td valign='top'><h4><font color=\"brown\">Numbers of Situations by Type</font></h4>";	
		botstr3 += "<table  cellspacing='3' style='border:1 solid black'>";			
		node=rows.nextNode();
		nodec= node.childNodes;
		
		if (nodec[0].text > 1) { 
			backcol = LIGHT_YELLOW; 
		}
		else { 
			backcol = LIGHT_GREY;
		}	

		botstr3 += "<tr style='background-color:" + backcol + "'><td>Not Started Situations</td><td style='text-align:right'>" + addCommas(nodec[0].text) + "</td></tr>";
		node=rows.nextNode();
		nodec= node.childNodes;
		botstr3 += "<tr><td>History/Enterprise Situations</td><td style='text-align:right'>" + addCommas(nodec[0].text) + "</td></tr>";
		node=rows.nextNode();
		nodec= node.childNodes;
		botstr3 += "<tr><td>Auto Started Situations</td><td style='text-align:right'>" + addCommas(nodec[0].text) + "</td></tr>";
	}
	catch(e)  { 
		if (e.message) {
			file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; 
		}
	}

	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT COUNT(OBJNAME) FROM O4SRV.TOBJACCL WHERE OBJCLASS = '5140'  AND SYSTEM.PARMA(" + '"QIBNODE","QOMEGAVIEW",32' + ")</sql> </CT_Get>";
		tprint();
		rows = xmle.selectNodes("//DATA/ROW");
		node=rows.nextNode();
		nodec= node.childNodes;
		botstr3 += "<tr><td>Situation Distributions</td><td style='text-align:right'>" + addCommas(nodec[0].text) + "</td></tr>";
	}
	catch(e) { 
		if (e.message) {
			file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; 
		}
	}

	botstr3 += "</table>";
//	botstr3 += "</table><br></br>";    
	
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT COUNT(PCYNAME),AUTOSTART FROM O4SRV.TPCYDESC GROUP BY AUTOSTART</sql> </CT_Get>";
		tprint();
		rows = xmle.selectNodes("//DATA/ROW");
		botstr3 += "<br/><h4><font color=\"brown\">Numbers of Policies by Type</font></h4><table  cellspacing='3' style='border:1 solid black;'>";
		node=rows.nextNode();
		nodec= node.childNodes;
	
		if (nodec[0].text > 1) { 
			backcol = LIGHT_YELLOW; 
		}
		else { 
			backcol = LIGHT_GREY; 
		}	
		
		botstr3 += "<tr style='background-color:" + backcol + "'><td>Not Started Policies</td><td style='text-align:right'>" + addCommas(nodec[0].text) + "</td></tr>";
		node=rows.nextNode();
		nodec= node.childNodes;
		botstr3 += "<tr><td>Auto Started Policies</td><td style='text-align:right'>" + addCommas(nodec[0].text) + "</td></tr>";
	}
	catch(e)  {
		if (e.message) {
			file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; 
		}
	}

	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT COUNT(OBJNAME) FROM O4SRV.TOBJACCL WHERE OBJCLASS = '5130'  AND SYSTEM.PARMA(" + '"QIBNODE","QOMEGAVIEW",32' + ")</sql> </CT_Get>";
		tprint();
		rows = xmle.selectNodes("//DATA/ROW");
		node=rows.nextNode();
		nodec= node.childNodes;
		botstr3 += "<tr><td>Policy Distributions</td><td style='text-align:right'>" + addCommas(nodec[0].text) + "</td></tr>";
	}
	catch(e)  { 
		if (e.message) {
			file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; 
		}
		botstr3 += "<tr><td>Policy Distributions</td><td style='text-align:right'>0</td></tr>";
	}

	botstr3 += "</table></td>";
	botstr3 += "</table><br></br>";   

	sqlstr = "SELECT COUNT(DELTASTAT),SITNAME, MAX(DELTASTAT)  FROM O4SRV.TSITSTSH GROUP BY SITNAME";
	htmlstr = "<table style='border:1 solid black;' cellspacing='0'><tr><td><h4>Never Fired Situations</h4></td></tr>";
	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>" + sqlstr + "</sql> </CT_Get>"
	tprint();
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;

	var nn = 0;
	var neverFired = 0;
	
	for(n1 =0 ; n1 < rowno; n1++) {
		try {
			if (rows[n1].childNodes[2].childNodes[0].nodeValue == "S") {
				if ((rows[n1].childNodes[1].childNodes[0].nodeValue.substr(0,9))=="UADVISOR_") 
					{ continue; }
					
				htmlstr += "<tr style='background-color:#ffffaa'><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td></tr>";
				neverFired++;
			}
		}
		catch(e) {}
	}
	
	if ( neverFired == 0 )
	{
		htmlstr += "<tr><td>...<b>There are no situations that have <u>never fired</u> on HUB TEMS </b><font color=\"blue\"><b>" + hubname + "</b></font>.</td></tr>";
	}	
	
	htmlstr += "</table>"; 		
	botstr3 += htmlstr;
	sqlstr = "SELECT COUNT(DELTASTAT) ,ORIGINNODE, MIN(GBLTMSTMP), MAX(GBLTMSTMP)   FROM O4SRV.TSITSTSH WHERE DELTASTAT = 'Y'  GROUP BY ORIGINNODE";
	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>" + sqlstr + "</sql> </CT_Get>"
	tprint();
	botstr3x = "<br/><h4><font color=\"brown\">Exception Analysis at HUB TEMS named</font> <font color=\"blue\">" + hubname + "</font></h4>";
	botstr3x += "<FIELDSET style='top:0;width:880; margin-left:0'><LEGEND style='font-size:11px;'>Exception Rate and Count <i>LEGEND</i></LEGEND><span style='font-size:11px;'>Exception Metrics by Managed System, by Situation<br/><v:line strokeweight='8px'  strokecolor='#aaaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Rate of 1/day to 5/day, Count 5 or more <b>|</b> <v:line strokeweight='8px'  strokecolor='#FFF380' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Rate of 5/day to 10/day, Count exceeds 10 <b>|</b> <v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Rate greater than 10/day, Count exceeds 10</span></FIELDSET>";
	botstr3x += "<table><tr><td valign='top' style='border:1 solid black'><h4>Top <u>Managed Systems</u> having highest Exceptions count</h4><table  cellspacing='2'><tr><th>Managed System</th><th>Count</th><th>Rate/day</b><th>Oldest</th><th>Latest</th></tr>";
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;
	
	for(n1 =0 ; n1 < rowno; n1++) {
		try {
			dcnt =  parseInt(rows[n1].childNodes[0].childNodes[0].nodeValue);
		
			if (dcnt < 5 ) 
				{ continue; }
				
			cycstart = "" + rows[n1].childNodes[2].childNodes[0].nodeValue;		 
			cycend = "" + rows[n1].childNodes[3].childNodes[0].nodeValue;
			dminutes(cycend,cycstart);
	
			if (dmin <100 ) 
				{continue; }
	
			drate = parseInt(dcnt * 14400  /dmin )/10;
			bcol = "#dddddd";
			
			 if (drate <1) 
			 	{ continue;  } 
			 	
			if ((drate >5) &&(dcnt> 10)) { 		// rate > 5 per day and count > 10 
				bcol = LIGHT_YELLOW; 
			}
			
			if ((drate >10) && (dcnt> 10)) { 	// rate > 10 per day and count > 10
				bcol = LIGHT_RED;
			}	  
     
			botstr3x += "<tr style='background-color:" + bcol + "'><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + drate + "</td><td>" + formatDate(cycstart) +  "</td><td>" + formatDate(cycend) + "</td></tr>";
		}
		catch(e) {}
	}

	botstr3x += "</table>";
	sqlstr = "SELECT COUNT(DELTASTAT) ,SITNAME, MIN(GBLTMSTMP), MAX(GBLTMSTMP)   FROM O4SRV.TSITSTSH WHERE DELTASTAT = 'Y'  GROUP BY SITNAME";
	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>" + sqlstr + "</sql> </CT_Get>"
	tprint();
	botstr3x += "</td><td valign='top' style='border:1 solid black'><h4>Top <u>Situations</u> having highest Exceptions count</h4><table  cellspacing='2'><tr><th>Situation Name</th><th>Count</th><th>Rate/Day</th><th>Oldest</th><th>Latest</th></tr>";
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;

	for(n1 =0 ; n1 < rowno; n1++) {
		try {
			dcnt =  parseInt(rows[n1].childNodes[0].childNodes[0].nodeValue);
			if (dcnt < 5 ) 
				{ continue; }
				
			cycstart = "" + rows[n1].childNodes[2].childNodes[0].nodeValue;		 
			cycend = "" + rows[n1].childNodes[3].childNodes[0].nodeValue;
	  		dminutes(cycend,cycstart);
			
			if (dmin <100 ) 
				{continue; }
				
			drate = parseInt( dcnt * 14400  /dmin )/10;
			bcol = "#dddddd";
			
			if (drate <1) 
				{ continue;  } 
				
			if ((drate >5) &&(dcnt> 10)) 
				{ bcol = LIGHT_YELLOW; }

			if ((drate >10) && (dcnt> 10)) 
				{ bcol = LIGHT_RED; }		  

			botstr3x += "<tr style='background-color:" + bcol + "'><td>" + rows[n1].childNodes[1].childNodes[0].nodeValue + "</td><td>" + rows[n1].childNodes[0].childNodes[0].nodeValue + "</td><td>" + drate + "</td><td>" + formatDate(cycstart) +  "</td><td>" + formatDate(cycend) + "</td></tr>";
		}
		catch(e) {	}
	}

	botstr3x += "</table></td></tr></table>";
	botstr3 += botstr3x;

	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT SYSTIME, ORIGINNODE FROM O4SRV.LOCALTIME</sql> </CT_Get>"
		tprint();
		cycend = xmle.selectSingleNode("//DATA/ROW/Timestamp").text;
	}
	catch(e) {}

	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT GBLTMSTMP,SITNAME,ORIGINNODE,ATOMIZE, DELTASTAT,NODE FROM O4SRV.ISITSTSH ORDER BY GBLTMSTMP</sql> </CT_Get>"
	tprint();
	htmlstr = "<br></br><h4><font color=\"brown\">Enterprise Situation Status</font></h4><FIELDSET style='top:0;width:880; margin-left:0'><LEGEND style='font-size:11px;'>Situation Status <i>LEGEND</i></LEGEND><span style='font-size:11px;'>Situation Status by Managed System/Situations<br/><v:line strokeweight='8px'  strokecolor='##aaffaa' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Exception Reset/Acknowledged <b>|</b> <v:line strokeweight='8px'  strokecolor='#ffffaa' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Exception 'raised' less than 4 hours <b>|</b>  <v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Exception 'raised' Outstanding for more than 4 hours <b>|</b> <v:line strokeweight='8px'  strokecolor='Red' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Error Situation Status  </span></FIELDSET>";
	htmlstr += "<table style='border:1 solid black;' cellspacing='0'></tr><th>Duration in Minutes</th><th>Time</th><th>Status</th><th>Situation</th><th>Managed System</th><th>Display Item</th></tr>";
	rows = xmle.getElementsByTagName('ROW');
	rowno = rows.length;
	
	if (rowno > 1000) {
		 rowno = 1000; 
	 }
	
	for(n1 =0 ; n1 < rowno; n1++) { 
		try {
			stat = rows[n1].childNodes[4].childNodes[0].nodeValue;
			cycstart = rows[n1].childNodes[0].childNodes[0].nodeValue;
			dminutes(cycend,cycstart);
			
			if ((stat == "S")||(stat == "L")||(stat == "P")||(stat == "D")) { 
				continue;
			}	
			
			bcol = "ffffff";
			
			if (stat == "X") { 
				bcol = "red"; 
			}
		
			if (stat == "Y") { 
				if (dmin < 240) { 
					bcol = LIGHT_YELLOW; 
				}
				else {
					bcol = LIGHT_RED; 
				}
			}
		
			if ((stat == "N")||(stat == "N")) { 
				bcol = LIGHT_GREEN; 
			}	

			
			htmlstr += "<tr style=' background-color:" + bcol + "'><th>" + addCommas(dmin) + "</th><td>" + formatDate(cycstart) + "</td><td> " + mapDeltaToString(stat) + " </td><td>" ;
			htmlstr +=  rows[n1].childNodes[1].childNodes[0].nodeValue +  "</td><td>";
			htmlstr +=  rows[n1].childNodes[2].childNodes[0].nodeValue +  "</td><td>";
	 		
	 		try {
				htmlstr += rows[n1].childNodes[3].childNodes[0].nodeValue; 
			 }
			 catch(e) {}
	
			htmlstr += "</td></tr>";
		}
		catch(e) {}
	}
	
	htmlstr += "</table>";
	botstr3 += htmlstr;

	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.ISITSTSH</table><sql>SELECT  SITNAME, NODE FROM O4SRV.ISITSTSH WHERE DELTASTAT = 'X' </sql> </CT_Get>"
	tprint(); 
	rows = xmle.selectNodes("//DATA/ROW");

	if (rows.length) 
	{
		botstr3 += "<br/><h4><font color=\"brown\">Error Situations</h4>";
		botstr3 += "<table cellpadding='0' cellspacing='2'><tr><th>Situation Name</th><th>Management Server</th></tr>";
		
		for(node=rows.nextNode(); node!=null; node=rows.nextNode()) {
			nodec= node.childNodes;
			backcol = RED;  
			botstr3 += "<tr><td style='background-color:" + backcol + "'>" + nodec[0].text + "</td><td style='background-color:" + LIGHT_RED + "'>" + nodec[1].text + "</td></tr>";
			errorcount++;
		}

		botstr3 += "</table>";
	} 

	filename = "aud_" + parent[0] + "_ENTERPRISE_" + formatIBMtime(filetimen) + ".htm";
	filename = filename.replace(/:/g,"");
	filename2 = parent[0] +   "SIT" + filetimen + ".htm";
	filename2 = filename2.replace(/:/g,"");
	
	var row1 = "<ROW><ITEM>" + filename +"</ITEM><DATE>" + " : " +  (new Date).toLocaleString() + "</DATE></ROW>";
	var row1 = "<ROW><ITEM>" + filename2 +"</ITEM><DATE>" +  " : " + (new Date).toLocaleString() + "</DATE></ROW>";
	var file = fs.OpenTextFile(path + filename, 2, true);
	//var file2 = fs.OpenTextFile(filename2, 2, true);
	var non = 0;
	var nn = 0;
	vnodes[0] = "TEPS"; 
	type[0] = "Tivoli Enterprise Portal Server"; 
	nstatus[0] = "*ONLINE";  
	nn =1;
	var file3 = fs.OpenTextFile(path + "AUDIT.xl", 8, true);

	if (runt == "diag") {
		var row1 = "<ROW><ITEM>" + filename +"</ITEM><DATE>" + " : " +  (new Date).toLocaleString() + "</DATE></ROW>";
		file3.WriteLine(row1);
		var row1 = "<ROW><ITEM>" + filename2 +"</ITEM><DATE>" +  " : " + (new Date).toLocaleString() + "</DATE></ROW>";
		file3.WriteLine(row1);
	}

	file3.Close();
	
	try {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT VERSION, NODE, THRUNODE, PRODUCT, O4ONLINE,HOSTADDR,GBLTMSTMP,HOSTINFO,ONLINE FROM O4SRV.INODESTS  ORDER BY THRUNODE,NODE ASC</sql> </CT_Get>"
		tprint();
		rows = xmle.selectNodes("//DATA/ROW");
		
		if (rows.length > 1) {} else { WScript.Echo(HJJKHJKH); } 
		 
		for(node=rows.nextNode(); node!=null; node=rows.nextNode()) {
			try {
				nodec= node.childNodes;
				nversion[nn] = nodec[0].text;
				vnodes[nn]= nodec[1].text;
				parent[nn] = nodec[2].text ;
				type[nn] = nodec[3].text; 
				nstatus[nn] = nodec[4].text;
				xstr = nodec[5].text;
				ngblt[nn] = nodec[6].text;
				hinfo[nn] = nodec[7].text;
				reason[nn] = nodec[8].text;
				vuptn[nn] = 0;
				vhrtn[nn] = 0; 
				
				if (xstr) {
					var ystr = xstr.split("[");
					ystr = ystr[0].split("#");
				
					if (ystr) { 
						nip[nn] = ystr[1];
					}
					else 
						nip[nn] = xstr
				}
				else 
					nip[nn] = "";
				
				nn++; 
			}
			catch(e) {}
		} 
	}
	catch(e) {
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT VERSION, NODE, THRUNODE, PRODUCT, O4ONLINE,GBLTMSTMP,ONLINE FROM O4SRV.INODESTS  ORDER BY THRUNODE, NODE ASC</sql> </CT_Get>"
		tprint();
		rows = xmle.selectNodes("//DATA/ROW");
		
		for(node=rows.nextNode(); node!=null; node=rows.nextNode()) {
			try { 
				nodec= node.childNodes;
				nversion[nn] = nodec[0].text;
				vnodes[nn]= nodec[1].text;
				parent[nn] = nodec[2].text ;
				type[nn] = nodec[3].text; 
				nstatus[nn] = nodec[4].text;
				ngblt[nn] = nodec[5].text;
				reason[nn] = nodec[6].text;
				nip[nn] = "";
				hinfo[nn] = "";
				nn++;
			}
			catch(e) {}
		}
	}
	
	nodeslen = vnodes.length;
	
	if (runt == "long") {
		longavail();
		traceLog("taudit.js::restof() EXIT");	
		return;
 	}

	if (!autoreport) {
		WScript.Echo("Enterprise has " + nodeslen + " Systems");
	}
	
	gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT  THRUNODE, COUNT(NODE) FROM O4SRV.TNODESAV  GROUP BY THRUNODE</sql> </CT_Get>"
	tprint(); 
	rows = xmle.selectNodes("//DATA/ROW");
	
	for(node=rows.nextNode(); node!=null; node=rows.nextNode()) {
		nodec= node.childNodes;
		nn = 0;
 		 
 		 for ( nn=0;nn<nodeslen; nn++) {
			if (vnodes[nn] == nodec[0].text) {
				vnumarray[nn] = nodec[1].text;
			}
		}
	}

	for (var n=1;n < nodeslen; n++) { 
		xparent[n] = 1;
		
		for (var nn=1;nn < nodeslen; nn++) { 
			if (parent[n] == vnodes[nn]) { 
				xparent[n] = nn;
				
				if (!hinfo[nn]) { if (nip[n]==nip[nn] ) hinfo[nn] = hinfo[n]; } 
				if (!hinfo[n]) { if (nip[n]==nip[nn] ) hinfo[n] = hinfo[nn]; } 
				break;
			}
		}
	}

	try {
		sqlstr = 'SELECT ORIGINNODE,ELAPSEDTME ,PCTPRCSTME, THREADCNT  FROM KNT.NTPROCESS WHERE INSTCNAME = "KfwServices" AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
		gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>KNT.NTPROCESS</table><sql><![CDATA[" + sqlstr + "]]></sql></CT_Get>";
		tprint(); 
		rows = xmle.selectNodes("//DATA/ROW");
		
		if (rows.length < 1 ) {
			sqlstr = 'SELECT ORIGINNODE,ELAPTIME,VSIZE,CPU,THREADCNT  FROM OMUNX.UNIXPS  WHERE BCMD = "KfwServices" AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
			gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>OMUNX.UNIXPS</table><sql><![CDATA[" + sqlstr + "]]></sql></CT_Get>";
			tprint(); 
			rows = xmle.selectNodes("//DATA/ROW");
			
			 if (rows.length < 1 ) {
				sqlstr = 'SELECT ORIGINNODE,VMSIZE,SIZE,BUSYCPU ,PROCTHRD FROM KLZ.KLZPROC WHERE CMD = "KfwServices" AND SYSTEM.PARMA("NODELIST", "*ALL", 10)' ;
				gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>KLZ.KLZPROC</table><sql><![CDATA[" + sqlstr + "]]></sql></CT_Get>";
				tprint(); 
				rows = xmle.selectNodes("//DATA/ROW");  
			}
		} 
		
		noplog[0] = " Uptime=" + rows[0].childNodes[1].childNodes[0].nodeValue;
		noplog[0] = " Threads=" + rows[0].childNodes[4].childNodes[0].nodeValue;
		noplog[0] += " CPU=" + rows[0].childNodes[3].childNodes[0].nodeValue;
		noplog[0] += " Memory=" + rows[0].childNodes[2].childNodes[0].nodeValue ;
		vnodes[0] = "TEPS";
	}
	catch(e) {
		if (e.message) {
			file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; 
		}
	}
	
	var nn= 1;		
	
	if (nodeslen < 25) { 
		x15 =30; 
	}

	if (!nip[0]) { nip[0] = nip[ncms0[0]]; }
	
	vnodes[0] = "<div style='width:200px;'><b>" + vnodes[0] + " " +  noplog[0] + "</b></div>";

	for (var nn = 1 ; nn < nodeslen ; nn++ ) {  
		noplog[nn] = " ";
      nodesstr += ',"' + vnodes[nn] + '"'; 
  if (!nip[nn]) { nip[nn] = nip[xparent[nn]]; }

  if (( type[nn] == "EM" ) && ((nstatus[nn]=="Y")||(nstatus[nn]=="*ONLINE")))
   { 
        continue ; 
   }

   if ((nstatus[nn]=="*OFFLINE")||(nstatus[nn]=="N")||(nodelev[nn]==7)) 
   { 
 	 noplog[nn] = "HOST=" + hinfo[nn] + ";IP=" + nip[nn] + ";Version=" + nversion[nn];
     continue ; 
   }

   noplog[nn] = "HOST=" + hinfo[nn] + ";IP=" + nip[nn] + ";Version=" + nversion[nn];
 } //for 

for (nn = 1 ; nn < nodeslen ; nn++)
{
 if ((noplog[nn]==" ")||(noplog[nn]=="")) { 
    noplog[nn] = noplog[xparent[nn]];
    } 
}

var xreptstr = " ";
var oldsit = "";
gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.ISITSTSH</table><sql>SELECT GBLTMSTMP, SITNAME, ORIGINNODE,ATOMIZE, DELTASTAT FROM O4SRV.ISITSTSH WHERE DELTASTAT = 'Y' AND ORIGINNODE > 'A' ORDER BY SITNAME, ORIGINNODE , ATOMIZE, GBLTMSTMP </sql> </CT_Get>"
gpayload = gpayload.replace(/rgbltime/g , endTime );
      tprint();
rows = xmle.selectNodes("//DATA/ROW");
rexcplen = rows.length;
var nn = 0;
var limit =100;
if (limit > rexcplen) 
{
  limit = rexcplen;
}
for(node=rows.nextNode(); nn < limit; node=rows.nextNode()) 
{
  nodec= node.childNodes;

  date1 = nodec[0].text;
  hnum[nn] = date1.substring(7,9);
  mnum[nn] = date1.substring(9,11);
  rsit[nn] = nodec[1].text ; 
  rorg[nn] = nodec[2].text ;  
  ratom[nn] = nodec[3].text;
  rstat[nn] = nodec[4].text ; 
  colstr5 += ',"' + nodec[1].text + '"'; 
  colstr6 += ',"' + rorg[nn] + '"'; 
  colstr8 += ',"' + nodec[4].text + '"';
  colstrb += ',"' + hnum[nn] + '"';
  colstrc += ',"' + mnum[nn] + '"';
  nn++;
}
   
if (nstatus[0]) 
{
  nscol = "88ff"; 
} 
else 
{
  nscol ="ff88";
}

nodelev[0] =0;
for (var n=1;n < nodeslen; n++) 
{
	if (type[n] == "EM") { 
		nodelev[n] = 3;type[n] = "TEMS::";
		xparent[n] = 1; 
		
		if (vnodes[n] == parent[0]) {
			rhdno = n; 
			xparent[0] = n;
		} 
		
		temno[emno] = vnodes[n] ;
		temstatus[emno] = nstatus[n] ;
		temversion[emno] = nversion[n] ;
		emno++; 
		ylev[n]= emno; 
		continue;
	}
  if (type[n] == "UX") { nodelev[n] = 5;type[n] = "UNIX System";continue; }
  if (type[n] == "UL") { nodelev[n] = 5;type[n] = "UNIX Log";continue; }
  if (type[n] == "CG") { nodelev[n] = 5;type[n] = "MVS Crypto";continue; }
  if (type[n] == "CP") { nodelev[n] = 5;type[n] = "CICSPLEX"; continue;}
  if (type[n] == "C3") { nodelev[n] = 5;type[n] = "CICS XE ";continue; }
  if (type[n] == "DP") { nodelev[n] = 5;type[n] = "DB2 PLEX"; continue;}
  if (type[n] == "SY") { nodelev[n] = 0;type[n] = "Warehouse Summarization/Pruning"; continue;}
  if (type[n] == "PA") { nodelev[n] = 0;type[n] = "Performance Analyzer";continue;  }
  if (type[n] == "D3") { nodelev[n] = 5;type[n] = "DB2";continue; }
  if (type[n] == "I3") { nodelev[n] = 5;type[n] = "IMS";continue; }
  if (type[n] == "LZ") { nodelev[n] = 5;type[n] = "LINUX"; continue;}
  if (type[n] == "IN") { nodelev[n] = 5;type[n] = "Internet";continue; }
  if (type[n] == "NT") { nodelev[n] = 5;type[n] = "Windows Server";continue; }
  if (type[n] == "MQ") { nodelev[n] = 5;type[n] = "MQ Queue Manager";continue; }
  if (type[n] == "MV") { nodelev[n] = 5;type[n] = "Omegaview"; xdno = n;continue;}
  if (type[n] == "M3") { nodelev[n] = 5;type[n] = "MVS";continue; }
  if (type[n] == "N3") { nodelev[n] = 5;type[n] = "Mainframe Network";continue; }
  if (type[n] == "WO") { nodelev[n] = 5;type[n] = "Status Display Items";continue; }
  if (type[n] == "OS") { nodelev[n] = 5;type[n] = "SYSPLEX"; continue;}
  if (type[n] == "WW") { nodelev[n] = 5;type[n] = "WebSphere"; continue;}
  if (type[n] == "UA") { type[n] = "Universal Agent Data"; continue;}
  if (type[n] == "UM") { nodelev[n] = 5;type[n] = "Universal Agent"; continue;}
  if (type[n] == "SN") { type[n] = "SNMP";continue; }
  if (type[n] == "WL") { nodelev[n] = 5;type[n] = "Web Logic ";continue;}
  if (type[n] == "IP") { nodelev[n] = 5;type[n] = "IMS PLEX "; continue;}
  if (type[n] == "WE") { nodelev[n] = 5;type[n] = "Websphere"; continue;}
  if (type[n] == "MC") { nodelev[n] = 5;type[n] = "MQ Configuration"; continue;}
  if (type[n] == "CF") { nodelev[n] = 5;type[n] = "Configuration";continue; }
  if (type[n] == "S3") { nodelev[n] = 5;type[n] = "Storage"; continue;}
  if (type[n] == "OE") { nodelev[n] = 5;type[n] = " Management Server";continue; } 
  if (type[n] == "HD") { nodelev[n] = 0;type[n] = "Warehouse Proxy"; hdno = n;continue; }
  if (type[n] == "ZO") { nodelev[n] = 5;type[n] = "OMEGAMON"; continue;}
  if (type[n] == "CN") { nodelev[n] = 0;type[n] = "TEP Server"; fromstr="'300"; continue;}
  if (!nodelev[n]) { nodelev[n] = 5 ;
    }

}
nodelev[rhdno] = 1 ;

xparent[rhdno] = 0  ;
xparent[rhdno] = 0;

for (var n=1; n < emno + 1; n++ ) 
{
  levno[n] = 0;
}
vlev[0] = 0;
yaxis[0] = 0;

for (var n=1;n < nodeslen; n++) 
{ 
  if (nodelev[xparent[n]] == 5) { nodelev[n] = 7; }
  if (!ylev[n]) 
  { 
    ylev[n] = ylev[xparent[n]]; 
  }
  if (!ylev[n]) 
  { 
    ylev[n] = ylev[xparent[xparent[n]]]; 
  }
  levno[ylev[n]] = levno[ylev[n]] + 1;
}

for (var n=1;n < emno + 1; n++) 
{ 
  levno[0] = 0; 
  levno[n] = levno[n-1] + levno[n];
  vlev[n] = 0;
  dnodes[n] = 0;  
  callcnt[n] = 0;
  uptime[n] = 0;
  uadstr[n] = "";
  radstr[n] = "";
  topstr1[n] = "";
}


for (var n=1;n < nodeslen; n++) 
{ 
  if ((nstatus[n]=="*OFFLINE")||(nstatus[n]=="N")) 
  {
    dnodes[ylev[n]]++;
 //   continue;
  }
  vlev[ylev[n]]++; 
  if (type[n] != "TEMS::") 
  { 
    yaxis[n]  = levno[ylev[n]-1] + vlev[ylev[n]] ;
  } 
  else 
  {
    yaxis[n] = parseInt((levno[ylev[n] -1] + levno[ylev[n]])/2);
	nresptime[n] = 0;
	hubremdist[n] = "";
	 if ((nstatus[n]=="*ONLINE")||(nstatus[n]=="Y")) 
  {
    gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT SUM(CALLCOUNT),AGENTNAME FROM SYSTEM.AGENTSTATS AT(" + "'" + vnodes[n] + "'" + ") GROUP BY AGENTNAME</sql> </CT_Get>"
    try {
      tprint();
      calltxt[ylev[n]] = "_________________________-->_Calls by Probe:_<--________________________ ";
      rows = xmle.selectNodes("//DATA/ROW");
      node=rows.nextNode();
      for(var nn=0; nn < rows.length; nn++,node=rows.nextNode()) 
      {
      nodec= node.childNodes;
      calltxt[ylev[n]] += nodec[1].text + "=" + addCommas(nodec[0].text) + "; ";
      callcnt[ylev[n]] += parseInt(nodec[0].text);
      } 
      tcallcnt += parseInt(callcnt[ylev[n]]);
      } catch(e) {
	  if (e.message) {
         file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; }
    }
	
    gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT UPTIME FROM KQM.CMSUPTIME AT(" + "'" + vnodes[n] + "'" + ")</sql> </CT_Get>"
    try {
	  resptime = parseInt((new Date).getTime());
      tprint();
	  resptime = (parseInt((new Date).getTime())- resptime) /1000;
	  nresptime[n] =  resptime;
      uptime[ylev[n]] = xmle.selectSingleNode("//DATA/ROW/UPTIME").text;
      uptime[ylev[n]] = parseInt(uptime[ylev[n]]/36)/100; 
    } catch(e) {
	if (e.message) {
file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; }
	}

	 gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT GBLTMSTMP,LSTUSRPRF, OPERATION,OBJNAME,TABLENAME FROM O4SRV.TEIBLOGT WHERE GBLTMSTMP > '0000000' AND TABLENAME = '5140' AND LSTUSRPRF > 'A'</sql> </CT_Get>"
     gpayload = gpayload.replace(/000000/g, gbltime);
   try {
      if (parent[0] == vnodes[n]) {
       tprint();
	  rows = xmle.selectNodes("//DATA/ROW");
	  node=rows.nextNode();
	  for(var nn=0; nn < rows.length; nn++,node=rows.nextNode())  {
	  var bcolor;
	  var op =  node.selectSingleNode("OPERATION").text
	  switch (op)
{
case "A":
  bcolor = "#88ee88";
  break
  case "C":
  bcolor = "#88eeee";
  break
  case "E":
  bcolor = "#ee8888";
  break
  case "D":
  bcolor = "#ee4444";
  break
  case "I":
  bcolor = "#44ee44";
  break
  case "U":
  bcolor = "#44eeee";
  break
default:
  bcolor = "#ffffff";
}
	  eibchanges += "<tr><td>" + formatDate(node.selectSingleNode("GBLTMSTMP").text) + "</td><td style='background-color:" + bcolor + "'>" + node.selectSingleNode("OBJNAME").text + "</td><td>" + node.selectSingleNode("LSTUSRPRF").text + "</td></tr>"; 
	  }
  if (eibchanges) {
	  eibchanges = "<b> Changes Audit to Enterprise Objects</b><br/><FIELDSET style='top:0;width:480; margin-left:0'><LEGEND>Instructions</LEGEND><span>Changes to Enterprise Objects<br/><v:line strokeweight='8px'  strokecolor='#ee8888' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Removals <v:line strokeweight='8px'  strokecolor='#88ee88' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Additions  <v:line strokeweight='8px'  strokecolor='#88eeee' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Changes  </span></FIELDSET><table cellpadding='0' style='border:1 solid black;' cellspacing='0'><th>Timestamp</th><th>Object</th><th>User</th>" + eibchanges + "</table>";
	  }
	  }
      } catch(e) {
	  if (e.message) {
file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; }
}

    try {
       	var sitv = new Array;
		var sitare = new Array;
		var ar = 0;
		var are = 0;
      gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT SITNAME,DELTASTAT,COUNT(LCLTMSTMP) FROM O4SRV.TSITSTSC AT(" + "'" + vnodes[n] + "'" + ") GROUP BY SITNAME,DELTASTAT</sql> </CT_Get>";
          tprint();
      rows = xmle.selectNodes("//DATA/ROW");
      node=rows.nextNode();
      for(var nn=0; nn < rows.length; nn++,node=rows.nextNode()) 
      {
        nodec= node.childNodes;
		var sitx = "" + nodec[0].text;
		if  ((sitx.substring(0,8) == "UADVISOR")|| (sitx.substring(0,2) == "_Z") || (nodec[1].text == "X")) {
		if (nodec[1].text == "L") 
        { 
          backcol = LIGHT_GREEN; 
        } 
        else 
        { 
          backcol = LIGHT_RED; 
        }

		if (backcol==LIGHT_RED) { 
		 uadstr[ylev[n]] += "<b style='background-color:" + backcol + "'> " +  nodec[0].text  + "; </b>"; 
		 }

		} else {

if (nodec[1].text == "Y") { 
		  backcol = LIGHT_YELLOW; 
		  radstr[ylev[n]] += "<b style='background-color:" + backcol + "'> " +  nodec[0].text + "(" + nodec[2].text + ") </b>"; 
	       
			} else 
          { 			   
		  	 backcol = LIGHT_GREEN;
	         radstr[ylev[n]] += "<b style='background-color:" + backcol + "'> " + nodec[0].text  + "; </b>"; 
			
			} 
  }			

		}
		


    } catch(e) {
	if (e.message) {
file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; }
}


	try {
	if (secms==0) { 
   	secms++;
	} 
   } catch(e) {
   if (e.message) {
   file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; }
   
}
   	 diagstr = "<tr><th>" + vnodes[n] + "</th><td VALIGN='TOP'><div>";
	 
   	try {
	 if ((vnodes[n]!==parent[0])&&(runt=="connect")) {
	     var attcms = vnodes[n];
	      gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT NODE,O4ONLINE,GBLTMSTMP FROM O4SRV.INODESTS AT(" + "'" + attcms + "'" + ") ORDER BY NODETYPE, THRUNODE,NODE ASC</sql> </CT_Get>";
          tprint();
          rows = xmle.selectNodes("//DATA/ROW");
		  var nm = 0;
		  var nmb = 0;
	 for(node=rows.nextNode(); node!=null; node=rows.nextNode()) {
        nodec= node.childNodes;
        for (; nm < nodeslen; nm++ )
         {	
		if (nodec[0].text == vnodes[nm] ) { 
 		ngblt[nm]  = "" + ngblt[nm] + ";" + nodec[0].text +  ";"  + "Remote=" + attcms + ":" + nodec[1].text + ";" + nodec[2].text; 
		nm++;
		break;		
		} 
		}
		if (nm == nodeslen) { 
		nm = 0 ; 
		nmb++; 
	        for (; nm < nodeslen; nm++ )
         {	
		if (nodec[0].text == vnodes[nm] ) { 
 		ngblt[nm]  = "" + ngblt[nm] + ";" + nodec[0].text +  ";"   + "Remote=" + attcms + ":" + nodec[1].text + ";" + nodec[2].text; 
		nm++;
		break;		
		} 
		}	
		
		
		
		}
      } 
 
	  }
   } catch(e) {
   if (e.message) {
file5str += "<tr><th></th><th>" + e.message +  "</th></tr>"; }
   }
  
 }
  }

  if (nodeslen < 999) {
  for (var nn=1; nn < rorg.length; nn++)   {
    if ( vnodes[n] == rorg[nn])     { 
      nodesit[n] = 1; 
      break;
    } 
  } 
}  
}
xparent[0] = rhdno; 
yaxis[0] = yaxis[rhdno] - 1;

var yaxis1 = 0;
var yaxis2 = 0;
beano = 0;
if (nodeslen > 11999 )  {
for (var n=0;n < nodeslen; n++) {
if (nodelev[n] < 5) {
yaxis[n] = beano;
beano = beano + 3;
}
 }
} else {

for (var nnn=1;nnn < emno + 1; ) { 
cnn = 0;
for (var n=0;n < nodeslen; n++) {
if (ylev[n]!=nnn) {continue; }
if (( nodelev[n] == 5)||( nodelev[n] == 0)) { 
 cnn++; 
yaxis[n] = parseInt(yaxis[xparent[n]]) - parseInt(vnumarray[xparent[n]]/2) + cnn ;
if (yaxis1 >= yaxis[n]){ 
cnn = yaxis1 - parseInt(yaxis[xparent[n]]) + parseInt(vnumarray[xparent[n]]/2) + 3;
 yaxis[n] = yaxis1 + 3; } else {
yaxis1 = yaxis[n];
 }
 }
if (nodelev[n] == 0) {
yaxis[n] += 4; 
 }  
}
bnn = 0;
for (var n=0;n < nodeslen; n++) {
if (ylev[n]!=nnn) {continue; }
if (nodelev[n] == 7) { 
 bnn++; 
yaxis[n] = parseInt(yaxis[xparent[n]]) + bnn ;
if (yaxis2 >= yaxis[n]){ 
	bnn = yaxis2 - parseInt(yaxis[xparent[n]]) + parseInt(vnumarray[xparent[n]]/2) + 3;
 yaxis[n] = yaxis2 + 3; 
 } else {
yaxis2 = yaxis[n];
 }
}
}
nnn++;
for (var n=0;n < nodeslen; n++) {
if (ylev[n]!=nnn) {continue; }
if (nodelev[n] == 3) { 
if (yaxis2>yaxis1) {
yaxis[n] = yaxis2 + 3; 
yaxis2 = yaxis[n];
} else {
yaxis[n] = yaxis1 + 3;
yaxis1 = yaxis[n];
 } 
}
}
}

ymin = 1000;
for (var n=0;n < nodeslen; n++) {
if (yaxis[n] < ymin ) { ymin = yaxis[n]; } 
}
for (var n=0;n < nodeslen; n++) {
yaxis[n] = yaxis[n] - ymin; 
}

}

offlineCnt = 0;

for (var n=0;n < nodeslen; n++) { 
  
  if ((nstatus[n]=="*OFFLINE")||(nstatus[n]=="N"))   { 
    deadnodes++;nscol = "ff00"; 
  } 
  else   {
    nscol ="00ff";
  }
  
 //if ((yaxis[n]==0)||(yaxis[n] > 0)) {} else { continue; }
  if ((type[n] == "TEMS::")&&(parent[n] !="*HUB"))   { 
    parent[n] = vnodes[rhdno];
    xparent[n] = rhdno; 
  }
    
  if (nodesit[n] == 1)   { 
    adiv = "A" 
  } 
  else   {
    adiv = "div" 
  } 
    fromstr =  "'" + (nodelev[xparent[n]] * 120 + 3) ;
  
  if ((nstatus[n]=="*OFFLINE")||(nstatus[n]=="N"))   { 
    navail[n] = 100;
//	if (!badst[n]) badst[n] = "";
	if (reason[n] != "FA") { 
		reason[n] = " Heartbeat Missed"; 
	}
	else { 
		reason[n] = " Did not Report in" ;
	}
	msgemail += "; Offline System=" + vnodes[n];
	offlineCnt++;
    botstr += "<tr><td style='background-color:#fefefe'>" + offlineCnt + "</td><td style='background-color:#ffaaaa'>" + vnodes[n] + "</td><td>" + type[n] + "</td><td>" + parent[n] + "</td><td>" + formatDate(ngblt[n]) + "</td><td> " + reason[n] +  " </td></tr>" ;
  } 
  else   {
    navail[n] = 0;
  }
  
  if (type[n] != "TEMS::")   { 
    xstr = "&nabla;" + vnodes[n].replace(/-/g,"_") ; 
	xstr = xstr.replace(/\$/g,"_"); 
  } 
  else   {   
      try {
    for (nn=1; nn< ncms0.length; nn++) {
	       
	    if (nip[n]==ncms6[nn]) { 
		   if (!ncms1[nn]) { ncms1[nn] =""; } 
           nip[n] = nip[n]+ ncms1[nn]; }
    }	
   } catch(e) {}
         	
	   if ( vnodes[n] == parent[0]) { backcol = LIGHT_YELLOW; } else { 
//	   if (parent[n] == "MIRROR") { backcol = "#aaaaff"; } else backcol = "#eeeeee"; 
	   }

	   msgemail += vnodes[n].replace(/-/g,"_")  + "[" + nip[n] + "]\n  TEMS: Total=" + (levno[nemno+1] - levno[nemno] ) + "; Offline=" + addCommas(dnodes[nemno + 1]) + ";CallCount=" + addCommas(callcnt[ylev[n]]);
	   if (vnodes[n] == mirrorname ) {
	   	 xstr = "<FIELDSET style='width:180;background-color:#eeeeaa;z-index:2'>FTO:&nabla;" +  vnodes[n].replace(/-/g,"_")  + "[" + nip[n] + "]\n  TEMS: Total=" + (levno[nemno+1] - levno[nemno] ) + "; Offline=" + addCommas(dnodes[nemno + 1]) + ";CallCount=" + addCommas(callcnt[ylev[n]]) + " </FIELDSET>"; 

	   } else {     
	 xstr = "<FIELDSET style='width:180;background-color:" + backcol + ";z-index:2'>&nabla;" +  vnodes[n].replace(/-/g,"_")  + "[" + nip[n] + "]\n  TEMS:_Total=" + (levno[nemno+1] - levno[nemno] ) + "; Offline=" + addCommas(dnodes[nemno + 1]) + ";CallCount=" + addCommas(callcnt[ylev[n]]) + " </FIELDSET>"; 
	}
	   nversion[n] += "\n  TEMS: Total=" + (levno[nemno+1] - levno[nemno] ) + "; Offline=" + addCommas(dnodes[nemno + 1]); 
	 
	   nemno++;
       if (callcnt[ylev[n]] > 0) 
       { 
         backcol = "#ffffff"; 
       } 
       else 
       { 
         backcol = "#B0E2FF"; 
       } 
       if (uptime[ylev[n]] > 0) 
       { 
         callrate = parseInt( callcnt[ylev[n]] / (uptime[ylev[n]] *36) ) / 100; 
		 backcol = "#ffffff";
       } 
       else 
       { 
         callrate = 0 ;
		 backcol = LIGHT_RED; 
       }
	   if (!nresptime[n]) { } else 	   {
	   if (parseInt(nresptime[n]) >9 ) { nresptime[n] = "<b style='background-color:#ffcccc'>" + nresptime[n] + "</b>";
	   } 
	   }
       botstr1a += "<tr><td style='background-color:" + backcol + "'><font color=\"blue\">" + vnodes[n] + "</font> [" + nip[n] + "] " + hinfo[n] + "<font color=\"#424262\"> v</font>" + nversion[n] +  "</td><td style='text-align:right'>" + nresptime[n] + "</td><td style='background-color:" + backcol + ";text-align:right'>" + uptime[ylev[n]] + "</td><td>" + hubremdist[n] + " </td><td style='background-color:" + backcol + ";text-align:right'><A href='javascript:alert(" + '"' +  calltxt[ylev[n]] + '"' + ")'>" + addCommas(callcnt[ylev[n]]) + "</A></td><td style='background-color:" +  backcol + ";text-align:right'>" + addCommas(callrate) + "</td><td>" + uadstr[ylev[n]] + "</td><td>" + radstr[ylev[n]] + "</td></tr>"; 
       topstr1[ylev[n]] = "<fieldset style='border:5 solid #dddddd; '><legend>" + vnodes[n] +  "</legend>" + topstr1[ylev[n]];
  }

    if (navail[n]> 0) {   cdiv = "red"; } else {   cdiv ="gre"; }
	if (n > 0) {
	abc = ngblt[n] + ";"  + noplog[n]  + " ___________________________________________________________________________________________ ";
	abcstr += ',"' + abc + '"'; }
		   if (nodesit[n] == 1) {
	       xstr = xstr + "<a href='javascript:plotsit(" + '"' + vnodes[n] +  '"' + ");' >===></a>" 
         } else {     }
		
	
  if (nodelev[n] < 4)   { 
    topstr += "<v:line strokeweight='1px'  strokecolor='#" + nscol + "00' from=" + fromstr + "," + ((yaxis[xparent[n]] * x15 ) + 80) + "' to='" + (nodelev[n] * 120 - 2) + "," + ((yaxis[n] * x15) + 80) + "'> </v:line>" ;
 	topstr += "<b class='" + cdiv + "' style='position:absolute;left:" + (nodelev[n] * 120 + 5) + ";top:" + ((yaxis[n] * x15 ) + 90) + ";' onclick='alert(" + '"' + abc +'"' + ")' >"  + xstr + "</b>" ;
  }  
  else   { 

 

    if (nodeslen < 11999 ) 
    { 
	if (nodeslen < 1999 ) {

	topstr += "<v:line strokeweight='1px' strokecolor='#" + nscol + "00' from=" + fromstr + "," + ((yaxis[xparent[n]] * x15 ) + 80) + "' to='" + (nodelev[n] * 120) + "," + ((yaxis[n] * x15) + 80) + "'> </v:line>";
    topstr += "<b class='" + cdiv + "' style='position:absolute;left:" + (nodelev[n] * 120 + 5) + ";top:" + ((yaxis[n] * x15 ) + 90) + ";'  onclick='galert(" + n + ")' >" + xstr  +  "</b>";

	} else {
	topstr += "<b class='" + cdiv + "' style='position:absolute;left:" + (nodelev[n] * 120 + 5) + ";top:" + ((yaxis[n] * x15 ) + 90) + ";'  onclick='galert(" + n + ")' >" + xstr  +  "</b>";
        
}
   } else 
    { 
	topstr1[ylev[n]] += "<b class='" + cdiv + "' onclick='galert(" + n + ")' >" + xstr  +  "</b><br/>";

    }
  } 

}
    botstr += "</table>" ;
	botstr6 += xmpstr;
	
    if (nodeslen > 11999 ) 
    { 
var topstr2 = "<div style='position:absolute;left:700;top:100;'>";
for (var n=1;n < emno + 1; n++) { 
topstr2 += topstr1[n] +  "</fieldset>"
}
topstr +=  topstr +  topstr2  + "</div>"; 
}
date1 = new Date; 
file5str += "<tr><th>" + totime(date1) + " </th><th> Done </th></tr>";
botstr5 += "<table>" + file5str + "</table>";
colstr7 = colstr7.replace(/\\/g, "/");
row1 = '<html xmlns:v="urn:schemas-microsoft-com:vml"><head><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><STYLE>  v\\:*   { behavior:url(#default#VML); } v\\:line   { z-index:-1; } a:visited  {color: #0000ff; text-decoration: none}  a:active  {color: grey; text-decoration: none} a:link  {color: #0000ff; text-decoration: none}  center    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px } b.red    { color:red;} b.gre    { color:green;} div    { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  span   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px }  input   { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}  option { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px ;width:200px}  table  { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px;}   h5  	{ background-color:#e2e0e0; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   h4  	{ background-color:#E2E7DE; font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; margin-top:5;margin-bottom:5;}   th     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; border:1 solid #dddddd; nowrap:true; }  b      { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:9px; } td     { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:11px; border:1 solid #eeeeee; nowrap:true; } button { font-family:Tahoma,Arial,Helvetica,sans-serif;font-size:10px; border:1 solid #aaaaaa; background:#E2E7EE;} select { font-size:11px; width:200px} </STYLE>';
file.WriteLine(row1);

var scriptstr = ' function plotsit(vnode) { var k = 0; var next = new Array; var first = new Array; var leftOffset = 200; var factor = 2; var top = new Array; var rdnum = new Array; var sitdnum = new Array; var grandTotal = 0; var color = " "; var baseLine2 = 0; var count = 0; var adiv = "A"; var plot2div = "Situation Exceptions on " + vnode + "\\n"; first[1] = 1; for(var i=1; i<rsit.length; i++) { if (rorg[i]!= vnode) { continue; } next[i] = rsit.length; if(!top[i]) { top[i] = baseLine2 + 40 + count*22; first[i] = 1; count++; } for(var j=i+1; j<rsit.length; j++) { if(rsit[i]==rsit[j] && rorg[i]==rorg[j] ) { next[i] = j; top[j] = top[i]; break; }  }  } for(var i=1; i<rsit.length; i++) { if (rorg[i]!= vnode) { continue; } if((rstat[i]=="Raised")||(rstat[i]=="Y")) { color = "#FF4500"; } else if((rstat[i]=="Reset")||(rstat[i]=="N")) color = "#44FF44"; else if((rstat[i]=="Ack")||(rstat[i]=="A")) color = "#ff8888"; else if((rstat[i]=="Resurf")||(rstat[i]=="E")) color = "#DDA0DD";  else if((rstat[i]=="Error")||(rstat[i]=="X")) color = "#202020"; else continue; if (first[i]) { rdnum[0] = 0;  k++; sitdnum[k] = rsit[i]; rdnum[k] = 0;  if(top[i]>baseLine2) baseLine2 = top[i];  if(color=="#FF4500" || color=="#202020") color2 = "#59E817"; else if(color=="#59E817") color2 = "#0045FF";  else if(color=="#DDA0DD") color2 = "#ff0000"; if (i > 0) { if (rdnum[k-1]<0) { rdnum[k-1] += curtime;} if (k>1) {  } } } if(((rstat[i]=="Raised")||(rstat[i]=="Y"))&&(rdnum[k] >= 0)) { rdnum[k] -= dminutes( hnum[i], mnum[i]); } if(((rstat[i]=="Reset")||(rstat[i]=="N"))&&(rdnum[k])&&(rstat[(i-1)] !="Reset")) { rdnum[k] += dminutes( hnum[i], mnum[i]); } plot2div += "{Situation = " + rsit[i] + " on System = " + rorg[i] + "::" + " at Time = " + hnum[i] + ":" + mnum[i] + " Status = " + rstat[i] +  " }\\n"; } if (rdnum[k]<0) { rdnum[k] += curtime;} grandTotal = 0; for (k= 0; k < rdnum.length; k++ ) { grandTotal += rdnum[k]; } alert( plot2div + "Exception Minutes on " + vnode + " = " + grandTotal); }'
var script1str = 'var curtime = ' + xtim + '; function dminutes(hhnum,mmnum) { var dmin = hhnum * 60  + mmnum * 1; return dmin }  function botstrplot(vno) { for (n=0; n<7; n++) { document.all.botdiv[n].style.visibility = "hidden";} document.all.botdiv[vno].style.visibility = "visible";document.all.topdiv.style.visibility = "hidden"; } function topstrplot() { document.all.topdiv.style.visibility = "visible"; for (n=0; n<7; n++) { document.all.botdiv[n].style.visibility = "hidden";} }';
var script2str = ' function sitrept() { var topstr = " ";for (var nn = 1; nn < sita.length; nn++) {  topstr += "<br/><FIELDSET style=' + "'" + 'width:700;' + "'" + '><LEGEND>" + nodes[nn] + "</LEGEND>";  sita[nn] = sita[nn].replace(/ \\*/g, "<b style =' + "'" + 'background-color:#ffffaa' + "'" + '>");  sita[nn] = sita[nn].replace(/ -/g, "<b style =' + "'" + 'background-color:#aaaadd' + "'" + '>");  sita[nn] = sita[nn].replace(/ \\+/g, "<b style =' + "'" +  'background-color:#aaffaa' + "'" + '>");  sita[nn] = sita[nn].replace(/__________________________________________________________________;/g, "<br/>");  sita[nn] = sita[nn].replace(/;/g, "; </b>");  topstr += "" + sita[nn] + "";  topstr += "</FIELDSET>";  }  document.all("topdiv").innerHTML = topstr; }';
var script3str = ' function galert(m) { alert(abc[m]); } ';

file.WriteLine("<script>"  + colstr5 + ");" + colstr6 + ");" + colstr7 + ");" + abcstr + ");" +colstr8 + ");" +  colstrb + ");");
file.WriteLine( colstrc + ");" );
file.WriteLine("" + scriptstr + script1str +  script3str + "</script></head><body><div  id='topdiv' style='visibility:visible'>");
file.WriteLine(topstr + "</div>");
topstrx = "<h5><center>Tivoli Enterprise Platform: Daily <font color=\"magenta\">ENTERPRISE</font> Audit Report Version 07.00.10beta</center></h5><center><b>" + today +  "</b><b><a href='javascript:botstrplot(5)'>     Timings</a></b></center><div><br/><FIELDSET style='width:150;position:absolute; left:10'><LEGEND>Availabilty and Utilization</LEGEND><A href='javascript:topstrplot()'> " + addCommas(nodeslen)  + "  Managed Systems </A><br/>";

topstrx += "<A href='javascript:botstrplot(4)'>Stressed Resource Barrels</A>";

topstrx += "</FIELDSET> <FIELDSET style='width:220;position:absolute; left:170'><LEGEND>Exceptions</LEGEND><A href='javascript:botstrplot(3)'>" + rexcplen + " ExceptionsStates ," + addCommas(errorcount) + " ErrorSituations</A ><br/><A href='javascript:botstrplot(0)'>  " + addCommas(deadnodes) + " Offline Systems </A> </FIELDSET> <FIELDSET style='width:160;position:absolute; left:400'><LEGEND>Management Servers</LEGEND> <A href='javascript:botstrplot(1)'>Total CallCount = " + addCommas(tcallcnt) + "</A><br/>(" + temno.length + "   Management Servers)</FIELDSET>"

topstrx += " <FIELDSET style='width:230;position:absolute; left:570'><LEGEND>Warehousing/Aggregation/Pruning</LEGEND> <A href='javascript:botstrplot(2)'>Warehoused_Rows = " + dtotalw + " (" + kvout2len + " Objects)<br/> Aggregated__Rows = " + summarized + " ( " + rowsa + " Objects)</A> </FIELDSET>";

if (runt == "diag") {
topstrx += "<FIELDSET style='width:200;position:absolute; left:810'><LEGEND>Outages</LEGEND> <A href='javascript:botstrplot(6)'>Total "  + (nsch + nupt + nhrt) + " outages = " + parseInt(nschn + nuptn + nhrtn) + " minutes. </A> </FIELDSET>";
}
topstrx += "</div>";
if (errorcount > 0) { 
  botstr3 += ""; 
} 

if (!catstr) {
 try {
   cpusage(); 
   } catch(e) { } 
  try {
    gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT COUNT(COLM_NAME),APPL_NAME FROM SYSTEM.SYSCOLUMNS ORDER BY APPL_NAME]]></sql> </CT_Get>";
	tprint(); 
	sno =0;
   rows = xmle.getElementsByTagName('ROW');
   rowno = rows.length;
  for(n1 =0 ; n1 < rowno; n1++) {
    apps[n1] = rows[n1].childNodes[1].childNodes[0].nodeValue + ";" +  rows[n1].childNodes[0].childNodes[0].nodeValue + ";";

	} 
	} catch(e) { 
	caterr = "yes" ; 
	}
     gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password> <table>O4SRV.UTCTIME</table><sql>SELECT APPL_NAME,TIMESTAMP FROM SYSTEM.SYSAPPLS ORDER BY APPL_NAME</sql> </CT_Get>";
     tprint();
	 rows = xmle.getElementsByTagName('ROW');
     rowno = rows.length;
try {
  for(n1 =0 ; n1 < rowno; n1++) {
  if (caterr == "yes") { 
       apps[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue + ";1;";
      }
       apps[n1] += rows[n1].childNodes[0].childNodes[0].nodeValue + ";" + rows[n1].childNodes[1].childNodes[0].nodeValue ;
  
      }
   apps.sort();  
} catch(e) {}



   for ( sno=0;  sno< temno.length; sno++) {
    if ((temstatus[sno] == "*OFFLINE")||(temstatus[sno] == "N")) { continue; }

    resptime = parseInt((new Date).getTime());
	  	   
	rapps = new Array;
	try {
	gpayload = " <CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql><![CDATA[SELECT COUNT(COLM_NAME),APPL_NAME FROM SYSTEM.SYSCOLUMNS AT(" + "'" + temno[sno] + "'" + ") ORDER BY APPL_NAME]]></sql> </CT_Get>";
    tprint();

	rows = xmle.getElementsByTagName('ROW');
    rowno = rows.length;
 
        	rappno = 0;   
	
    for(n1 =0 ; n1 < rowno; n1++) {
	   rapps[n1] = rows[n1].childNodes[1].childNodes[0].nodeValue + ";" +  rows[n1].childNodes[0].childNodes[0].nodeValue + ";";
	} 
    
	} catch(e) { caterr = "yes" ; }
    try {
  gpayload = "<CT_Get> <userid>" + hu + "</userid><password>" + hp + "</password>  <table>O4SRV.UTCTIME</table><sql>SELECT APPL_NAME,TIMESTAMP FROM SYSTEM.SYSAPPLS AT(" + "'" + temno[sno] + "'" + ") ORDER BY APPL_NAME</sql> </CT_Get>";
   tprint();
	presptime = (parseInt((new Date).getTime())- resptime) /1000;
   rows = xmle.getElementsByTagName('ROW');
   rowno = rows.length;
	   

    if (rowno > 3) 
        {  
       catstr += "<td valign='top' style='border:1 solid black'><table  cellspacing='0'><tr><th>" + temno[sno] + "</th><th>" + presptime + " seconds</th></tr>";
       var applno = 0;
       var missing = 0;
	   oldappl = "";
	   oldappno = 0;
	   backcol = LIGHT_YELLOW;
	    catstr += "<tr style='background-color:" + backcol + "'><td >Number of Apps</td><td>= " + rows.length + "<td></tr>"; 
     	rappno = 0;   
        for(n1 =0 ; n1 < rowno; n1++) {
		
		   if (caterr == "yes") { 
   rapps[n1] = rows[n1].childNodes[0].childNodes[0].nodeValue + ";1;";
   }
	   rapps[n1] += rows[n1].childNodes[0].childNodes[0].nodeValue + ";" +  rows[n1].childNodes[1].childNodes[0].nodeValue ;
         
		 } 
	}

	rapps.sort();
       oldappno = 0;
		   for (happno= 0; happno < apps.length; happno++) { 
		   for (rappno = oldappno ; rappno< rapps.length; rappno++) {  
    
		   	if (apps[happno].split(";")[0] == rapps[rappno].split(";")[0] ){ 
             if ((apps[happno].split(";")[1] == rapps[rappno].split(";")[1])||(temno[sno] == hubname)||(rapps[rappno].split(";")[1] == "1")){
			 
			 
			  if ((apps[happno].split(";")[3] == rapps[rappno].split(";")[3])||(temno[sno] == hubname)){
               if (temno[sno] == hubname) {
			   backcol = LIGHT_GREEN;
		       catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +  "] </td><td>" + formatDate(rapps[rappno].split(";")[3]) + "<td></tr>"; 
     	         }
				 } else {
			    backcol =LIGHT_RED;
		       catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +  "] </td><td>" + formatDate(rapps[rappno].split(";")[3]) + "<td></tr>"; 
     	      }
				 
				 }   else   {
               backcol = LIGHT_RED;
   		       catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>" + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +  "] HUB=" +  apps[happno].split(";")[1] + " </td><td>" + formatDate(rapps[rappno].split(";")[3]) + "<td></tr>"; 
             } 
		    oldappno = rappno + 1;
			break;	 
           }  else { 
            if ( apps[happno].split(";")[0] > rapps[rappno].split(";")[0] ) {
			backcol = "yellow";
					       catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + rapps[rappno].split(";")[0] + " [" + rapps[rappno].split(";")[1] +   "]</td><td>" + formatDate(rapps[rappno].split(";")[3]) + "<td></tr>"; 
 		                   oldappno = rappno + 1;
			}  else {
					backcol = "#aaaaff";
					       catstr += "<tr style='background-color:" + backcol + "'><td style='background-color:" + backcol + "'>"  + apps[happno].split(";")[0] + "[" +  apps[happno].split(";")[1] + "]</td><td>Missing</td></tr>"; 
                           break;
			
			}
		   }
		   
		}
		    
		   
 		 }
	   
      catstr += "</table></td>";
	 	   
} catch(e) { 
    caterr = "yes";rowno = 1;
	catstr += "</table></td>";
	} 
  
     }

catstr += "</tr></table>";
	}
try {
//	botstr1b += sdastr;
    botstr1b += catstr ;
	botstr1b += htmlstrsa; 
	botstr1b += agtstr;
	} catch(e) {}
file.WriteLine(topstrx);
botstr += "</table>"; 
file.WriteLine(botstr + "</div>"); 
file.WriteLine(botstr1a + "</table>" + "<br/>" + eibchanges + "<br/>" + sdastr + "<br/><b>Catalog Comparisons</b><br/><FIELDSET style='top:0;width:480; margin-left:0'><LEGEND>Instructions</LEGEND><span>Applications by Management Servers<br/><v:line strokeweight='8px'  strokecolor='#FFF380' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Additional Applications  <v:line strokeweight='8px'  strokecolor='#B0E2FF' from='0px, 0px' to='17px, 0 px' style='width:20'> </v:line>Missing Applications  <v:line strokeweight='8px'  strokecolor='#ffaaaa' from='0px, 0px' to='17px, 0 px' style='width:20'></v:line>Application Version Mismatch</span></FIELDSET><table cellpadding='0' cellspacing='0'><tr>" + botstr1b + "</tr></table></div>" );
file.WriteLine(botstr1 +  botstr2);
try {
file.WriteLine(botstr3 + "</div>");
 } catch(e) { file.WriteLine("<div id='botdiv' style='position:absolute; top:100; visibility:hidden'></div>"); }
file.WriteLine(botstr4 + "</div>");
file.WriteLine(botstr5 + "</div>");
file.WriteLine(botstr6 + "</div>");
file.WriteLine ("</body></html>");
file.Close();
	traceLog("taudit.js::restof() EXIT");	
return( path + filename);
}





//beh if (euser) { email(); }
//beh try {
//beh if (runt == "diag") {
//beh 	   omtec();
//beh }
//beh  } catch(e) {}
//beh  try {
//beh file7.Close(); 
//beh } catch(e) {
//beh }
//beh if (!autoreport) {

//beh WScript.Echo("Done"); 

//beh }
